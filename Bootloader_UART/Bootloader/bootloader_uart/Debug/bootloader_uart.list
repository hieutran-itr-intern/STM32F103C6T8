
bootloader_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002db4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002ec0  08002ec0  00012ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ef0  08002ef0  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002ef0  08002ef0  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ef0  08002ef0  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ef0  08002ef0  00012ef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ef4  08002ef4  00012ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002ef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003d0  20000038  08002f2c  00020038  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000408  08002f2c  00020408  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007361  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001c25  00000000  00000000  000273be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007d8  00000000  00000000  00028fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000720  00000000  00000000  000297c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017620  00000000  00000000  00029ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009217  00000000  00000000  00041500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000827dc  00000000  00000000  0004a717  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ccef3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dbc  00000000  00000000  000ccf44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000038 	.word	0x20000038
 8000128:	00000000 	.word	0x00000000
 800012c:	08002ea8 	.word	0x08002ea8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000003c 	.word	0x2000003c
 8000148:	08002ea8 	.word	0x08002ea8

0800014c <cb_init>:
#include "circular_buffer.h"

void cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	//Limit max size of cbuffer
	cb->size = (cb->size > CB_MAX_SIZE) ? CB_MAX_SIZE: size;
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	685b      	ldr	r3, [r3, #4]
 800015c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000160:	d801      	bhi.n	8000166 <cb_init+0x1a>
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	e001      	b.n	800016a <cb_init+0x1e>
 8000166:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800016a:	68fa      	ldr	r2, [r7, #12]
 800016c:	6053      	str	r3, [r2, #4]
	cb->reader = -1;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	f04f 32ff 	mov.w	r2, #4294967295
 8000174:	60da      	str	r2, [r3, #12]
	cb->writer = -1;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	f04f 32ff 	mov.w	r2, #4294967295
 800017c:	609a      	str	r2, [r3, #8]
	cb->data = (uint8_t*)buf;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	68ba      	ldr	r2, [r7, #8]
 8000182:	601a      	str	r2, [r3, #0]
	cb->overflow = 0;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	2200      	movs	r2, #0
 8000188:	611a      	str	r2, [r3, #16]
	cb->active = true;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2201      	movs	r2, #1
 800018e:	751a      	strb	r2, [r3, #20]
}
 8000190:	bf00      	nop
 8000192:	3714      	adds	r7, #20
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr

0800019a <cb_read>:
	free(cb->data);
	cb->active = false;
}

uint32_t cb_read(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 800019a:	b480      	push	{r7}
 800019c:	b087      	sub	sp, #28
 800019e:	af00      	add	r7, sp, #0
 80001a0:	60f8      	str	r0, [r7, #12]
 80001a2:	60b9      	str	r1, [r7, #8]
 80001a4:	607a      	str	r2, [r7, #4]
	uint32_t index_read;
	for (index_read = 1; index_read <= nbytes; index_read++)
 80001a6:	2301      	movs	r3, #1
 80001a8:	617b      	str	r3, [r7, #20]
 80001aa:	e05e      	b.n	800026a <cb_read+0xd0>
	{
		//Check read full
		if ((cb->reader + 1)%cb->size == cb->writer)
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	68db      	ldr	r3, [r3, #12]
 80001b0:	3301      	adds	r3, #1
 80001b2:	68fa      	ldr	r2, [r7, #12]
 80001b4:	6852      	ldr	r2, [r2, #4]
 80001b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80001ba:	fb01 f202 	mul.w	r2, r1, r2
 80001be:	1a9a      	subs	r2, r3, r2
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	429a      	cmp	r2, r3
 80001c6:	d123      	bne.n	8000210 <cb_read+0x76>
		{
			//Increase reader
			cb->reader = (cb->reader + 1) % cb->size;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	68db      	ldr	r3, [r3, #12]
 80001cc:	3301      	adds	r3, #1
 80001ce:	68fa      	ldr	r2, [r7, #12]
 80001d0:	6852      	ldr	r2, [r2, #4]
 80001d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80001d6:	fb01 f202 	mul.w	r2, r1, r2
 80001da:	1a9a      	subs	r2, r3, r2
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	60da      	str	r2, [r3, #12]
			//Assign data from cbuffer to read buffer
			*(uint8_t*)(buf + cb->reader)= *(cb->data + cb->reader);
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	441a      	add	r2, r3
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	68db      	ldr	r3, [r3, #12]
 80001ee:	68b9      	ldr	r1, [r7, #8]
 80001f0:	440b      	add	r3, r1
 80001f2:	7812      	ldrb	r2, [r2, #0]
 80001f4:	701a      	strb	r2, [r3, #0]
			//Assign data to overflow (2 is read all data)
			cb->overflow = 2;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2202      	movs	r2, #2
 80001fa:	611a      	str	r2, [r3, #16]
			//Reset reader and writer
			cb->reader = -1;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000202:	60da      	str	r2, [r3, #12]
			cb->writer = -1;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	f04f 32ff 	mov.w	r2, #4294967295
 800020a:	609a      	str	r2, [r3, #8]
			return index_read;
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	e030      	b.n	8000272 <cb_read+0xd8>
		}
		else if (cb->writer == -1)
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000218:	d104      	bne.n	8000224 <cb_read+0x8a>
		//Check if there is no data but user want to read
		{
			//Assign data to overflow (2 is read all data)
			cb->overflow = 2;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2202      	movs	r2, #2
 800021e:	611a      	str	r2, [r3, #16]
			return 0;
 8000220:	2300      	movs	r3, #0
 8000222:	e026      	b.n	8000272 <cb_read+0xd8>
		}
		else
		{
			//Assign data to overflow (0 is not writer and read full)
			cb->overflow = 0;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	2200      	movs	r2, #0
 8000228:	611a      	str	r2, [r3, #16]
			//Increase reader
			cb->reader = (cb->reader + 1) % cb->size;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	3301      	adds	r3, #1
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	6852      	ldr	r2, [r2, #4]
 8000234:	fbb3 f1f2 	udiv	r1, r3, r2
 8000238:	fb01 f202 	mul.w	r2, r1, r2
 800023c:	1a9a      	subs	r2, r3, r2
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	60da      	str	r2, [r3, #12]
			//Assign data from cbuffer to read buffer
			*(uint8_t*)(buf + (index_read - 1))= *(cb->data + cb->reader);
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	441a      	add	r2, r3
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	3b01      	subs	r3, #1
 8000250:	68b9      	ldr	r1, [r7, #8]
 8000252:	440b      	add	r3, r1
 8000254:	7812      	ldrb	r2, [r2, #0]
 8000256:	701a      	strb	r2, [r3, #0]
		}
		//Check if read enough required data
		if (index_read == nbytes) return nbytes;
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	d101      	bne.n	8000264 <cb_read+0xca>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	e006      	b.n	8000272 <cb_read+0xd8>
	for (index_read = 1; index_read <= nbytes; index_read++)
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	617b      	str	r3, [r7, #20]
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	429a      	cmp	r2, r3
 8000270:	d99c      	bls.n	80001ac <cb_read+0x12>
	}
}
 8000272:	4618      	mov	r0, r3
 8000274:	371c      	adds	r7, #28
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <cb_write>:

uint32_t cb_write(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 800027c:	b480      	push	{r7}
 800027e:	b087      	sub	sp, #28
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
	uint8_t index_write;
	for (index_write = 1; index_write <= nbytes; index_write++)
 8000288:	2301      	movs	r3, #1
 800028a:	75fb      	strb	r3, [r7, #23]
 800028c:	e040      	b.n	8000310 <cb_write+0x94>
	{
		//Check overflow data when writing
		if ((cb->writer + 1)%cb->size == cb->reader)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	3301      	adds	r3, #1
 8000294:	68fa      	ldr	r2, [r7, #12]
 8000296:	6852      	ldr	r2, [r2, #4]
 8000298:	fbb3 f1f2 	udiv	r1, r3, r2
 800029c:	fb01 f202 	mul.w	r2, r1, r2
 80002a0:	1a9a      	subs	r2, r3, r2
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d105      	bne.n	80002b6 <cb_write+0x3a>
		{
			//Assign data to overflow (1 is can not writer more data)
			cb->overflow = 1;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
			return (index_write - 1);
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	e030      	b.n	8000318 <cb_write+0x9c>
		}
		else
		{
			//Assign data to overflow (0 is not writer and read full)
			cb->overflow = 0;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
			//Increase writer
			cb->writer = (cb->writer + 1) % cb->size;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	3301      	adds	r3, #1
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	6852      	ldr	r2, [r2, #4]
 80002c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80002ca:	fb01 f202 	mul.w	r2, r1, r2
 80002ce:	1a9a      	subs	r2, r3, r2
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	609a      	str	r2, [r3, #8]
			//Assign data from writer buffer to cbuffer
			*(cb->data + cb->writer) = *(uint8_t*)(buf + (index_write - 1));
 80002d4:	7dfb      	ldrb	r3, [r7, #23]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	441a      	add	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	440b      	add	r3, r1
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	701a      	strb	r2, [r3, #0]
		}

		//Check if write enough required data
		if (index_write == nbytes) return nbytes;
 80002ea:	7dfb      	ldrb	r3, [r7, #23]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d101      	bne.n	80002f6 <cb_write+0x7a>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	e010      	b.n	8000318 <cb_write+0x9c>

		//Check if amount data is equal than size of cbuffer
		if (index_write == cb->size)
 80002f6:	7dfa      	ldrb	r2, [r7, #23]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d104      	bne.n	800030a <cb_write+0x8e>
		{
			//Assign data to overflow (1 is can not writer more data)
			cb->overflow = 1;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	2201      	movs	r2, #1
 8000304:	611a      	str	r2, [r3, #16]
			return index_write;
 8000306:	7dfb      	ldrb	r3, [r7, #23]
 8000308:	e006      	b.n	8000318 <cb_write+0x9c>
	for (index_write = 1; index_write <= nbytes; index_write++)
 800030a:	7dfb      	ldrb	r3, [r7, #23]
 800030c:	3301      	adds	r3, #1
 800030e:	75fb      	strb	r3, [r7, #23]
 8000310:	7dfb      	ldrb	r3, [r7, #23]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	429a      	cmp	r2, r3
 8000316:	d2ba      	bcs.n	800028e <cb_write+0x12>
		}

	}
}
 8000318:	4618      	mov	r0, r3
 800031a:	371c      	adds	r7, #28
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <cb_data_count>:

uint32_t cb_data_count(cbuffer_t *cb)
{
 8000322:	b480      	push	{r7}
 8000324:	b085      	sub	sp, #20
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
	uint8_t num_empty_bytes_current;
	//Check if reader is reading and not read all data
	if (cb->reader != -1)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000332:	d021      	beq.n	8000378 <cb_data_count+0x56>
	{
		if (cb->reader > cb->writer)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68da      	ldr	r2, [r3, #12]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	429a      	cmp	r2, r3
 800033e:	d90c      	bls.n	800035a <cb_data_count+0x38>
		{
			num_empty_bytes_current = cb->size - (cb->reader - cb->writer);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	b2da      	uxtb	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	b2d9      	uxtb	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	1acb      	subs	r3, r1, r3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4413      	add	r3, r2
 8000358:	73fb      	strb	r3, [r7, #15]
		}
		if (cb->reader < cb->writer)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68da      	ldr	r2, [r3, #12]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	429a      	cmp	r2, r3
 8000364:	d214      	bcs.n	8000390 <cb_data_count+0x6e>
		{
			num_empty_bytes_current = cb->writer - cb->reader;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	73fb      	strb	r3, [r7, #15]
 8000376:	e00b      	b.n	8000390 <cb_data_count+0x6e>
		}
	}
	else
	{
		//Check if read all data
		if (cb->overflow == 2) num_empty_bytes_current = 0;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	2b02      	cmp	r3, #2
 800037e:	d102      	bne.n	8000386 <cb_data_count+0x64>
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	e004      	b.n	8000390 <cb_data_count+0x6e>
		//Check if this is the first time read when cbuffer init
		else num_empty_bytes_current = cb->writer + 1;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	3301      	adds	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
	}
	return num_empty_bytes_current;
 8000390:	7bfb      	ldrb	r3, [r7, #15]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <flash_write>:
	return status;

}

flash_status flash_write(uint32_t address, uint32_t *data, uint32_t length)
{
 800039c:	b5b0      	push	{r4, r5, r7, lr}
 800039e:	b086      	sub	sp, #24
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	60b9      	str	r1, [r7, #8]
 80003a6:	607a      	str	r2, [r7, #4]
	flash_status status = FLASH_OK;
 80003a8:	2300      	movs	r3, #0
 80003aa:	75fb      	strb	r3, [r7, #23]

	HAL_FLASH_Unlock();
 80003ac:	f001 f87c 	bl	80014a8 <HAL_FLASH_Unlock>

	/* Loop the array */
	for (uint32_t i = 0; (i < length) && (status == FLASH_OK); i++)
 80003b0:	2300      	movs	r3, #0
 80003b2:	613b      	str	r3, [r7, #16]
 80003b4:	e02a      	b.n	800040c <flash_write+0x70>
	{
		/* Check if data is reached of the memory*/
		if (address >= FLASH_APP_END_ADDRESS)
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	4a1b      	ldr	r2, [pc, #108]	; (8000428 <flash_write+0x8c>)
 80003ba:	4293      	cmp	r3, r2
 80003bc:	d902      	bls.n	80003c4 <flash_write+0x28>
		{
			status = FLASH_ERROR_WRITE;
 80003be:	2301      	movs	r3, #1
 80003c0:	75fb      	strb	r3, [r7, #23]
 80003c2:	e020      	b.n	8000406 <flash_write+0x6a>
		}
		else
		{
			/* Write data */
			if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, address, data[i]))
 80003c4:	693b      	ldr	r3, [r7, #16]
 80003c6:	009b      	lsls	r3, r3, #2
 80003c8:	68ba      	ldr	r2, [r7, #8]
 80003ca:	4413      	add	r3, r2
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	2200      	movs	r2, #0
 80003d0:	461c      	mov	r4, r3
 80003d2:	4615      	mov	r5, r2
 80003d4:	4622      	mov	r2, r4
 80003d6:	462b      	mov	r3, r5
 80003d8:	68f9      	ldr	r1, [r7, #12]
 80003da:	2002      	movs	r0, #2
 80003dc:	f000 fff4 	bl	80013c8 <HAL_FLASH_Program>
 80003e0:	4603      	mov	r3, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d001      	beq.n	80003ea <flash_write+0x4e>
			{
			    status = FLASH_ERROR_WRITE;
 80003e6:	2301      	movs	r3, #1
 80003e8:	75fb      	strb	r3, [r7, #23]
			}
			/* Check data if not read correct*/
		    if (((data[i])) != (*(volatile uint32_t*)address))
 80003ea:	693b      	ldr	r3, [r7, #16]
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	68ba      	ldr	r2, [r7, #8]
 80003f0:	4413      	add	r3, r2
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	68fb      	ldr	r3, [r7, #12]
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d001      	beq.n	8000400 <flash_write+0x64>
		    {
		        status = FLASH_ERROR;
 80003fc:	2302      	movs	r3, #2
 80003fe:	75fb      	strb	r3, [r7, #23]
		    }

		    /* Shift address*/
		    address += 4;
 8000400:	68fb      	ldr	r3, [r7, #12]
 8000402:	3304      	adds	r3, #4
 8000404:	60fb      	str	r3, [r7, #12]
	for (uint32_t i = 0; (i < length) && (status == FLASH_OK); i++)
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	3301      	adds	r3, #1
 800040a:	613b      	str	r3, [r7, #16]
 800040c:	693a      	ldr	r2, [r7, #16]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	d202      	bcs.n	800041a <flash_write+0x7e>
 8000414:	7dfb      	ldrb	r3, [r7, #23]
 8000416:	2b00      	cmp	r3, #0
 8000418:	d0cd      	beq.n	80003b6 <flash_write+0x1a>
		}

	}

	HAL_FLASH_Lock();
 800041a:	f001 f86b 	bl	80014f4 <HAL_FLASH_Lock>

}
 800041e:	bf00      	nop
 8000420:	4618      	mov	r0, r3
 8000422:	3718      	adds	r7, #24
 8000424:	46bd      	mov	sp, r7
 8000426:	bdb0      	pop	{r4, r5, r7, pc}
 8000428:	0801ffee 	.word	0x0801ffee

0800042c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	b082      	sub	sp, #8
 8000430:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000432:	f000 fbbb 	bl	8000bac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000436:	f000 f89d 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800043a:	f000 f927 	bl	800068c <MX_GPIO_Init>
  MX_DMA_Init();
 800043e:	f000 f8ff 	bl	8000640 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000442:	f000 f8d3 	bl	80005ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_transmit_string((uint8_t*)"Hello\n\r");
 8000446:	4842      	ldr	r0, [pc, #264]	; (8000550 <main+0x124>)
 8000448:	f000 fb64 	bl	8000b14 <uart_transmit_string>
  cb_init(&cb, buffer, 128);
 800044c:	2280      	movs	r2, #128	; 0x80
 800044e:	4941      	ldr	r1, [pc, #260]	; (8000554 <main+0x128>)
 8000450:	4841      	ldr	r0, [pc, #260]	; (8000558 <main+0x12c>)
 8000452:	f7ff fe7b 	bl	800014c <cb_init>


  start_reception();
 8000456:	f000 f945 	bl	80006e4 <start_reception>
  //flash_erase(0x08004000);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	cb_read(&cb, frame_rx_data, cb_data_count(&cb));
 800045a:	483f      	ldr	r0, [pc, #252]	; (8000558 <main+0x12c>)
 800045c:	f7ff ff61 	bl	8000322 <cb_data_count>
 8000460:	4603      	mov	r3, r0
 8000462:	461a      	mov	r2, r3
 8000464:	493d      	ldr	r1, [pc, #244]	; (800055c <main+0x130>)
 8000466:	483c      	ldr	r0, [pc, #240]	; (8000558 <main+0x12c>)
 8000468:	f7ff fe97 	bl	800019a <cb_read>

    /* USER CODE END WHILE */
		data_frame.start_code = *frame_rx_data;
 800046c:	4b3b      	ldr	r3, [pc, #236]	; (800055c <main+0x130>)
 800046e:	781a      	ldrb	r2, [r3, #0]
 8000470:	4b3b      	ldr	r3, [pc, #236]	; (8000560 <main+0x134>)
 8000472:	701a      	strb	r2, [r3, #0]

		data_frame.byte_count = *(frame_rx_data + 1);
 8000474:	4b39      	ldr	r3, [pc, #228]	; (800055c <main+0x130>)
 8000476:	785a      	ldrb	r2, [r3, #1]
 8000478:	4b39      	ldr	r3, [pc, #228]	; (8000560 <main+0x134>)
 800047a:	705a      	strb	r2, [r3, #1]

		data_frame.address = ((*(frame_rx_data + 2) << 8) & 0xFF00) | (*(frame_rx_data + 3) & 0x00FF);
 800047c:	4b37      	ldr	r3, [pc, #220]	; (800055c <main+0x130>)
 800047e:	789b      	ldrb	r3, [r3, #2]
 8000480:	021b      	lsls	r3, r3, #8
 8000482:	b21a      	sxth	r2, r3
 8000484:	4b35      	ldr	r3, [pc, #212]	; (800055c <main+0x130>)
 8000486:	78db      	ldrb	r3, [r3, #3]
 8000488:	b21b      	sxth	r3, r3
 800048a:	4313      	orrs	r3, r2
 800048c:	b21b      	sxth	r3, r3
 800048e:	b29a      	uxth	r2, r3
 8000490:	4b33      	ldr	r3, [pc, #204]	; (8000560 <main+0x134>)
 8000492:	805a      	strh	r2, [r3, #2]

		data_frame.record_type = *(frame_rx_data + 4);
 8000494:	4b31      	ldr	r3, [pc, #196]	; (800055c <main+0x130>)
 8000496:	791a      	ldrb	r2, [r3, #4]
 8000498:	4b31      	ldr	r3, [pc, #196]	; (8000560 <main+0x134>)
 800049a:	711a      	strb	r2, [r3, #4]

		if (data_frame.record_type == RECORD_DATA)
 800049c:	4b30      	ldr	r3, [pc, #192]	; (8000560 <main+0x134>)
 800049e:	791b      	ldrb	r3, [r3, #4]
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d13b      	bne.n	800051c <main+0xf0>
		{
			for (uint8_t i = 0; i < data_frame.byte_count; i++)
 80004a4:	2300      	movs	r3, #0
 80004a6:	71fb      	strb	r3, [r7, #7]
 80004a8:	e00c      	b.n	80004c4 <main+0x98>
			{
				data_frame.data[i] = *(frame_rx_data + 5 + i);
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	3305      	adds	r3, #5
 80004ae:	4a2b      	ldr	r2, [pc, #172]	; (800055c <main+0x130>)
 80004b0:	441a      	add	r2, r3
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	7811      	ldrb	r1, [r2, #0]
 80004b6:	4a2a      	ldr	r2, [pc, #168]	; (8000560 <main+0x134>)
 80004b8:	4413      	add	r3, r2
 80004ba:	460a      	mov	r2, r1
 80004bc:	715a      	strb	r2, [r3, #5]
			for (uint8_t i = 0; i < data_frame.byte_count; i++)
 80004be:	79fb      	ldrb	r3, [r7, #7]
 80004c0:	3301      	adds	r3, #1
 80004c2:	71fb      	strb	r3, [r7, #7]
 80004c4:	4b26      	ldr	r3, [pc, #152]	; (8000560 <main+0x134>)
 80004c6:	785b      	ldrb	r3, [r3, #1]
 80004c8:	79fa      	ldrb	r2, [r7, #7]
 80004ca:	429a      	cmp	r2, r3
 80004cc:	d3ed      	bcc.n	80004aa <main+0x7e>
			}

			data_frame.checksum = *(frame_rx_data + (uint32_t)(data_frame.byte_count + 5));
 80004ce:	4b24      	ldr	r3, [pc, #144]	; (8000560 <main+0x134>)
 80004d0:	785b      	ldrb	r3, [r3, #1]
 80004d2:	3305      	adds	r3, #5
 80004d4:	461a      	mov	r2, r3
 80004d6:	4b21      	ldr	r3, [pc, #132]	; (800055c <main+0x130>)
 80004d8:	4413      	add	r3, r2
 80004da:	781a      	ldrb	r2, [r3, #0]
 80004dc:	4b20      	ldr	r3, [pc, #128]	; (8000560 <main+0x134>)
 80004de:	755a      	strb	r2, [r3, #21]

			full_address = (uint32_t)(((high_address << 16) & 0xFFFF0000) | ( data_frame.address & 0x0000FFFF));
 80004e0:	4b20      	ldr	r3, [pc, #128]	; (8000564 <main+0x138>)
 80004e2:	881b      	ldrh	r3, [r3, #0]
 80004e4:	041b      	lsls	r3, r3, #16
 80004e6:	461a      	mov	r2, r3
 80004e8:	4b1d      	ldr	r3, [pc, #116]	; (8000560 <main+0x134>)
 80004ea:	885b      	ldrh	r3, [r3, #2]
 80004ec:	4313      	orrs	r3, r2
 80004ee:	4a1e      	ldr	r2, [pc, #120]	; (8000568 <main+0x13c>)
 80004f0:	6013      	str	r3, [r2, #0]

			if (last_checksum != data_frame.checksum)
 80004f2:	4b1b      	ldr	r3, [pc, #108]	; (8000560 <main+0x134>)
 80004f4:	7d5a      	ldrb	r2, [r3, #21]
 80004f6:	4b1d      	ldr	r3, [pc, #116]	; (800056c <main+0x140>)
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	429a      	cmp	r2, r3
 80004fc:	d022      	beq.n	8000544 <main+0x118>
			{
				flash_write(full_address, (uint32_t*)data_frame.data, (data_frame.byte_count/4));
 80004fe:	4b1a      	ldr	r3, [pc, #104]	; (8000568 <main+0x13c>)
 8000500:	6818      	ldr	r0, [r3, #0]
 8000502:	4b17      	ldr	r3, [pc, #92]	; (8000560 <main+0x134>)
 8000504:	785b      	ldrb	r3, [r3, #1]
 8000506:	089b      	lsrs	r3, r3, #2
 8000508:	b2db      	uxtb	r3, r3
 800050a:	461a      	mov	r2, r3
 800050c:	4918      	ldr	r1, [pc, #96]	; (8000570 <main+0x144>)
 800050e:	f7ff ff45 	bl	800039c <flash_write>
				last_checksum = data_frame.checksum;
 8000512:	4b13      	ldr	r3, [pc, #76]	; (8000560 <main+0x134>)
 8000514:	7d5a      	ldrb	r2, [r3, #21]
 8000516:	4b15      	ldr	r3, [pc, #84]	; (800056c <main+0x140>)
 8000518:	701a      	strb	r2, [r3, #0]
 800051a:	e013      	b.n	8000544 <main+0x118>
			}

		}
		else if (data_frame.record_type == RECORD_EX_LIR_ADDRESS)
 800051c:	4b10      	ldr	r3, [pc, #64]	; (8000560 <main+0x134>)
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	2b04      	cmp	r3, #4
 8000522:	d10f      	bne.n	8000544 <main+0x118>
		{
			high_address = ((*(frame_rx_data + 5) << 8) & 0xFF00) | (*(frame_rx_data + 6));
 8000524:	4b0d      	ldr	r3, [pc, #52]	; (800055c <main+0x130>)
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	021b      	lsls	r3, r3, #8
 800052a:	b21a      	sxth	r2, r3
 800052c:	4b0b      	ldr	r3, [pc, #44]	; (800055c <main+0x130>)
 800052e:	799b      	ldrb	r3, [r3, #6]
 8000530:	b21b      	sxth	r3, r3
 8000532:	4313      	orrs	r3, r2
 8000534:	b21b      	sxth	r3, r3
 8000536:	b29a      	uxth	r2, r3
 8000538:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <main+0x138>)
 800053a:	801a      	strh	r2, [r3, #0]
			data_frame.checksum = *(frame_rx_data + 7);
 800053c:	4b07      	ldr	r3, [pc, #28]	; (800055c <main+0x130>)
 800053e:	79da      	ldrb	r2, [r3, #7]
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <main+0x134>)
 8000542:	755a      	strb	r2, [r3, #21]
		}
		last_checksum = data_frame.checksum;
 8000544:	4b06      	ldr	r3, [pc, #24]	; (8000560 <main+0x134>)
 8000546:	7d5a      	ldrb	r2, [r3, #21]
 8000548:	4b08      	ldr	r3, [pc, #32]	; (800056c <main+0x140>)
 800054a:	701a      	strb	r2, [r3, #0]
	cb_read(&cb, frame_rx_data, cb_data_count(&cb));
 800054c:	e785      	b.n	800045a <main+0x2e>
 800054e:	bf00      	nop
 8000550:	08002ec0 	.word	0x08002ec0
 8000554:	200002c4 	.word	0x200002c4
 8000558:	20000344 	.word	0x20000344
 800055c:	2000035c 	.word	0x2000035c
 8000560:	200002ac 	.word	0x200002ac
 8000564:	20000026 	.word	0x20000026
 8000568:	200003dc 	.word	0x200003dc
 800056c:	200003e0 	.word	0x200003e0
 8000570:	200002b1 	.word	0x200002b1

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b090      	sub	sp, #64	; 0x40
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0318 	add.w	r3, r7, #24
 800057e:	2228      	movs	r2, #40	; 0x28
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f002 fc88 	bl	8002e98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	1d3b      	adds	r3, r7, #4
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000596:	2302      	movs	r3, #2
 8000598:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800059a:	2301      	movs	r3, #1
 800059c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800059e:	2310      	movs	r3, #16
 80005a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005a2:	2300      	movs	r3, #0
 80005a4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005a6:	f107 0318 	add.w	r3, r7, #24
 80005aa:	4618      	mov	r0, r3
 80005ac:	f001 f9e8 	bl	8001980 <HAL_RCC_OscConfig>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d001      	beq.n	80005ba <SystemClock_Config+0x46>
  {
    Error_Handler();
 80005b6:	f000 f97f 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005ba:	230f      	movs	r3, #15
 80005bc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005c2:	2300      	movs	r3, #0
 80005c4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005c6:	2300      	movs	r3, #0
 80005c8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ca:	2300      	movs	r3, #0
 80005cc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fc56 	bl	8001e84 <HAL_RCC_ClockConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005de:	f000 f96b 	bl	80008b8 <Error_Handler>
  }
}
 80005e2:	bf00      	nop
 80005e4:	3740      	adds	r7, #64	; 0x40
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 80005f2:	4a12      	ldr	r2, [pc, #72]	; (800063c <MX_USART1_UART_Init+0x50>)
 80005f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 80005f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005fe:	4b0e      	ldr	r3, [pc, #56]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000600:	2200      	movs	r2, #0
 8000602:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000606:	2200      	movs	r2, #0
 8000608:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800060a:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000610:	4b09      	ldr	r3, [pc, #36]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000612:	220c      	movs	r2, #12
 8000614:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000616:	4b08      	ldr	r3, [pc, #32]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800061c:	4b06      	ldr	r3, [pc, #24]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 800061e:	2200      	movs	r2, #0
 8000620:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000622:	4805      	ldr	r0, [pc, #20]	; (8000638 <MX_USART1_UART_Init+0x4c>)
 8000624:	f001 fdc6 	bl	80021b4 <HAL_UART_Init>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800062e:	f000 f943 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000632:	bf00      	nop
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000054 	.word	0x20000054
 800063c:	40013800 	.word	0x40013800

08000640 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000646:	4b10      	ldr	r3, [pc, #64]	; (8000688 <MX_DMA_Init+0x48>)
 8000648:	695b      	ldr	r3, [r3, #20]
 800064a:	4a0f      	ldr	r2, [pc, #60]	; (8000688 <MX_DMA_Init+0x48>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6153      	str	r3, [r2, #20]
 8000652:	4b0d      	ldr	r3, [pc, #52]	; (8000688 <MX_DMA_Init+0x48>)
 8000654:	695b      	ldr	r3, [r3, #20]
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	607b      	str	r3, [r7, #4]
 800065c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800065e:	2200      	movs	r2, #0
 8000660:	2100      	movs	r1, #0
 8000662:	200e      	movs	r0, #14
 8000664:	f000 fbdb 	bl	8000e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000668:	200e      	movs	r0, #14
 800066a:	f000 fbf4 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800066e:	2200      	movs	r2, #0
 8000670:	2100      	movs	r1, #0
 8000672:	200f      	movs	r0, #15
 8000674:	f000 fbd3 	bl	8000e1e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000678:	200f      	movs	r0, #15
 800067a:	f000 fbec 	bl	8000e56 <HAL_NVIC_EnableIRQ>

}
 800067e:	bf00      	nop
 8000680:	3708      	adds	r7, #8
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40021000 	.word	0x40021000

0800068c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800068c:	b480      	push	{r7}
 800068e:	b083      	sub	sp, #12
 8000690:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <MX_GPIO_Init+0x28>)
 8000694:	699b      	ldr	r3, [r3, #24]
 8000696:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <MX_GPIO_Init+0x28>)
 8000698:	f043 0304 	orr.w	r3, r3, #4
 800069c:	6193      	str	r3, [r2, #24]
 800069e:	4b05      	ldr	r3, [pc, #20]	; (80006b4 <MX_GPIO_Init+0x28>)
 80006a0:	699b      	ldr	r3, [r3, #24]
 80006a2:	f003 0304 	and.w	r3, r3, #4
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]

}
 80006aa:	bf00      	nop
 80006ac:	370c      	adds	r7, #12
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr
 80006b4:	40021000 	.word	0x40021000

080006b8 <print_info>:

/* USER CODE BEGIN 4 */
void print_info(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	60f8      	str	r0, [r7, #12]
 80006c0:	60b9      	str	r1, [r7, #8]
 80006c2:	4613      	mov	r3, r2
 80006c4:	80fb      	strh	r3, [r7, #6]
  if (HAL_UART_Transmit(huart, String, Size, 100) != HAL_OK)
 80006c6:	88fa      	ldrh	r2, [r7, #6]
 80006c8:	2364      	movs	r3, #100	; 0x64
 80006ca:	68b9      	ldr	r1, [r7, #8]
 80006cc:	68f8      	ldr	r0, [r7, #12]
 80006ce:	f001 fdbe 	bl	800224e <HAL_UART_Transmit>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <print_info+0x24>
  {
    Error_Handler();
 80006d8:	f000 f8ee 	bl	80008b8 <Error_Handler>
  }
}
 80006dc:	bf00      	nop
 80006de:	3710      	adds	r7, #16
 80006e0:	46bd      	mov	sp, r7
 80006e2:	bd80      	pop	{r7, pc}

080006e4 <start_reception>:

void start_reception(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* Initializes buffer swap
   */
  p_buffer_for_reception = aRXbufferA;
 80006e8:	4b0b      	ldr	r3, [pc, #44]	; (8000718 <start_reception+0x34>)
 80006ea:	4a0c      	ldr	r2, [pc, #48]	; (800071c <start_reception+0x38>)
 80006ec:	601a      	str	r2, [r3, #0]
  p_buffer_for_user = aRXbufferB;
 80006ee:	4b0c      	ldr	r3, [pc, #48]	; (8000720 <start_reception+0x3c>)
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <start_reception+0x40>)
 80006f2:	601a      	str	r2, [r3, #0]

  /* Print user info on COMPORT*/
  print_info(&huart1, aTextInfo, COUNTOF(aTextInfo));
 80006f4:	2226      	movs	r2, #38	; 0x26
 80006f6:	490c      	ldr	r1, [pc, #48]	; (8000728 <start_reception+0x44>)
 80006f8:	480c      	ldr	r0, [pc, #48]	; (800072c <start_reception+0x48>)
 80006fa:	f7ff ffdd 	bl	80006b8 <print_info>

  /*Initialize RX sequence using Reception To Idle event API */
  if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, aRXBufferUser, RX_BUFFER_SIZE) != HAL_OK)
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	490b      	ldr	r1, [pc, #44]	; (8000730 <start_reception+0x4c>)
 8000702:	480a      	ldr	r0, [pc, #40]	; (800072c <start_reception+0x48>)
 8000704:	f001 fe35 	bl	8002372 <HAL_UARTEx_ReceiveToIdle_DMA>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <start_reception+0x2e>
  {
    Error_Handler();
 800070e:	f000 f8d3 	bl	80008b8 <Error_Handler>
  }
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	200002a0 	.word	0x200002a0
 800071c:	200001a0 	.word	0x200001a0
 8000720:	200002a4 	.word	0x200002a4
 8000724:	20000220 	.word	0x20000220
 8000728:	20000000 	.word	0x20000000
 800072c:	20000054 	.word	0x20000054
 8000730:	20000120 	.word	0x20000120

08000734 <user_data_treatment>:

void user_data_treatment(UART_HandleTypeDef *huart, uint8_t *p_data, uint16_t size)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b086      	sub	sp, #24
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	4613      	mov	r3, r2
 8000740:	80fb      	strh	r3, [r7, #6]
  uint8_t *p_buff = p_data;
 8000742:	68bb      	ldr	r3, [r7, #8]
 8000744:	617b      	str	r3, [r7, #20]
  uint8_t i;

  cb_write(&cb, p_data, size);
 8000746:	88fb      	ldrh	r3, [r7, #6]
 8000748:	461a      	mov	r2, r3
 800074a:	68b9      	ldr	r1, [r7, #8]
 800074c:	4811      	ldr	r0, [pc, #68]	; (8000794 <user_data_treatment+0x60>)
 800074e:	f7ff fd95 	bl	800027c <cb_write>

  for (i = 0; i < size; i++)
 8000752:	2300      	movs	r3, #0
 8000754:	74fb      	strb	r3, [r7, #19]
 8000756:	e012      	b.n	800077e <user_data_treatment+0x4a>
  {
    while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE)))
 8000758:	bf00      	nop
 800075a:	68fb      	ldr	r3, [r7, #12]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000764:	2b80      	cmp	r3, #128	; 0x80
 8000766:	d1f8      	bne.n	800075a <user_data_treatment+0x26>
    {
    }
    huart->Instance->DR = *p_buff;
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	781a      	ldrb	r2, [r3, #0]
 800076c:	68fb      	ldr	r3, [r7, #12]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
    p_buff++;
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	3301      	adds	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
  for (i = 0; i < size; i++)
 8000778:	7cfb      	ldrb	r3, [r7, #19]
 800077a:	3301      	adds	r3, #1
 800077c:	74fb      	strb	r3, [r7, #19]
 800077e:	7cfb      	ldrb	r3, [r7, #19]
 8000780:	b29b      	uxth	r3, r3
 8000782:	88fa      	ldrh	r2, [r7, #6]
 8000784:	429a      	cmp	r2, r3
 8000786:	d8e7      	bhi.n	8000758 <user_data_treatment+0x24>
  }
}
 8000788:	bf00      	nop
 800078a:	bf00      	nop
 800078c:	3718      	adds	r7, #24
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	20000344 	.word	0x20000344

08000798 <HAL_UARTEx_RxEventCallback>:
 * @param huart UART handle
 * @param size Number of data available in application reception buffer
 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
 80007a0:	460b      	mov	r3, r1
 80007a2:	807b      	strh	r3, [r7, #2]
  static uint8_t old_pos = 0;
  uint8_t *p_temp;
  uint8_t i;

  /*Check if number of received data in reception buffer has changed*/
  if (size != old_pos)
 80007a4:	4b3f      	ldr	r3, [pc, #252]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	887a      	ldrh	r2, [r7, #2]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d070      	beq.n	8000892 <HAL_UARTEx_RxEventCallback+0xfa>
  {
    /*Check if of index in reception buffer has be increased */
    if (size > old_pos)
 80007b0:	4b3c      	ldr	r3, [pc, #240]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	b29b      	uxth	r3, r3
 80007b6:	887a      	ldrh	r2, [r7, #2]
 80007b8:	429a      	cmp	r2, r3
 80007ba:	d91e      	bls.n	80007fa <HAL_UARTEx_RxEventCallback+0x62>
    {
      /*Current position is higher than previous one*/
      num_received_chars = size - old_pos;
 80007bc:	887b      	ldrh	r3, [r7, #2]
 80007be:	4a39      	ldr	r2, [pc, #228]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 80007c0:	7812      	ldrb	r2, [r2, #0]
 80007c2:	1a9b      	subs	r3, r3, r2
 80007c4:	461a      	mov	r2, r3
 80007c6:	4b38      	ldr	r3, [pc, #224]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x110>)
 80007c8:	601a      	str	r2, [r3, #0]
      /*Coppy received data in "User" buffer for evacution*/
      for (i = 0; i < num_received_chars; i++)
 80007ca:	2300      	movs	r3, #0
 80007cc:	73fb      	strb	r3, [r7, #15]
 80007ce:	e00e      	b.n	80007ee <HAL_UARTEx_RxEventCallback+0x56>
      {
        p_buffer_for_user[i] = aRXBufferUser[old_pos + i];
 80007d0:	4b34      	ldr	r3, [pc, #208]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	461a      	mov	r2, r3
 80007d6:	7bfb      	ldrb	r3, [r7, #15]
 80007d8:	441a      	add	r2, r3
 80007da:	4b34      	ldr	r3, [pc, #208]	; (80008ac <HAL_UARTEx_RxEventCallback+0x114>)
 80007dc:	6819      	ldr	r1, [r3, #0]
 80007de:	7bfb      	ldrb	r3, [r7, #15]
 80007e0:	440b      	add	r3, r1
 80007e2:	4933      	ldr	r1, [pc, #204]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x118>)
 80007e4:	5c8a      	ldrb	r2, [r1, r2]
 80007e6:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < num_received_chars; i++)
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	3301      	adds	r3, #1
 80007ec:	73fb      	strb	r3, [r7, #15]
 80007ee:	7bfa      	ldrb	r2, [r7, #15]
 80007f0:	4b2d      	ldr	r3, [pc, #180]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x110>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	429a      	cmp	r2, r3
 80007f6:	d3eb      	bcc.n	80007d0 <HAL_UARTEx_RxEventCallback+0x38>
 80007f8:	e038      	b.n	800086c <HAL_UARTEx_RxEventCallback+0xd4>
    }
    else
    {
      /*Current position is lower than previous one: end of buffer*/
      /*First coppy data from current potion till end of buffer*/
      num_received_chars = RX_BUFFER_SIZE - old_pos;
 80007fa:	4b2a      	ldr	r3, [pc, #168]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8000802:	461a      	mov	r2, r3
 8000804:	4b28      	ldr	r3, [pc, #160]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000806:	601a      	str	r2, [r3, #0]
      /*Coppy received data in "User" buffer for evacuation*/
      for (i = 0; i < num_received_chars; i++)
 8000808:	2300      	movs	r3, #0
 800080a:	73fb      	strb	r3, [r7, #15]
 800080c:	e00d      	b.n	800082a <HAL_UARTEx_RxEventCallback+0x92>
      {
        p_buffer_for_user[i] = aRXBufferUser[i + old_pos];
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	4a24      	ldr	r2, [pc, #144]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000812:	7812      	ldrb	r2, [r2, #0]
 8000814:	441a      	add	r2, r3
 8000816:	4b25      	ldr	r3, [pc, #148]	; (80008ac <HAL_UARTEx_RxEventCallback+0x114>)
 8000818:	6819      	ldr	r1, [r3, #0]
 800081a:	7bfb      	ldrb	r3, [r7, #15]
 800081c:	440b      	add	r3, r1
 800081e:	4924      	ldr	r1, [pc, #144]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x118>)
 8000820:	5c8a      	ldrb	r2, [r1, r2]
 8000822:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < num_received_chars; i++)
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	3301      	adds	r3, #1
 8000828:	73fb      	strb	r3, [r7, #15]
 800082a:	7bfa      	ldrb	r2, [r7, #15]
 800082c:	4b1e      	ldr	r3, [pc, #120]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x110>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d3ec      	bcc.n	800080e <HAL_UARTEx_RxEventCallback+0x76>
      }

      /*Check and continue with beginning of buffer*/
      if (size > 0)
 8000834:	887b      	ldrh	r3, [r7, #2]
 8000836:	2b00      	cmp	r3, #0
 8000838:	d018      	beq.n	800086c <HAL_UARTEx_RxEventCallback+0xd4>
      {
        for (i = 0; i < size; i++)
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e00a      	b.n	8000856 <HAL_UARTEx_RxEventCallback+0xbe>
        {
          p_buffer_for_user[i] = aRXBufferUser[i];
 8000840:	7bfa      	ldrb	r2, [r7, #15]
 8000842:	4b1a      	ldr	r3, [pc, #104]	; (80008ac <HAL_UARTEx_RxEventCallback+0x114>)
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	440b      	add	r3, r1
 800084a:	4919      	ldr	r1, [pc, #100]	; (80008b0 <HAL_UARTEx_RxEventCallback+0x118>)
 800084c:	5c8a      	ldrb	r2, [r1, r2]
 800084e:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < size; i++)
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	3301      	adds	r3, #1
 8000854:	73fb      	strb	r3, [r7, #15]
 8000856:	7bfb      	ldrb	r3, [r7, #15]
 8000858:	b29b      	uxth	r3, r3
 800085a:	887a      	ldrh	r2, [r7, #2]
 800085c:	429a      	cmp	r2, r3
 800085e:	d8ef      	bhi.n	8000840 <HAL_UARTEx_RxEventCallback+0xa8>
        }
        num_received_chars = num_received_chars + size;
 8000860:	887a      	ldrh	r2, [r7, #2]
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4413      	add	r3, r2
 8000868:	4a0f      	ldr	r2, [pc, #60]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x110>)
 800086a:	6013      	str	r3, [r2, #0]
      }
    }
    /*Process received data*/
    user_data_treatment(huart, p_buffer_for_user, num_received_chars);
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_UARTEx_RxEventCallback+0x114>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a0d      	ldr	r2, [pc, #52]	; (80008a8 <HAL_UARTEx_RxEventCallback+0x110>)
 8000872:	6812      	ldr	r2, [r2, #0]
 8000874:	b292      	uxth	r2, r2
 8000876:	4619      	mov	r1, r3
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f7ff ff5b 	bl	8000734 <user_data_treatment>

    /*Swap buffers for next bytes to be processed*/
    /*p_buffer_for_user <--> p_buffer_for_reception*/
    p_temp = p_buffer_for_user;
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_UARTEx_RxEventCallback+0x114>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	60bb      	str	r3, [r7, #8]
    p_buffer_for_user = p_buffer_for_reception;
 8000884:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_UARTEx_RxEventCallback+0x11c>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a08      	ldr	r2, [pc, #32]	; (80008ac <HAL_UARTEx_RxEventCallback+0x114>)
 800088a:	6013      	str	r3, [r2, #0]
    p_buffer_for_reception = p_temp;
 800088c:	4a09      	ldr	r2, [pc, #36]	; (80008b4 <HAL_UARTEx_RxEventCallback+0x11c>)
 800088e:	68bb      	ldr	r3, [r7, #8]
 8000890:	6013      	str	r3, [r2, #0]
  }

  /*Update old_pos*/
  old_pos = size;
 8000892:	887b      	ldrh	r3, [r7, #2]
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b03      	ldr	r3, [pc, #12]	; (80008a4 <HAL_UARTEx_RxEventCallback+0x10c>)
 8000898:	701a      	strb	r2, [r3, #0]
}
 800089a:	bf00      	nop
 800089c:	3710      	adds	r7, #16
 800089e:	46bd      	mov	sp, r7
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	200003e1 	.word	0x200003e1
 80008a8:	200002a8 	.word	0x200002a8
 80008ac:	200002a4 	.word	0x200002a4
 80008b0:	20000120 	.word	0x20000120
 80008b4:	200002a0 	.word	0x200002a0

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b085      	sub	sp, #20
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80008ca:	4b15      	ldr	r3, [pc, #84]	; (8000920 <HAL_MspInit+0x5c>)
 80008cc:	699b      	ldr	r3, [r3, #24]
 80008ce:	4a14      	ldr	r2, [pc, #80]	; (8000920 <HAL_MspInit+0x5c>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6193      	str	r3, [r2, #24]
 80008d6:	4b12      	ldr	r3, [pc, #72]	; (8000920 <HAL_MspInit+0x5c>)
 80008d8:	699b      	ldr	r3, [r3, #24]
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008e2:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <HAL_MspInit+0x5c>)
 80008e4:	69db      	ldr	r3, [r3, #28]
 80008e6:	4a0e      	ldr	r2, [pc, #56]	; (8000920 <HAL_MspInit+0x5c>)
 80008e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008ec:	61d3      	str	r3, [r2, #28]
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <HAL_MspInit+0x5c>)
 80008f0:	69db      	ldr	r3, [r3, #28]
 80008f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_MspInit+0x60>)
 80008fc:	685b      	ldr	r3, [r3, #4]
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000906:	60fb      	str	r3, [r7, #12]
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800090e:	60fb      	str	r3, [r7, #12]
 8000910:	4a04      	ldr	r2, [pc, #16]	; (8000924 <HAL_MspInit+0x60>)
 8000912:	68fb      	ldr	r3, [r7, #12]
 8000914:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3714      	adds	r7, #20
 800091a:	46bd      	mov	sp, r7
 800091c:	bc80      	pop	{r7}
 800091e:	4770      	bx	lr
 8000920:	40021000 	.word	0x40021000
 8000924:	40010000 	.word	0x40010000

08000928 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b088      	sub	sp, #32
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000930:	f107 0310 	add.w	r3, r7, #16
 8000934:	2200      	movs	r2, #0
 8000936:	601a      	str	r2, [r3, #0]
 8000938:	605a      	str	r2, [r3, #4]
 800093a:	609a      	str	r2, [r3, #8]
 800093c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	4a47      	ldr	r2, [pc, #284]	; (8000a60 <HAL_UART_MspInit+0x138>)
 8000944:	4293      	cmp	r3, r2
 8000946:	f040 8086 	bne.w	8000a56 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800094a:	4b46      	ldr	r3, [pc, #280]	; (8000a64 <HAL_UART_MspInit+0x13c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	4a45      	ldr	r2, [pc, #276]	; (8000a64 <HAL_UART_MspInit+0x13c>)
 8000950:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000954:	6193      	str	r3, [r2, #24]
 8000956:	4b43      	ldr	r3, [pc, #268]	; (8000a64 <HAL_UART_MspInit+0x13c>)
 8000958:	699b      	ldr	r3, [r3, #24]
 800095a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000962:	4b40      	ldr	r3, [pc, #256]	; (8000a64 <HAL_UART_MspInit+0x13c>)
 8000964:	699b      	ldr	r3, [r3, #24]
 8000966:	4a3f      	ldr	r2, [pc, #252]	; (8000a64 <HAL_UART_MspInit+0x13c>)
 8000968:	f043 0304 	orr.w	r3, r3, #4
 800096c:	6193      	str	r3, [r2, #24]
 800096e:	4b3d      	ldr	r3, [pc, #244]	; (8000a64 <HAL_UART_MspInit+0x13c>)
 8000970:	699b      	ldr	r3, [r3, #24]
 8000972:	f003 0304 	and.w	r3, r3, #4
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800097a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000980:	2302      	movs	r3, #2
 8000982:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000984:	2303      	movs	r3, #3
 8000986:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	4619      	mov	r1, r3
 800098e:	4836      	ldr	r0, [pc, #216]	; (8000a68 <HAL_UART_MspInit+0x140>)
 8000990:	f000 fe72 	bl	8001678 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000998:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800099a:	2300      	movs	r3, #0
 800099c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009a2:	f107 0310 	add.w	r3, r7, #16
 80009a6:	4619      	mov	r1, r3
 80009a8:	482f      	ldr	r0, [pc, #188]	; (8000a68 <HAL_UART_MspInit+0x140>)
 80009aa:	f000 fe65 	bl	8001678 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80009ae:	4b2f      	ldr	r3, [pc, #188]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009b0:	4a2f      	ldr	r2, [pc, #188]	; (8000a70 <HAL_UART_MspInit+0x148>)
 80009b2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80009b4:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009ba:	4b2c      	ldr	r3, [pc, #176]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009bc:	2200      	movs	r2, #0
 80009be:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80009c0:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009c2:	2280      	movs	r2, #128	; 0x80
 80009c4:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009c6:	4b29      	ldr	r3, [pc, #164]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009cc:	4b27      	ldr	r3, [pc, #156]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009d4:	2220      	movs	r2, #32
 80009d6:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80009d8:	4b24      	ldr	r3, [pc, #144]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009da:	2200      	movs	r2, #0
 80009dc:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80009de:	4823      	ldr	r0, [pc, #140]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009e0:	f000 fa54 	bl	8000e8c <HAL_DMA_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80009ea:	f7ff ff65 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a1e      	ldr	r2, [pc, #120]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009f2:	639a      	str	r2, [r3, #56]	; 0x38
 80009f4:	4a1d      	ldr	r2, [pc, #116]	; (8000a6c <HAL_UART_MspInit+0x144>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80009fa:	4b1e      	ldr	r3, [pc, #120]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 80009fc:	4a1e      	ldr	r2, [pc, #120]	; (8000a78 <HAL_UART_MspInit+0x150>)
 80009fe:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a02:	2210      	movs	r2, #16
 8000a04:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a0e:	2280      	movs	r2, #128	; 0x80
 8000a10:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a18:	4b16      	ldr	r3, [pc, #88]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000a1e:	4b15      	ldr	r3, [pc, #84]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a20:	2220      	movs	r2, #32
 8000a22:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000a24:	4b13      	ldr	r3, [pc, #76]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000a2a:	4812      	ldr	r0, [pc, #72]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a2c:	f000 fa2e 	bl	8000e8c <HAL_DMA_Init>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8000a36:	f7ff ff3f 	bl	80008b8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a0d      	ldr	r2, [pc, #52]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a3e:	635a      	str	r2, [r3, #52]	; 0x34
 8000a40:	4a0c      	ldr	r2, [pc, #48]	; (8000a74 <HAL_UART_MspInit+0x14c>)
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2101      	movs	r1, #1
 8000a4a:	2025      	movs	r0, #37	; 0x25
 8000a4c:	f000 f9e7 	bl	8000e1e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000a50:	2025      	movs	r0, #37	; 0x25
 8000a52:	f000 fa00 	bl	8000e56 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000a56:	bf00      	nop
 8000a58:	3720      	adds	r7, #32
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40013800 	.word	0x40013800
 8000a64:	40021000 	.word	0x40021000
 8000a68:	40010800 	.word	0x40010800
 8000a6c:	20000098 	.word	0x20000098
 8000a70:	40020058 	.word	0x40020058
 8000a74:	200000dc 	.word	0x200000dc
 8000a78:	40020044 	.word	0x40020044

08000a7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <NMI_Handler+0x4>

08000a82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a86:	e7fe      	b.n	8000a86 <HardFault_Handler+0x4>

08000a88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <MemManage_Handler+0x4>

08000a8e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <BusFault_Handler+0x4>

08000a94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <UsageFault_Handler+0x4>

08000a9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bc80      	pop	{r7}
 8000ab0:	4770      	bx	lr

08000ab2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr

08000abe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ac2:	f000 f8b9 	bl	8000c38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	bd80      	pop	{r7, pc}
	...

08000acc <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <DMA1_Channel4_IRQHandler+0x10>)
 8000ad2:	f000 fb45 	bl	8001160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	200000dc 	.word	0x200000dc

08000ae0 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <DMA1_Channel5_IRQHandler+0x10>)
 8000ae6:	f000 fb3b 	bl	8001160 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	20000098 	.word	0x20000098

08000af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USART1_IRQHandler+0x10>)
 8000afa:	f001 fc89 	bl	8002410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000054 	.word	0x20000054

08000b08 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b0c:	bf00      	nop
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr

08000b14 <uart_transmit_string>:
 *
 * @param *data
 * @return uart_status
 */
uart_status uart_transmit_string(uint8_t *data)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	uart_status status = UART_ERROR;
 8000b1c:	2301      	movs	r3, #1
 8000b1e:	73fb      	strb	r3, [r7, #15]
	uint16_t length = 0u;
 8000b20:	2300      	movs	r3, #0
 8000b22:	81bb      	strh	r3, [r7, #12]

	/* Check the length of string */
	while ('\0' != data[length])
 8000b24:	e002      	b.n	8000b2c <uart_transmit_string+0x18>
	{
	  length++;
 8000b26:	89bb      	ldrh	r3, [r7, #12]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	81bb      	strh	r3, [r7, #12]
	while ('\0' != data[length])
 8000b2c:	89bb      	ldrh	r3, [r7, #12]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	4413      	add	r3, r2
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d1f6      	bne.n	8000b26 <uart_transmit_string+0x12>
	}

	if (HAL_UART_Transmit(&huart1, data, length, UART_TIMEOUT) == HAL_OK)
 8000b38:	89ba      	ldrh	r2, [r7, #12]
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4806      	ldr	r0, [pc, #24]	; (8000b5c <uart_transmit_string+0x48>)
 8000b42:	f001 fb84 	bl	800224e <HAL_UART_Transmit>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d101      	bne.n	8000b50 <uart_transmit_string+0x3c>
	{
	    status = UART_OK;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000b50:	7bfb      	ldrb	r3, [r7, #15]

}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000054 	.word	0x20000054

08000b60 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b60:	480c      	ldr	r0, [pc, #48]	; (8000b94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b62:	490d      	ldr	r1, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b64:	4a0d      	ldr	r2, [pc, #52]	; (8000b9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0a      	ldr	r2, [pc, #40]	; (8000ba0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b78:	4c0a      	ldr	r4, [pc, #40]	; (8000ba4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b86:	f7ff ffbf 	bl	8000b08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f002 f961 	bl	8002e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b8e:	f7ff fc4d 	bl	800042c <main>
  bx lr
 8000b92:	4770      	bx	lr
  ldr r0, =_sdata
 8000b94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b98:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000b9c:	08002ef8 	.word	0x08002ef8
  ldr r2, =_sbss
 8000ba0:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000ba4:	20000408 	.word	0x20000408

08000ba8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ba8:	e7fe      	b.n	8000ba8 <ADC1_2_IRQHandler>
	...

08000bac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb0:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <HAL_Init+0x28>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a07      	ldr	r2, [pc, #28]	; (8000bd4 <HAL_Init+0x28>)
 8000bb6:	f043 0310 	orr.w	r3, r3, #16
 8000bba:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bbc:	2003      	movs	r0, #3
 8000bbe:	f000 f923 	bl	8000e08 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bc2:	2000      	movs	r0, #0
 8000bc4:	f000 f808 	bl	8000bd8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc8:	f7ff fe7c 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bcc:	2300      	movs	r3, #0
}
 8000bce:	4618      	mov	r0, r3
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	40022000 	.word	0x40022000

08000bd8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be0:	4b12      	ldr	r3, [pc, #72]	; (8000c2c <HAL_InitTick+0x54>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	4b12      	ldr	r3, [pc, #72]	; (8000c30 <HAL_InitTick+0x58>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	4619      	mov	r1, r3
 8000bea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f000 f93b 	bl	8000e72 <HAL_SYSTICK_Config>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c02:	2301      	movs	r3, #1
 8000c04:	e00e      	b.n	8000c24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2b0f      	cmp	r3, #15
 8000c0a:	d80a      	bhi.n	8000c22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	6879      	ldr	r1, [r7, #4]
 8000c10:	f04f 30ff 	mov.w	r0, #4294967295
 8000c14:	f000 f903 	bl	8000e1e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c18:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <HAL_InitTick+0x5c>)
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	e000      	b.n	8000c24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c22:	2301      	movs	r3, #1
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20000028 	.word	0x20000028
 8000c30:	20000030 	.word	0x20000030
 8000c34:	2000002c 	.word	0x2000002c

08000c38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c3c:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <HAL_IncTick+0x1c>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	461a      	mov	r2, r3
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <HAL_IncTick+0x20>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	4a03      	ldr	r2, [pc, #12]	; (8000c58 <HAL_IncTick+0x20>)
 8000c4a:	6013      	str	r3, [r2, #0]
}
 8000c4c:	bf00      	nop
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bc80      	pop	{r7}
 8000c52:	4770      	bx	lr
 8000c54:	20000030 	.word	0x20000030
 8000c58:	200003e4 	.word	0x200003e4

08000c5c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b02      	ldr	r3, [pc, #8]	; (8000c6c <HAL_GetTick+0x10>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bc80      	pop	{r7}
 8000c6a:	4770      	bx	lr
 8000c6c:	200003e4 	.word	0x200003e4

08000c70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b085      	sub	sp, #20
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f003 0307 	and.w	r3, r3, #7
 8000c7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c86:	68ba      	ldr	r2, [r7, #8]
 8000c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca4:	68bb      	ldr	r3, [r7, #8]
 8000ca6:	60d3      	str	r3, [r2, #12]
}
 8000ca8:	bf00      	nop
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bc80      	pop	{r7}
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cbc:	4b04      	ldr	r3, [pc, #16]	; (8000cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	0a1b      	lsrs	r3, r3, #8
 8000cc2:	f003 0307 	and.w	r3, r3, #7
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bc80      	pop	{r7}
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000ed00 	.word	0xe000ed00

08000cd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	db0b      	blt.n	8000cfe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ce6:	79fb      	ldrb	r3, [r7, #7]
 8000ce8:	f003 021f 	and.w	r2, r3, #31
 8000cec:	4906      	ldr	r1, [pc, #24]	; (8000d08 <__NVIC_EnableIRQ+0x34>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	095b      	lsrs	r3, r3, #5
 8000cf4:	2001      	movs	r0, #1
 8000cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bc80      	pop	{r7}
 8000d06:	4770      	bx	lr
 8000d08:	e000e100 	.word	0xe000e100

08000d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	4603      	mov	r3, r0
 8000d14:	6039      	str	r1, [r7, #0]
 8000d16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	db0a      	blt.n	8000d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	b2da      	uxtb	r2, r3
 8000d24:	490c      	ldr	r1, [pc, #48]	; (8000d58 <__NVIC_SetPriority+0x4c>)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	0112      	lsls	r2, r2, #4
 8000d2c:	b2d2      	uxtb	r2, r2
 8000d2e:	440b      	add	r3, r1
 8000d30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d34:	e00a      	b.n	8000d4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d36:	683b      	ldr	r3, [r7, #0]
 8000d38:	b2da      	uxtb	r2, r3
 8000d3a:	4908      	ldr	r1, [pc, #32]	; (8000d5c <__NVIC_SetPriority+0x50>)
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	f003 030f 	and.w	r3, r3, #15
 8000d42:	3b04      	subs	r3, #4
 8000d44:	0112      	lsls	r2, r2, #4
 8000d46:	b2d2      	uxtb	r2, r2
 8000d48:	440b      	add	r3, r1
 8000d4a:	761a      	strb	r2, [r3, #24]
}
 8000d4c:	bf00      	nop
 8000d4e:	370c      	adds	r7, #12
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bc80      	pop	{r7}
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	e000e100 	.word	0xe000e100
 8000d5c:	e000ed00 	.word	0xe000ed00

08000d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	60f8      	str	r0, [r7, #12]
 8000d68:	60b9      	str	r1, [r7, #8]
 8000d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	f1c3 0307 	rsb	r3, r3, #7
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	bf28      	it	cs
 8000d7e:	2304      	movcs	r3, #4
 8000d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	3304      	adds	r3, #4
 8000d86:	2b06      	cmp	r3, #6
 8000d88:	d902      	bls.n	8000d90 <NVIC_EncodePriority+0x30>
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3b03      	subs	r3, #3
 8000d8e:	e000      	b.n	8000d92 <NVIC_EncodePriority+0x32>
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d94:	f04f 32ff 	mov.w	r2, #4294967295
 8000d98:	69bb      	ldr	r3, [r7, #24]
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43da      	mvns	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	401a      	ands	r2, r3
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000da8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	fa01 f303 	lsl.w	r3, r1, r3
 8000db2:	43d9      	mvns	r1, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000db8:	4313      	orrs	r3, r2
         );
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3724      	adds	r7, #36	; 0x24
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bc80      	pop	{r7}
 8000dc2:	4770      	bx	lr

08000dc4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dd4:	d301      	bcc.n	8000dda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00f      	b.n	8000dfa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <SysTick_Config+0x40>)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	3b01      	subs	r3, #1
 8000de0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000de2:	210f      	movs	r1, #15
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f7ff ff90 	bl	8000d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dec:	4b05      	ldr	r3, [pc, #20]	; (8000e04 <SysTick_Config+0x40>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000df2:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <SysTick_Config+0x40>)
 8000df4:	2207      	movs	r2, #7
 8000df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000df8:	2300      	movs	r3, #0
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}
 8000e02:	bf00      	nop
 8000e04:	e000e010 	.word	0xe000e010

08000e08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f7ff ff2d 	bl	8000c70 <__NVIC_SetPriorityGrouping>
}
 8000e16:	bf00      	nop
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b086      	sub	sp, #24
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	60b9      	str	r1, [r7, #8]
 8000e28:	607a      	str	r2, [r7, #4]
 8000e2a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e30:	f7ff ff42 	bl	8000cb8 <__NVIC_GetPriorityGrouping>
 8000e34:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	6978      	ldr	r0, [r7, #20]
 8000e3c:	f7ff ff90 	bl	8000d60 <NVIC_EncodePriority>
 8000e40:	4602      	mov	r2, r0
 8000e42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e46:	4611      	mov	r1, r2
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f7ff ff5f 	bl	8000d0c <__NVIC_SetPriority>
}
 8000e4e:	bf00      	nop
 8000e50:	3718      	adds	r7, #24
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f7ff ff35 	bl	8000cd4 <__NVIC_EnableIRQ>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e7a:	6878      	ldr	r0, [r7, #4]
 8000e7c:	f7ff ffa2 	bl	8000dc4 <SysTick_Config>
 8000e80:	4603      	mov	r3, r0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d101      	bne.n	8000ea2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	e043      	b.n	8000f2a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	4b22      	ldr	r3, [pc, #136]	; (8000f34 <HAL_DMA_Init+0xa8>)
 8000eaa:	4413      	add	r3, r2
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <HAL_DMA_Init+0xac>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	091b      	lsrs	r3, r3, #4
 8000eb4:	009a      	lsls	r2, r3, #2
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4a1f      	ldr	r2, [pc, #124]	; (8000f3c <HAL_DMA_Init+0xb0>)
 8000ebe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2202      	movs	r2, #2
 8000ec4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ed6:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000eda:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ee4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ef0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	695b      	ldr	r3, [r3, #20]
 8000ef6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000efc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69db      	ldr	r3, [r3, #28]
 8000f02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000f04:	68fa      	ldr	r2, [r7, #12]
 8000f06:	4313      	orrs	r3, r2
 8000f08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	68fa      	ldr	r2, [r7, #12]
 8000f10:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2200      	movs	r2, #0
 8000f24:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bc80      	pop	{r7}
 8000f32:	4770      	bx	lr
 8000f34:	bffdfff8 	.word	0xbffdfff8
 8000f38:	cccccccd 	.word	0xcccccccd
 8000f3c:	40020000 	.word	0x40020000

08000f40 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b086      	sub	sp, #24
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
 8000f4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d101      	bne.n	8000f60 <HAL_DMA_Start_IT+0x20>
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	e04a      	b.n	8000ff6 <HAL_DMA_Start_IT+0xb6>
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	2201      	movs	r2, #1
 8000f64:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f6e:	2b01      	cmp	r3, #1
 8000f70:	d13a      	bne.n	8000fe8 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	2202      	movs	r2, #2
 8000f76:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	681a      	ldr	r2, [r3, #0]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f022 0201 	bic.w	r2, r2, #1
 8000f8e:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	687a      	ldr	r2, [r7, #4]
 8000f94:	68b9      	ldr	r1, [r7, #8]
 8000f96:	68f8      	ldr	r0, [r7, #12]
 8000f98:	f000 f9e8 	bl	800136c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d008      	beq.n	8000fb6 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	681a      	ldr	r2, [r3, #0]
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f042 020e 	orr.w	r2, r2, #14
 8000fb2:	601a      	str	r2, [r3, #0]
 8000fb4:	e00f      	b.n	8000fd6 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f022 0204 	bic.w	r2, r2, #4
 8000fc4:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f042 020a 	orr.w	r2, r2, #10
 8000fd4:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f042 0201 	orr.w	r2, r2, #1
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	e005      	b.n	8000ff4 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	2200      	movs	r2, #0
 8000fec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000ff0:	2302      	movs	r3, #2
 8000ff2:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}

08000ffe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001006:	2300      	movs	r3, #0
 8001008:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001010:	2b02      	cmp	r3, #2
 8001012:	d008      	beq.n	8001026 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2204      	movs	r2, #4
 8001018:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2200      	movs	r2, #0
 800101e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001022:	2301      	movs	r3, #1
 8001024:	e020      	b.n	8001068 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	681a      	ldr	r2, [r3, #0]
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f022 020e 	bic.w	r2, r2, #14
 8001034:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800104e:	2101      	movs	r1, #1
 8001050:	fa01 f202 	lsl.w	r2, r1, r2
 8001054:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2201      	movs	r2, #1
 800105a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001066:	7bfb      	ldrb	r3, [r7, #15]
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	bc80      	pop	{r7}
 8001070:	4770      	bx	lr
	...

08001074 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001086:	2b02      	cmp	r3, #2
 8001088:	d005      	beq.n	8001096 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	2204      	movs	r2, #4
 800108e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
 8001094:	e051      	b.n	800113a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f022 020e 	bic.w	r2, r2, #14
 80010a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f022 0201 	bic.w	r2, r2, #1
 80010b4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4a22      	ldr	r2, [pc, #136]	; (8001144 <HAL_DMA_Abort_IT+0xd0>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d029      	beq.n	8001114 <HAL_DMA_Abort_IT+0xa0>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a20      	ldr	r2, [pc, #128]	; (8001148 <HAL_DMA_Abort_IT+0xd4>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d022      	beq.n	8001110 <HAL_DMA_Abort_IT+0x9c>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1f      	ldr	r2, [pc, #124]	; (800114c <HAL_DMA_Abort_IT+0xd8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d01a      	beq.n	800110a <HAL_DMA_Abort_IT+0x96>
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <HAL_DMA_Abort_IT+0xdc>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d012      	beq.n	8001104 <HAL_DMA_Abort_IT+0x90>
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a1c      	ldr	r2, [pc, #112]	; (8001154 <HAL_DMA_Abort_IT+0xe0>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d00a      	beq.n	80010fe <HAL_DMA_Abort_IT+0x8a>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a1a      	ldr	r2, [pc, #104]	; (8001158 <HAL_DMA_Abort_IT+0xe4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d102      	bne.n	80010f8 <HAL_DMA_Abort_IT+0x84>
 80010f2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010f6:	e00e      	b.n	8001116 <HAL_DMA_Abort_IT+0xa2>
 80010f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80010fc:	e00b      	b.n	8001116 <HAL_DMA_Abort_IT+0xa2>
 80010fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001102:	e008      	b.n	8001116 <HAL_DMA_Abort_IT+0xa2>
 8001104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001108:	e005      	b.n	8001116 <HAL_DMA_Abort_IT+0xa2>
 800110a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800110e:	e002      	b.n	8001116 <HAL_DMA_Abort_IT+0xa2>
 8001110:	2310      	movs	r3, #16
 8001112:	e000      	b.n	8001116 <HAL_DMA_Abort_IT+0xa2>
 8001114:	2301      	movs	r3, #1
 8001116:	4a11      	ldr	r2, [pc, #68]	; (800115c <HAL_DMA_Abort_IT+0xe8>)
 8001118:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2201      	movs	r2, #1
 800111e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2200      	movs	r2, #0
 8001126:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	2b00      	cmp	r3, #0
 8001130:	d003      	beq.n	800113a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	4798      	blx	r3
    } 
  }
  return status;
 800113a:	7bfb      	ldrb	r3, [r7, #15]
}
 800113c:	4618      	mov	r0, r3
 800113e:	3710      	adds	r7, #16
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40020008 	.word	0x40020008
 8001148:	4002001c 	.word	0x4002001c
 800114c:	40020030 	.word	0x40020030
 8001150:	40020044 	.word	0x40020044
 8001154:	40020058 	.word	0x40020058
 8001158:	4002006c 	.word	0x4002006c
 800115c:	40020000 	.word	0x40020000

08001160 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117c:	2204      	movs	r2, #4
 800117e:	409a      	lsls	r2, r3
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	4013      	ands	r3, r2
 8001184:	2b00      	cmp	r3, #0
 8001186:	d04f      	beq.n	8001228 <HAL_DMA_IRQHandler+0xc8>
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	2b00      	cmp	r3, #0
 8001190:	d04a      	beq.n	8001228 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0320 	and.w	r3, r3, #32
 800119c:	2b00      	cmp	r3, #0
 800119e:	d107      	bne.n	80011b0 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	681a      	ldr	r2, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f022 0204 	bic.w	r2, r2, #4
 80011ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a66      	ldr	r2, [pc, #408]	; (8001350 <HAL_DMA_IRQHandler+0x1f0>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d029      	beq.n	800120e <HAL_DMA_IRQHandler+0xae>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a65      	ldr	r2, [pc, #404]	; (8001354 <HAL_DMA_IRQHandler+0x1f4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d022      	beq.n	800120a <HAL_DMA_IRQHandler+0xaa>
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a63      	ldr	r2, [pc, #396]	; (8001358 <HAL_DMA_IRQHandler+0x1f8>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d01a      	beq.n	8001204 <HAL_DMA_IRQHandler+0xa4>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a62      	ldr	r2, [pc, #392]	; (800135c <HAL_DMA_IRQHandler+0x1fc>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d012      	beq.n	80011fe <HAL_DMA_IRQHandler+0x9e>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a60      	ldr	r2, [pc, #384]	; (8001360 <HAL_DMA_IRQHandler+0x200>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00a      	beq.n	80011f8 <HAL_DMA_IRQHandler+0x98>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a5f      	ldr	r2, [pc, #380]	; (8001364 <HAL_DMA_IRQHandler+0x204>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d102      	bne.n	80011f2 <HAL_DMA_IRQHandler+0x92>
 80011ec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011f0:	e00e      	b.n	8001210 <HAL_DMA_IRQHandler+0xb0>
 80011f2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80011f6:	e00b      	b.n	8001210 <HAL_DMA_IRQHandler+0xb0>
 80011f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80011fc:	e008      	b.n	8001210 <HAL_DMA_IRQHandler+0xb0>
 80011fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001202:	e005      	b.n	8001210 <HAL_DMA_IRQHandler+0xb0>
 8001204:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001208:	e002      	b.n	8001210 <HAL_DMA_IRQHandler+0xb0>
 800120a:	2340      	movs	r3, #64	; 0x40
 800120c:	e000      	b.n	8001210 <HAL_DMA_IRQHandler+0xb0>
 800120e:	2304      	movs	r3, #4
 8001210:	4a55      	ldr	r2, [pc, #340]	; (8001368 <HAL_DMA_IRQHandler+0x208>)
 8001212:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001218:	2b00      	cmp	r3, #0
 800121a:	f000 8094 	beq.w	8001346 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001226:	e08e      	b.n	8001346 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	2202      	movs	r2, #2
 800122e:	409a      	lsls	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d056      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x186>
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f003 0302 	and.w	r3, r3, #2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d051      	beq.n	80012e6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f003 0320 	and.w	r3, r3, #32
 800124c:	2b00      	cmp	r3, #0
 800124e:	d10b      	bne.n	8001268 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	681a      	ldr	r2, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f022 020a 	bic.w	r2, r2, #10
 800125e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	2201      	movs	r2, #1
 8001264:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a38      	ldr	r2, [pc, #224]	; (8001350 <HAL_DMA_IRQHandler+0x1f0>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d029      	beq.n	80012c6 <HAL_DMA_IRQHandler+0x166>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a37      	ldr	r2, [pc, #220]	; (8001354 <HAL_DMA_IRQHandler+0x1f4>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d022      	beq.n	80012c2 <HAL_DMA_IRQHandler+0x162>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a35      	ldr	r2, [pc, #212]	; (8001358 <HAL_DMA_IRQHandler+0x1f8>)
 8001282:	4293      	cmp	r3, r2
 8001284:	d01a      	beq.n	80012bc <HAL_DMA_IRQHandler+0x15c>
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a34      	ldr	r2, [pc, #208]	; (800135c <HAL_DMA_IRQHandler+0x1fc>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d012      	beq.n	80012b6 <HAL_DMA_IRQHandler+0x156>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a32      	ldr	r2, [pc, #200]	; (8001360 <HAL_DMA_IRQHandler+0x200>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d00a      	beq.n	80012b0 <HAL_DMA_IRQHandler+0x150>
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	4a31      	ldr	r2, [pc, #196]	; (8001364 <HAL_DMA_IRQHandler+0x204>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d102      	bne.n	80012aa <HAL_DMA_IRQHandler+0x14a>
 80012a4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80012a8:	e00e      	b.n	80012c8 <HAL_DMA_IRQHandler+0x168>
 80012aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80012ae:	e00b      	b.n	80012c8 <HAL_DMA_IRQHandler+0x168>
 80012b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80012b4:	e008      	b.n	80012c8 <HAL_DMA_IRQHandler+0x168>
 80012b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ba:	e005      	b.n	80012c8 <HAL_DMA_IRQHandler+0x168>
 80012bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012c0:	e002      	b.n	80012c8 <HAL_DMA_IRQHandler+0x168>
 80012c2:	2320      	movs	r3, #32
 80012c4:	e000      	b.n	80012c8 <HAL_DMA_IRQHandler+0x168>
 80012c6:	2302      	movs	r3, #2
 80012c8:	4a27      	ldr	r2, [pc, #156]	; (8001368 <HAL_DMA_IRQHandler+0x208>)
 80012ca:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2200      	movs	r2, #0
 80012d0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d034      	beq.n	8001346 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80012e4:	e02f      	b.n	8001346 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	2208      	movs	r2, #8
 80012ec:	409a      	lsls	r2, r3
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	4013      	ands	r3, r2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d028      	beq.n	8001348 <HAL_DMA_IRQHandler+0x1e8>
 80012f6:	68bb      	ldr	r3, [r7, #8]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d023      	beq.n	8001348 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f022 020e 	bic.w	r2, r2, #14
 800130e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001318:	2101      	movs	r1, #1
 800131a:	fa01 f202 	lsl.w	r2, r1, r2
 800131e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2201      	movs	r2, #1
 8001324:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2201      	movs	r2, #1
 800132a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	2b00      	cmp	r3, #0
 800133c:	d004      	beq.n	8001348 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	4798      	blx	r3
    }
  }
  return;
 8001346:	bf00      	nop
 8001348:	bf00      	nop
}
 800134a:	3710      	adds	r7, #16
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	40020008 	.word	0x40020008
 8001354:	4002001c 	.word	0x4002001c
 8001358:	40020030 	.word	0x40020030
 800135c:	40020044 	.word	0x40020044
 8001360:	40020058 	.word	0x40020058
 8001364:	4002006c 	.word	0x4002006c
 8001368:	40020000 	.word	0x40020000

0800136c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	60f8      	str	r0, [r7, #12]
 8001374:	60b9      	str	r1, [r7, #8]
 8001376:	607a      	str	r2, [r7, #4]
 8001378:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001382:	2101      	movs	r1, #1
 8001384:	fa01 f202 	lsl.w	r2, r1, r2
 8001388:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	2b10      	cmp	r3, #16
 8001398:	d108      	bne.n	80013ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	687a      	ldr	r2, [r7, #4]
 80013a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	68ba      	ldr	r2, [r7, #8]
 80013a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80013aa:	e007      	b.n	80013bc <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	687a      	ldr	r2, [r7, #4]
 80013ba:	60da      	str	r2, [r3, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bc80      	pop	{r7}
 80013c4:	4770      	bx	lr
	...

080013c8 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80013c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013ca:	b087      	sub	sp, #28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	60f8      	str	r0, [r7, #12]
 80013d0:	60b9      	str	r1, [r7, #8]
 80013d2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 80013da:	2300      	movs	r3, #0
 80013dc:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80013e2:	4b2f      	ldr	r3, [pc, #188]	; (80014a0 <HAL_FLASH_Program+0xd8>)
 80013e4:	7e1b      	ldrb	r3, [r3, #24]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d101      	bne.n	80013ee <HAL_FLASH_Program+0x26>
 80013ea:	2302      	movs	r3, #2
 80013ec:	e054      	b.n	8001498 <HAL_FLASH_Program+0xd0>
 80013ee:	4b2c      	ldr	r3, [pc, #176]	; (80014a0 <HAL_FLASH_Program+0xd8>)
 80013f0:	2201      	movs	r2, #1
 80013f2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80013f4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80013f8:	f000 f8a8 	bl	800154c <FLASH_WaitForLastOperation>
 80013fc:	4603      	mov	r3, r0
 80013fe:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8001400:	7dfb      	ldrb	r3, [r7, #23]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d144      	bne.n	8001490 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b01      	cmp	r3, #1
 800140a:	d102      	bne.n	8001412 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 800140c:	2301      	movs	r3, #1
 800140e:	757b      	strb	r3, [r7, #21]
 8001410:	e007      	b.n	8001422 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b02      	cmp	r3, #2
 8001416:	d102      	bne.n	800141e <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8001418:	2302      	movs	r3, #2
 800141a:	757b      	strb	r3, [r7, #21]
 800141c:	e001      	b.n	8001422 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800141e:	2304      	movs	r3, #4
 8001420:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8001422:	2300      	movs	r3, #0
 8001424:	75bb      	strb	r3, [r7, #22]
 8001426:	e02d      	b.n	8001484 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8001428:	7dbb      	ldrb	r3, [r7, #22]
 800142a:	005a      	lsls	r2, r3, #1
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	eb02 0c03 	add.w	ip, r2, r3
 8001432:	7dbb      	ldrb	r3, [r7, #22]
 8001434:	0119      	lsls	r1, r3, #4
 8001436:	e9d7 2300 	ldrd	r2, r3, [r7]
 800143a:	f1c1 0620 	rsb	r6, r1, #32
 800143e:	f1a1 0020 	sub.w	r0, r1, #32
 8001442:	fa22 f401 	lsr.w	r4, r2, r1
 8001446:	fa03 f606 	lsl.w	r6, r3, r6
 800144a:	4334      	orrs	r4, r6
 800144c:	fa23 f000 	lsr.w	r0, r3, r0
 8001450:	4304      	orrs	r4, r0
 8001452:	fa23 f501 	lsr.w	r5, r3, r1
 8001456:	b2a3      	uxth	r3, r4
 8001458:	4619      	mov	r1, r3
 800145a:	4660      	mov	r0, ip
 800145c:	f000 f85a 	bl	8001514 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001460:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001464:	f000 f872 	bl	800154c <FLASH_WaitForLastOperation>
 8001468:	4603      	mov	r3, r0
 800146a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800146c:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <HAL_FLASH_Program+0xdc>)
 800146e:	691b      	ldr	r3, [r3, #16]
 8001470:	4a0c      	ldr	r2, [pc, #48]	; (80014a4 <HAL_FLASH_Program+0xdc>)
 8001472:	f023 0301 	bic.w	r3, r3, #1
 8001476:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8001478:	7dfb      	ldrb	r3, [r7, #23]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d107      	bne.n	800148e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 800147e:	7dbb      	ldrb	r3, [r7, #22]
 8001480:	3301      	adds	r3, #1
 8001482:	75bb      	strb	r3, [r7, #22]
 8001484:	7dba      	ldrb	r2, [r7, #22]
 8001486:	7d7b      	ldrb	r3, [r7, #21]
 8001488:	429a      	cmp	r2, r3
 800148a:	d3cd      	bcc.n	8001428 <HAL_FLASH_Program+0x60>
 800148c:	e000      	b.n	8001490 <HAL_FLASH_Program+0xc8>
      {
        break;
 800148e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001490:	4b03      	ldr	r3, [pc, #12]	; (80014a0 <HAL_FLASH_Program+0xd8>)
 8001492:	2200      	movs	r2, #0
 8001494:	761a      	strb	r2, [r3, #24]

  return status;
 8001496:	7dfb      	ldrb	r3, [r7, #23]
}
 8001498:	4618      	mov	r0, r3
 800149a:	371c      	adds	r7, #28
 800149c:	46bd      	mov	sp, r7
 800149e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a0:	200003e8 	.word	0x200003e8
 80014a4:	40022000 	.word	0x40022000

080014a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80014ae:	2300      	movs	r3, #0
 80014b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_FLASH_Unlock+0x40>)
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00d      	beq.n	80014da <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80014be:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <HAL_FLASH_Unlock+0x40>)
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_FLASH_Unlock+0x44>)
 80014c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <HAL_FLASH_Unlock+0x40>)
 80014c6:	4a0a      	ldr	r2, [pc, #40]	; (80014f0 <HAL_FLASH_Unlock+0x48>)
 80014c8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80014ca:	4b07      	ldr	r3, [pc, #28]	; (80014e8 <HAL_FLASH_Unlock+0x40>)
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 80014da:	79fb      	ldrb	r3, [r7, #7]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	370c      	adds	r7, #12
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bc80      	pop	{r7}
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40022000 	.word	0x40022000
 80014ec:	45670123 	.word	0x45670123
 80014f0:	cdef89ab 	.word	0xcdef89ab

080014f4 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80014f8:	4b05      	ldr	r3, [pc, #20]	; (8001510 <HAL_FLASH_Lock+0x1c>)
 80014fa:	691b      	ldr	r3, [r3, #16]
 80014fc:	4a04      	ldr	r2, [pc, #16]	; (8001510 <HAL_FLASH_Lock+0x1c>)
 80014fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001502:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  /* Set the LOCK Bit to lock the FLASH BANK2 Registers access */
  SET_BIT(FLASH->CR2, FLASH_CR2_LOCK);

#endif /* FLASH_BANK2_END */
  return HAL_OK;  
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	bc80      	pop	{r7}
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40022000 	.word	0x40022000

08001514 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
 800151c:	460b      	mov	r3, r1
 800151e:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <FLASH_Program_HalfWord+0x30>)
 8001522:	2200      	movs	r2, #0
 8001524:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <FLASH_Program_HalfWord+0x34>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	4a07      	ldr	r2, [pc, #28]	; (8001548 <FLASH_Program_HalfWord+0x34>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	887a      	ldrh	r2, [r7, #2]
 8001536:	801a      	strh	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	bc80      	pop	{r7}
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	200003e8 	.word	0x200003e8
 8001548:	40022000 	.word	0x40022000

0800154c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8001554:	f7ff fb82 	bl	8000c5c <HAL_GetTick>
 8001558:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800155a:	e010      	b.n	800157e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001562:	d00c      	beq.n	800157e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d007      	beq.n	800157a <FLASH_WaitForLastOperation+0x2e>
 800156a:	f7ff fb77 	bl	8000c5c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	687a      	ldr	r2, [r7, #4]
 8001576:	429a      	cmp	r2, r3
 8001578:	d201      	bcs.n	800157e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e025      	b.n	80015ca <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800157e:	4b15      	ldr	r3, [pc, #84]	; (80015d4 <FLASH_WaitForLastOperation+0x88>)
 8001580:	68db      	ldr	r3, [r3, #12]
 8001582:	f003 0301 	and.w	r3, r3, #1
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1e8      	bne.n	800155c <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800158a:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <FLASH_WaitForLastOperation+0x88>)
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	2b00      	cmp	r3, #0
 8001594:	d002      	beq.n	800159c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <FLASH_WaitForLastOperation+0x88>)
 8001598:	2220      	movs	r2, #32
 800159a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 800159c:	4b0d      	ldr	r3, [pc, #52]	; (80015d4 <FLASH_WaitForLastOperation+0x88>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0310 	and.w	r3, r3, #16
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d10b      	bne.n	80015c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80015a8:	4b0a      	ldr	r3, [pc, #40]	; (80015d4 <FLASH_WaitForLastOperation+0x88>)
 80015aa:	69db      	ldr	r3, [r3, #28]
 80015ac:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d105      	bne.n	80015c0 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80015b4:	4b07      	ldr	r3, [pc, #28]	; (80015d4 <FLASH_WaitForLastOperation+0x88>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d003      	beq.n	80015c8 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80015c0:	f000 f80a 	bl	80015d8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e000      	b.n	80015ca <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 80015c8:	2300      	movs	r3, #0
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	40022000 	.word	0x40022000

080015d8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80015e2:	4b23      	ldr	r3, [pc, #140]	; (8001670 <FLASH_SetErrorCode+0x98>)
 80015e4:	68db      	ldr	r3, [r3, #12]
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d009      	beq.n	8001602 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80015ee:	4b21      	ldr	r3, [pc, #132]	; (8001674 <FLASH_SetErrorCode+0x9c>)
 80015f0:	69db      	ldr	r3, [r3, #28]
 80015f2:	f043 0302 	orr.w	r3, r3, #2
 80015f6:	4a1f      	ldr	r2, [pc, #124]	; (8001674 <FLASH_SetErrorCode+0x9c>)
 80015f8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	f043 0310 	orr.w	r3, r3, #16
 8001600:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <FLASH_SetErrorCode+0x98>)
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d009      	beq.n	8001622 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 800160e:	4b19      	ldr	r3, [pc, #100]	; (8001674 <FLASH_SetErrorCode+0x9c>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	4a17      	ldr	r2, [pc, #92]	; (8001674 <FLASH_SetErrorCode+0x9c>)
 8001618:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f043 0304 	orr.w	r3, r3, #4
 8001620:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001622:	4b13      	ldr	r3, [pc, #76]	; (8001670 <FLASH_SetErrorCode+0x98>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00b      	beq.n	8001646 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800162e:	4b11      	ldr	r3, [pc, #68]	; (8001674 <FLASH_SetErrorCode+0x9c>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	4a0f      	ldr	r2, [pc, #60]	; (8001674 <FLASH_SetErrorCode+0x9c>)
 8001638:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 800163a:	4b0d      	ldr	r3, [pc, #52]	; (8001670 <FLASH_SetErrorCode+0x98>)
 800163c:	69db      	ldr	r3, [r3, #28]
 800163e:	4a0c      	ldr	r2, [pc, #48]	; (8001670 <FLASH_SetErrorCode+0x98>)
 8001640:	f023 0301 	bic.w	r3, r3, #1
 8001644:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f240 1201 	movw	r2, #257	; 0x101
 800164c:	4293      	cmp	r3, r2
 800164e:	d106      	bne.n	800165e <FLASH_SetErrorCode+0x86>
 8001650:	4b07      	ldr	r3, [pc, #28]	; (8001670 <FLASH_SetErrorCode+0x98>)
 8001652:	69db      	ldr	r3, [r3, #28]
 8001654:	4a06      	ldr	r2, [pc, #24]	; (8001670 <FLASH_SetErrorCode+0x98>)
 8001656:	f023 0301 	bic.w	r3, r3, #1
 800165a:	61d3      	str	r3, [r2, #28]
}  
 800165c:	e002      	b.n	8001664 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 800165e:	4a04      	ldr	r2, [pc, #16]	; (8001670 <FLASH_SetErrorCode+0x98>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	60d3      	str	r3, [r2, #12]
}  
 8001664:	bf00      	nop
 8001666:	370c      	adds	r7, #12
 8001668:	46bd      	mov	sp, r7
 800166a:	bc80      	pop	{r7}
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	40022000 	.word	0x40022000
 8001674:	200003e8 	.word	0x200003e8

08001678 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001678:	b480      	push	{r7}
 800167a:	b08b      	sub	sp, #44	; 0x2c
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
 8001680:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001682:	2300      	movs	r3, #0
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800168a:	e169      	b.n	8001960 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800168c:	2201      	movs	r2, #1
 800168e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	4013      	ands	r3, r2
 800169e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	f040 8158 	bne.w	800195a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	4a9a      	ldr	r2, [pc, #616]	; (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d05e      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016b4:	4a98      	ldr	r2, [pc, #608]	; (8001918 <HAL_GPIO_Init+0x2a0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d875      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ba:	4a98      	ldr	r2, [pc, #608]	; (800191c <HAL_GPIO_Init+0x2a4>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d058      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016c0:	4a96      	ldr	r2, [pc, #600]	; (800191c <HAL_GPIO_Init+0x2a4>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d86f      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016c6:	4a96      	ldr	r2, [pc, #600]	; (8001920 <HAL_GPIO_Init+0x2a8>)
 80016c8:	4293      	cmp	r3, r2
 80016ca:	d052      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016cc:	4a94      	ldr	r2, [pc, #592]	; (8001920 <HAL_GPIO_Init+0x2a8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d869      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016d2:	4a94      	ldr	r2, [pc, #592]	; (8001924 <HAL_GPIO_Init+0x2ac>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d04c      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016d8:	4a92      	ldr	r2, [pc, #584]	; (8001924 <HAL_GPIO_Init+0x2ac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d863      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016de:	4a92      	ldr	r2, [pc, #584]	; (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d046      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
 80016e4:	4a90      	ldr	r2, [pc, #576]	; (8001928 <HAL_GPIO_Init+0x2b0>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d85d      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016ea:	2b12      	cmp	r3, #18
 80016ec:	d82a      	bhi.n	8001744 <HAL_GPIO_Init+0xcc>
 80016ee:	2b12      	cmp	r3, #18
 80016f0:	d859      	bhi.n	80017a6 <HAL_GPIO_Init+0x12e>
 80016f2:	a201      	add	r2, pc, #4	; (adr r2, 80016f8 <HAL_GPIO_Init+0x80>)
 80016f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016f8:	08001773 	.word	0x08001773
 80016fc:	0800174d 	.word	0x0800174d
 8001700:	0800175f 	.word	0x0800175f
 8001704:	080017a1 	.word	0x080017a1
 8001708:	080017a7 	.word	0x080017a7
 800170c:	080017a7 	.word	0x080017a7
 8001710:	080017a7 	.word	0x080017a7
 8001714:	080017a7 	.word	0x080017a7
 8001718:	080017a7 	.word	0x080017a7
 800171c:	080017a7 	.word	0x080017a7
 8001720:	080017a7 	.word	0x080017a7
 8001724:	080017a7 	.word	0x080017a7
 8001728:	080017a7 	.word	0x080017a7
 800172c:	080017a7 	.word	0x080017a7
 8001730:	080017a7 	.word	0x080017a7
 8001734:	080017a7 	.word	0x080017a7
 8001738:	080017a7 	.word	0x080017a7
 800173c:	08001755 	.word	0x08001755
 8001740:	08001769 	.word	0x08001769
 8001744:	4a79      	ldr	r2, [pc, #484]	; (800192c <HAL_GPIO_Init+0x2b4>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d013      	beq.n	8001772 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800174a:	e02c      	b.n	80017a6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	623b      	str	r3, [r7, #32]
          break;
 8001752:	e029      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	3304      	adds	r3, #4
 800175a:	623b      	str	r3, [r7, #32]
          break;
 800175c:	e024      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	3308      	adds	r3, #8
 8001764:	623b      	str	r3, [r7, #32]
          break;
 8001766:	e01f      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	68db      	ldr	r3, [r3, #12]
 800176c:	330c      	adds	r3, #12
 800176e:	623b      	str	r3, [r7, #32]
          break;
 8001770:	e01a      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800177a:	2304      	movs	r3, #4
 800177c:	623b      	str	r3, [r7, #32]
          break;
 800177e:	e013      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d105      	bne.n	8001794 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001788:	2308      	movs	r3, #8
 800178a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	69fa      	ldr	r2, [r7, #28]
 8001790:	611a      	str	r2, [r3, #16]
          break;
 8001792:	e009      	b.n	80017a8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001794:	2308      	movs	r3, #8
 8001796:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	69fa      	ldr	r2, [r7, #28]
 800179c:	615a      	str	r2, [r3, #20]
          break;
 800179e:	e003      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80017a0:	2300      	movs	r3, #0
 80017a2:	623b      	str	r3, [r7, #32]
          break;
 80017a4:	e000      	b.n	80017a8 <HAL_GPIO_Init+0x130>
          break;
 80017a6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2bff      	cmp	r3, #255	; 0xff
 80017ac:	d801      	bhi.n	80017b2 <HAL_GPIO_Init+0x13a>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	e001      	b.n	80017b6 <HAL_GPIO_Init+0x13e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3304      	adds	r3, #4
 80017b6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	2bff      	cmp	r3, #255	; 0xff
 80017bc:	d802      	bhi.n	80017c4 <HAL_GPIO_Init+0x14c>
 80017be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	e002      	b.n	80017ca <HAL_GPIO_Init+0x152>
 80017c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c6:	3b08      	subs	r3, #8
 80017c8:	009b      	lsls	r3, r3, #2
 80017ca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	210f      	movs	r1, #15
 80017d2:	693b      	ldr	r3, [r7, #16]
 80017d4:	fa01 f303 	lsl.w	r3, r1, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	401a      	ands	r2, r3
 80017dc:	6a39      	ldr	r1, [r7, #32]
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	fa01 f303 	lsl.w	r3, r1, r3
 80017e4:	431a      	orrs	r2, r3
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 80b1 	beq.w	800195a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80017f8:	4b4d      	ldr	r3, [pc, #308]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a4c      	ldr	r2, [pc, #304]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 80017fe:	f043 0301 	orr.w	r3, r3, #1
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b4a      	ldr	r3, [pc, #296]	; (8001930 <HAL_GPIO_Init+0x2b8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0301 	and.w	r3, r3, #1
 800180c:	60bb      	str	r3, [r7, #8]
 800180e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001810:	4a48      	ldr	r2, [pc, #288]	; (8001934 <HAL_GPIO_Init+0x2bc>)
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	3302      	adds	r3, #2
 8001818:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800181c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800181e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001820:	f003 0303 	and.w	r3, r3, #3
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	220f      	movs	r2, #15
 8001828:	fa02 f303 	lsl.w	r3, r2, r3
 800182c:	43db      	mvns	r3, r3
 800182e:	68fa      	ldr	r2, [r7, #12]
 8001830:	4013      	ands	r3, r2
 8001832:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	4a40      	ldr	r2, [pc, #256]	; (8001938 <HAL_GPIO_Init+0x2c0>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_GPIO_Init+0x1ec>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	4a3f      	ldr	r2, [pc, #252]	; (800193c <HAL_GPIO_Init+0x2c4>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d00d      	beq.n	8001860 <HAL_GPIO_Init+0x1e8>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	4a3e      	ldr	r2, [pc, #248]	; (8001940 <HAL_GPIO_Init+0x2c8>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d007      	beq.n	800185c <HAL_GPIO_Init+0x1e4>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	4a3d      	ldr	r2, [pc, #244]	; (8001944 <HAL_GPIO_Init+0x2cc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d101      	bne.n	8001858 <HAL_GPIO_Init+0x1e0>
 8001854:	2303      	movs	r3, #3
 8001856:	e006      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001858:	2304      	movs	r3, #4
 800185a:	e004      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 800185c:	2302      	movs	r3, #2
 800185e:	e002      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001860:	2301      	movs	r3, #1
 8001862:	e000      	b.n	8001866 <HAL_GPIO_Init+0x1ee>
 8001864:	2300      	movs	r3, #0
 8001866:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001868:	f002 0203 	and.w	r2, r2, #3
 800186c:	0092      	lsls	r2, r2, #2
 800186e:	4093      	lsls	r3, r2
 8001870:	68fa      	ldr	r2, [r7, #12]
 8001872:	4313      	orrs	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001876:	492f      	ldr	r1, [pc, #188]	; (8001934 <HAL_GPIO_Init+0x2bc>)
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	089b      	lsrs	r3, r3, #2
 800187c:	3302      	adds	r3, #2
 800187e:	68fa      	ldr	r2, [r7, #12]
 8001880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d006      	beq.n	800189e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001890:	4b2d      	ldr	r3, [pc, #180]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	492c      	ldr	r1, [pc, #176]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	4313      	orrs	r3, r2
 800189a:	600b      	str	r3, [r1, #0]
 800189c:	e006      	b.n	80018ac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800189e:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a0:	681a      	ldr	r2, [r3, #0]
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	43db      	mvns	r3, r3
 80018a6:	4928      	ldr	r1, [pc, #160]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d006      	beq.n	80018c6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80018b8:	4b23      	ldr	r3, [pc, #140]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4922      	ldr	r1, [pc, #136]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018be:	69bb      	ldr	r3, [r7, #24]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	604b      	str	r3, [r1, #4]
 80018c4:	e006      	b.n	80018d4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80018c6:	4b20      	ldr	r3, [pc, #128]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018c8:	685a      	ldr	r2, [r3, #4]
 80018ca:	69bb      	ldr	r3, [r7, #24]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	491e      	ldr	r1, [pc, #120]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018d0:	4013      	ands	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d006      	beq.n	80018ee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80018e0:	4b19      	ldr	r3, [pc, #100]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e2:	689a      	ldr	r2, [r3, #8]
 80018e4:	4918      	ldr	r1, [pc, #96]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018e6:	69bb      	ldr	r3, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	608b      	str	r3, [r1, #8]
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80018ee:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	43db      	mvns	r3, r3
 80018f6:	4914      	ldr	r1, [pc, #80]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001904:	2b00      	cmp	r3, #0
 8001906:	d021      	beq.n	800194c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001908:	4b0f      	ldr	r3, [pc, #60]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 800190a:	68da      	ldr	r2, [r3, #12]
 800190c:	490e      	ldr	r1, [pc, #56]	; (8001948 <HAL_GPIO_Init+0x2d0>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	60cb      	str	r3, [r1, #12]
 8001914:	e021      	b.n	800195a <HAL_GPIO_Init+0x2e2>
 8001916:	bf00      	nop
 8001918:	10320000 	.word	0x10320000
 800191c:	10310000 	.word	0x10310000
 8001920:	10220000 	.word	0x10220000
 8001924:	10210000 	.word	0x10210000
 8001928:	10120000 	.word	0x10120000
 800192c:	10110000 	.word	0x10110000
 8001930:	40021000 	.word	0x40021000
 8001934:	40010000 	.word	0x40010000
 8001938:	40010800 	.word	0x40010800
 800193c:	40010c00 	.word	0x40010c00
 8001940:	40011000 	.word	0x40011000
 8001944:	40011400 	.word	0x40011400
 8001948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_GPIO_Init+0x304>)
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	69bb      	ldr	r3, [r7, #24]
 8001952:	43db      	mvns	r3, r3
 8001954:	4909      	ldr	r1, [pc, #36]	; (800197c <HAL_GPIO_Init+0x304>)
 8001956:	4013      	ands	r3, r2
 8001958:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800195a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195c:	3301      	adds	r3, #1
 800195e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001966:	fa22 f303 	lsr.w	r3, r2, r3
 800196a:	2b00      	cmp	r3, #0
 800196c:	f47f ae8e 	bne.w	800168c <HAL_GPIO_Init+0x14>
  }
}
 8001970:	bf00      	nop
 8001972:	bf00      	nop
 8001974:	372c      	adds	r7, #44	; 0x2c
 8001976:	46bd      	mov	sp, r7
 8001978:	bc80      	pop	{r7}
 800197a:	4770      	bx	lr
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b086      	sub	sp, #24
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d101      	bne.n	8001992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e272      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	f000 8087 	beq.w	8001aae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80019a0:	4b92      	ldr	r3, [pc, #584]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	f003 030c 	and.w	r3, r3, #12
 80019a8:	2b04      	cmp	r3, #4
 80019aa:	d00c      	beq.n	80019c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019ac:	4b8f      	ldr	r3, [pc, #572]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f003 030c 	and.w	r3, r3, #12
 80019b4:	2b08      	cmp	r3, #8
 80019b6:	d112      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
 80019b8:	4b8c      	ldr	r3, [pc, #560]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019c4:	d10b      	bne.n	80019de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c6:	4b89      	ldr	r3, [pc, #548]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d06c      	beq.n	8001aac <HAL_RCC_OscConfig+0x12c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d168      	bne.n	8001aac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	e24c      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019e6:	d106      	bne.n	80019f6 <HAL_RCC_OscConfig+0x76>
 80019e8:	4b80      	ldr	r3, [pc, #512]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a7f      	ldr	r2, [pc, #508]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 80019ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019f2:	6013      	str	r3, [r2, #0]
 80019f4:	e02e      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d10c      	bne.n	8001a18 <HAL_RCC_OscConfig+0x98>
 80019fe:	4b7b      	ldr	r3, [pc, #492]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a7a      	ldr	r2, [pc, #488]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a08:	6013      	str	r3, [r2, #0]
 8001a0a:	4b78      	ldr	r3, [pc, #480]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	e01d      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a20:	d10c      	bne.n	8001a3c <HAL_RCC_OscConfig+0xbc>
 8001a22:	4b72      	ldr	r3, [pc, #456]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a71      	ldr	r2, [pc, #452]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	4b6f      	ldr	r3, [pc, #444]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4a6e      	ldr	r2, [pc, #440]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a38:	6013      	str	r3, [r2, #0]
 8001a3a:	e00b      	b.n	8001a54 <HAL_RCC_OscConfig+0xd4>
 8001a3c:	4b6b      	ldr	r3, [pc, #428]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a6a      	ldr	r2, [pc, #424]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a46:	6013      	str	r3, [r2, #0]
 8001a48:	4b68      	ldr	r3, [pc, #416]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a67      	ldr	r2, [pc, #412]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a52:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d013      	beq.n	8001a84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a5c:	f7ff f8fe 	bl	8000c5c <HAL_GetTick>
 8001a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a62:	e008      	b.n	8001a76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a64:	f7ff f8fa 	bl	8000c5c <HAL_GetTick>
 8001a68:	4602      	mov	r2, r0
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	1ad3      	subs	r3, r2, r3
 8001a6e:	2b64      	cmp	r3, #100	; 0x64
 8001a70:	d901      	bls.n	8001a76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e200      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a76:	4b5d      	ldr	r3, [pc, #372]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d0f0      	beq.n	8001a64 <HAL_RCC_OscConfig+0xe4>
 8001a82:	e014      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a84:	f7ff f8ea 	bl	8000c5c <HAL_GetTick>
 8001a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a8a:	e008      	b.n	8001a9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a8c:	f7ff f8e6 	bl	8000c5c <HAL_GetTick>
 8001a90:	4602      	mov	r2, r0
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	2b64      	cmp	r3, #100	; 0x64
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e1ec      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a9e:	4b53      	ldr	r3, [pc, #332]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d1f0      	bne.n	8001a8c <HAL_RCC_OscConfig+0x10c>
 8001aaa:	e000      	b.n	8001aae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d063      	beq.n	8001b82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b4c      	ldr	r3, [pc, #304]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	f003 030c 	and.w	r3, r3, #12
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d00b      	beq.n	8001ade <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ac6:	4b49      	ldr	r3, [pc, #292]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f003 030c 	and.w	r3, r3, #12
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d11c      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
 8001ad2:	4b46      	ldr	r3, [pc, #280]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d116      	bne.n	8001b0c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ade:	4b43      	ldr	r3, [pc, #268]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	691b      	ldr	r3, [r3, #16]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d001      	beq.n	8001af6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e1c0      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af6:	4b3d      	ldr	r3, [pc, #244]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	4939      	ldr	r1, [pc, #228]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b0a:	e03a      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	691b      	ldr	r3, [r3, #16]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d020      	beq.n	8001b56 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b14:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff f89f 	bl	8000c5c <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b22:	f7ff f89b 	bl	8000c5c <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e1a1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b34:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 0302 	and.w	r3, r3, #2
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b40:	4b2a      	ldr	r3, [pc, #168]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	695b      	ldr	r3, [r3, #20]
 8001b4c:	00db      	lsls	r3, r3, #3
 8001b4e:	4927      	ldr	r1, [pc, #156]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b50:	4313      	orrs	r3, r2
 8001b52:	600b      	str	r3, [r1, #0]
 8001b54:	e015      	b.n	8001b82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b56:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <HAL_RCC_OscConfig+0x270>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff f87e 	bl	8000c5c <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b64:	f7ff f87a 	bl	8000c5c <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e180      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f003 0308 	and.w	r3, r3, #8
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d03a      	beq.n	8001c04 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d019      	beq.n	8001bca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b96:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001b98:	2201      	movs	r2, #1
 8001b9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b9c:	f7ff f85e 	bl	8000c5c <HAL_GetTick>
 8001ba0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ba2:	e008      	b.n	8001bb6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ba4:	f7ff f85a 	bl	8000c5c <HAL_GetTick>
 8001ba8:	4602      	mov	r2, r0
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e160      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bb6:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d0f0      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bc2:	2001      	movs	r0, #1
 8001bc4:	f000 fad8 	bl	8002178 <RCC_Delay>
 8001bc8:	e01c      	b.n	8001c04 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bca:	4b0a      	ldr	r3, [pc, #40]	; (8001bf4 <HAL_RCC_OscConfig+0x274>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bd0:	f7ff f844 	bl	8000c5c <HAL_GetTick>
 8001bd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bd6:	e00f      	b.n	8001bf8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd8:	f7ff f840 	bl	8000c5c <HAL_GetTick>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d908      	bls.n	8001bf8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e146      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001bea:	bf00      	nop
 8001bec:	40021000 	.word	0x40021000
 8001bf0:	42420000 	.word	0x42420000
 8001bf4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf8:	4b92      	ldr	r3, [pc, #584]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d1e9      	bne.n	8001bd8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f003 0304 	and.w	r3, r3, #4
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	f000 80a6 	beq.w	8001d5e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c12:	2300      	movs	r3, #0
 8001c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c16:	4b8b      	ldr	r3, [pc, #556]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c18:	69db      	ldr	r3, [r3, #28]
 8001c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d10d      	bne.n	8001c3e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c22:	4b88      	ldr	r3, [pc, #544]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c24:	69db      	ldr	r3, [r3, #28]
 8001c26:	4a87      	ldr	r2, [pc, #540]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c2c:	61d3      	str	r3, [r2, #28]
 8001c2e:	4b85      	ldr	r3, [pc, #532]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c36:	60bb      	str	r3, [r7, #8]
 8001c38:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c3e:	4b82      	ldr	r3, [pc, #520]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d118      	bne.n	8001c7c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c4a:	4b7f      	ldr	r3, [pc, #508]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a7e      	ldr	r2, [pc, #504]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c54:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c56:	f7ff f801 	bl	8000c5c <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c5e:	f7fe fffd 	bl	8000c5c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b64      	cmp	r3, #100	; 0x64
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e103      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c70:	4b75      	ldr	r3, [pc, #468]	; (8001e48 <HAL_RCC_OscConfig+0x4c8>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0f0      	beq.n	8001c5e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d106      	bne.n	8001c92 <HAL_RCC_OscConfig+0x312>
 8001c84:	4b6f      	ldr	r3, [pc, #444]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c86:	6a1b      	ldr	r3, [r3, #32]
 8001c88:	4a6e      	ldr	r2, [pc, #440]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c8a:	f043 0301 	orr.w	r3, r3, #1
 8001c8e:	6213      	str	r3, [r2, #32]
 8001c90:	e02d      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d10c      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x334>
 8001c9a:	4b6a      	ldr	r3, [pc, #424]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
 8001c9e:	4a69      	ldr	r2, [pc, #420]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca0:	f023 0301 	bic.w	r3, r3, #1
 8001ca4:	6213      	str	r3, [r2, #32]
 8001ca6:	4b67      	ldr	r3, [pc, #412]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	4a66      	ldr	r2, [pc, #408]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cac:	f023 0304 	bic.w	r3, r3, #4
 8001cb0:	6213      	str	r3, [r2, #32]
 8001cb2:	e01c      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d10c      	bne.n	8001cd6 <HAL_RCC_OscConfig+0x356>
 8001cbc:	4b61      	ldr	r3, [pc, #388]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4a60      	ldr	r2, [pc, #384]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cc2:	f043 0304 	orr.w	r3, r3, #4
 8001cc6:	6213      	str	r3, [r2, #32]
 8001cc8:	4b5e      	ldr	r3, [pc, #376]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cca:	6a1b      	ldr	r3, [r3, #32]
 8001ccc:	4a5d      	ldr	r2, [pc, #372]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6213      	str	r3, [r2, #32]
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0x36e>
 8001cd6:	4b5b      	ldr	r3, [pc, #364]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	4a5a      	ldr	r2, [pc, #360]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001cdc:	f023 0301 	bic.w	r3, r3, #1
 8001ce0:	6213      	str	r3, [r2, #32]
 8001ce2:	4b58      	ldr	r3, [pc, #352]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce4:	6a1b      	ldr	r3, [r3, #32]
 8001ce6:	4a57      	ldr	r2, [pc, #348]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001ce8:	f023 0304 	bic.w	r3, r3, #4
 8001cec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d015      	beq.n	8001d22 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf6:	f7fe ffb1 	bl	8000c5c <HAL_GetTick>
 8001cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfc:	e00a      	b.n	8001d14 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cfe:	f7fe ffad 	bl	8000c5c <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0c:	4293      	cmp	r3, r2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e0b1      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d14:	4b4b      	ldr	r3, [pc, #300]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0ee      	beq.n	8001cfe <HAL_RCC_OscConfig+0x37e>
 8001d20:	e014      	b.n	8001d4c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d22:	f7fe ff9b 	bl	8000c5c <HAL_GetTick>
 8001d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d28:	e00a      	b.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d2a:	f7fe ff97 	bl	8000c5c <HAL_GetTick>
 8001d2e:	4602      	mov	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e09b      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d40:	4b40      	ldr	r3, [pc, #256]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d42:	6a1b      	ldr	r3, [r3, #32]
 8001d44:	f003 0302 	and.w	r3, r3, #2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d1ee      	bne.n	8001d2a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d4c:	7dfb      	ldrb	r3, [r7, #23]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d105      	bne.n	8001d5e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d52:	4b3c      	ldr	r3, [pc, #240]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a3b      	ldr	r2, [pc, #236]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f000 8087 	beq.w	8001e76 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d68:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 030c 	and.w	r3, r3, #12
 8001d70:	2b08      	cmp	r3, #8
 8001d72:	d061      	beq.n	8001e38 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	69db      	ldr	r3, [r3, #28]
 8001d78:	2b02      	cmp	r3, #2
 8001d7a:	d146      	bne.n	8001e0a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d7c:	4b33      	ldr	r3, [pc, #204]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d82:	f7fe ff6b 	bl	8000c5c <HAL_GetTick>
 8001d86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d88:	e008      	b.n	8001d9c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d8a:	f7fe ff67 	bl	8000c5c <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	693b      	ldr	r3, [r7, #16]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	2b02      	cmp	r3, #2
 8001d96:	d901      	bls.n	8001d9c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d98:	2303      	movs	r3, #3
 8001d9a:	e06d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d9c:	4b29      	ldr	r3, [pc, #164]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d1f0      	bne.n	8001d8a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6a1b      	ldr	r3, [r3, #32]
 8001dac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001db0:	d108      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001db2:	4b24      	ldr	r3, [pc, #144]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	4921      	ldr	r1, [pc, #132]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6a19      	ldr	r1, [r3, #32]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dd4:	430b      	orrs	r3, r1
 8001dd6:	491b      	ldr	r1, [pc, #108]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dd8:	4313      	orrs	r3, r2
 8001dda:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001de2:	f7fe ff3b 	bl	8000c5c <HAL_GetTick>
 8001de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de8:	e008      	b.n	8001dfc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dea:	f7fe ff37 	bl	8000c5c <HAL_GetTick>
 8001dee:	4602      	mov	r2, r0
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	1ad3      	subs	r3, r2, r3
 8001df4:	2b02      	cmp	r3, #2
 8001df6:	d901      	bls.n	8001dfc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	e03d      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001dfc:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d0f0      	beq.n	8001dea <HAL_RCC_OscConfig+0x46a>
 8001e08:	e035      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <HAL_RCC_OscConfig+0x4cc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e10:	f7fe ff24 	bl	8000c5c <HAL_GetTick>
 8001e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e16:	e008      	b.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e18:	f7fe ff20 	bl	8000c5c <HAL_GetTick>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	693b      	ldr	r3, [r7, #16]
 8001e20:	1ad3      	subs	r3, r2, r3
 8001e22:	2b02      	cmp	r3, #2
 8001e24:	d901      	bls.n	8001e2a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e26:	2303      	movs	r3, #3
 8001e28:	e026      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_OscConfig+0x4c4>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f0      	bne.n	8001e18 <HAL_RCC_OscConfig+0x498>
 8001e36:	e01e      	b.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	69db      	ldr	r3, [r3, #28]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d107      	bne.n	8001e50 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e019      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
 8001e44:	40021000 	.word	0x40021000
 8001e48:	40007000 	.word	0x40007000
 8001e4c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e50:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <HAL_RCC_OscConfig+0x500>)
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	429a      	cmp	r2, r3
 8001e62:	d106      	bne.n	8001e72 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e6e:	429a      	cmp	r2, r3
 8001e70:	d001      	beq.n	8001e76 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001e72:	2301      	movs	r3, #1
 8001e74:	e000      	b.n	8001e78 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001e76:	2300      	movs	r3, #0
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3718      	adds	r7, #24
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	40021000 	.word	0x40021000

08001e84 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b084      	sub	sp, #16
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
 8001e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e0d0      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e98:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	683a      	ldr	r2, [r7, #0]
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d910      	bls.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ea6:	4b67      	ldr	r3, [pc, #412]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 0207 	bic.w	r2, r3, #7
 8001eae:	4965      	ldr	r1, [pc, #404]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eb6:	4b63      	ldr	r3, [pc, #396]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0307 	and.w	r3, r3, #7
 8001ebe:	683a      	ldr	r2, [r7, #0]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d001      	beq.n	8001ec8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b8      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d020      	beq.n	8001f16 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0304 	and.w	r3, r3, #4
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d005      	beq.n	8001eec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ee0:	4b59      	ldr	r3, [pc, #356]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	4a58      	ldr	r2, [pc, #352]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001ee6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001eea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001efe:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f02:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	494d      	ldr	r1, [pc, #308]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0301 	and.w	r3, r3, #1
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d040      	beq.n	8001fa4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	2b01      	cmp	r3, #1
 8001f28:	d107      	bne.n	8001f3a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f2a:	4b47      	ldr	r3, [pc, #284]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d115      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e07f      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	2b02      	cmp	r3, #2
 8001f40:	d107      	bne.n	8001f52 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f42:	4b41      	ldr	r3, [pc, #260]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d109      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e073      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f52:	4b3d      	ldr	r3, [pc, #244]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d101      	bne.n	8001f62 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f5e:	2301      	movs	r3, #1
 8001f60:	e06b      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f62:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	f023 0203 	bic.w	r2, r3, #3
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	4936      	ldr	r1, [pc, #216]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f74:	f7fe fe72 	bl	8000c5c <HAL_GetTick>
 8001f78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7a:	e00a      	b.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7c:	f7fe fe6e 	bl	8000c5c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e053      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 020c 	and.w	r2, r3, #12
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d1eb      	bne.n	8001f7c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa4:	4b27      	ldr	r3, [pc, #156]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d210      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb2:	4b24      	ldr	r3, [pc, #144]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 0207 	bic.w	r2, r3, #7
 8001fba:	4922      	ldr	r1, [pc, #136]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc2:	4b20      	ldr	r3, [pc, #128]	; (8002044 <HAL_RCC_ClockConfig+0x1c0>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f003 0307 	and.w	r3, r3, #7
 8001fca:	683a      	ldr	r2, [r7, #0]
 8001fcc:	429a      	cmp	r2, r3
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e032      	b.n	800203a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0304 	and.w	r3, r3, #4
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d008      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fe0:	4b19      	ldr	r3, [pc, #100]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	4916      	ldr	r1, [pc, #88]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 0308 	and.w	r3, r3, #8
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d009      	beq.n	8002012 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ffe:	4b12      	ldr	r3, [pc, #72]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	490e      	ldr	r1, [pc, #56]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	4313      	orrs	r3, r2
 8002010:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002012:	f000 f821 	bl	8002058 <HAL_RCC_GetSysClockFreq>
 8002016:	4602      	mov	r2, r0
 8002018:	4b0b      	ldr	r3, [pc, #44]	; (8002048 <HAL_RCC_ClockConfig+0x1c4>)
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	091b      	lsrs	r3, r3, #4
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	490a      	ldr	r1, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1c8>)
 8002024:	5ccb      	ldrb	r3, [r1, r3]
 8002026:	fa22 f303 	lsr.w	r3, r2, r3
 800202a:	4a09      	ldr	r2, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x1cc>)
 800202c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800202e:	4b09      	ldr	r3, [pc, #36]	; (8002054 <HAL_RCC_ClockConfig+0x1d0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fdd0 	bl	8000bd8 <HAL_InitTick>

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	40022000 	.word	0x40022000
 8002048:	40021000 	.word	0x40021000
 800204c:	08002ed8 	.word	0x08002ed8
 8002050:	20000028 	.word	0x20000028
 8002054:	2000002c 	.word	0x2000002c

08002058 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002058:	b490      	push	{r4, r7}
 800205a:	b08a      	sub	sp, #40	; 0x28
 800205c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800205e:	4b29      	ldr	r3, [pc, #164]	; (8002104 <HAL_RCC_GetSysClockFreq+0xac>)
 8002060:	1d3c      	adds	r4, r7, #4
 8002062:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002064:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002068:	f240 2301 	movw	r3, #513	; 0x201
 800206c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
 8002072:	2300      	movs	r3, #0
 8002074:	61bb      	str	r3, [r7, #24]
 8002076:	2300      	movs	r3, #0
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
 800207a:	2300      	movs	r3, #0
 800207c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800207e:	2300      	movs	r3, #0
 8002080:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002082:	4b21      	ldr	r3, [pc, #132]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002088:	69fb      	ldr	r3, [r7, #28]
 800208a:	f003 030c 	and.w	r3, r3, #12
 800208e:	2b04      	cmp	r3, #4
 8002090:	d002      	beq.n	8002098 <HAL_RCC_GetSysClockFreq+0x40>
 8002092:	2b08      	cmp	r3, #8
 8002094:	d003      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x46>
 8002096:	e02b      	b.n	80020f0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 800209a:	623b      	str	r3, [r7, #32]
      break;
 800209c:	e02b      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	0c9b      	lsrs	r3, r3, #18
 80020a2:	f003 030f 	and.w	r3, r3, #15
 80020a6:	3328      	adds	r3, #40	; 0x28
 80020a8:	443b      	add	r3, r7
 80020aa:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020ae:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d012      	beq.n	80020e0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020ba:	4b13      	ldr	r3, [pc, #76]	; (8002108 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	0c5b      	lsrs	r3, r3, #17
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	3328      	adds	r3, #40	; 0x28
 80020c6:	443b      	add	r3, r7
 80020c8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020cc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	4a0e      	ldr	r2, [pc, #56]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d2:	fb03 f202 	mul.w	r2, r3, r2
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80020dc:	627b      	str	r3, [r7, #36]	; 0x24
 80020de:	e004      	b.n	80020ea <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020e4:	fb02 f303 	mul.w	r3, r2, r3
 80020e8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ec:	623b      	str	r3, [r7, #32]
      break;
 80020ee:	e002      	b.n	80020f6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f0:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_RCC_GetSysClockFreq+0xb4>)
 80020f2:	623b      	str	r3, [r7, #32]
      break;
 80020f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020f6:	6a3b      	ldr	r3, [r7, #32]
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bc90      	pop	{r4, r7}
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	08002ec8 	.word	0x08002ec8
 8002108:	40021000 	.word	0x40021000
 800210c:	007a1200 	.word	0x007a1200
 8002110:	003d0900 	.word	0x003d0900

08002114 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002118:	4b02      	ldr	r3, [pc, #8]	; (8002124 <HAL_RCC_GetHCLKFreq+0x10>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	bc80      	pop	{r7}
 8002122:	4770      	bx	lr
 8002124:	20000028 	.word	0x20000028

08002128 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800212c:	f7ff fff2 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	0a1b      	lsrs	r3, r3, #8
 8002138:	f003 0307 	and.w	r3, r3, #7
 800213c:	4903      	ldr	r1, [pc, #12]	; (800214c <HAL_RCC_GetPCLK1Freq+0x24>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002144:	4618      	mov	r0, r3
 8002146:	bd80      	pop	{r7, pc}
 8002148:	40021000 	.word	0x40021000
 800214c:	08002ee8 	.word	0x08002ee8

08002150 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002154:	f7ff ffde 	bl	8002114 <HAL_RCC_GetHCLKFreq>
 8002158:	4602      	mov	r2, r0
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x20>)
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	0adb      	lsrs	r3, r3, #11
 8002160:	f003 0307 	and.w	r3, r3, #7
 8002164:	4903      	ldr	r1, [pc, #12]	; (8002174 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002166:	5ccb      	ldrb	r3, [r1, r3]
 8002168:	fa22 f303 	lsr.w	r3, r2, r3
}
 800216c:	4618      	mov	r0, r3
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40021000 	.word	0x40021000
 8002174:	08002ee8 	.word	0x08002ee8

08002178 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002180:	4b0a      	ldr	r3, [pc, #40]	; (80021ac <RCC_Delay+0x34>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a0a      	ldr	r2, [pc, #40]	; (80021b0 <RCC_Delay+0x38>)
 8002186:	fba2 2303 	umull	r2, r3, r2, r3
 800218a:	0a5b      	lsrs	r3, r3, #9
 800218c:	687a      	ldr	r2, [r7, #4]
 800218e:	fb02 f303 	mul.w	r3, r2, r3
 8002192:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002194:	bf00      	nop
  }
  while (Delay --);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1e5a      	subs	r2, r3, #1
 800219a:	60fa      	str	r2, [r7, #12]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d1f9      	bne.n	8002194 <RCC_Delay+0x1c>
}
 80021a0:	bf00      	nop
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bc80      	pop	{r7}
 80021aa:	4770      	bx	lr
 80021ac:	20000028 	.word	0x20000028
 80021b0:	10624dd3 	.word	0x10624dd3

080021b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e03f      	b.n	8002246 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d106      	bne.n	80021e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7fe fba4 	bl	8000928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2224      	movs	r2, #36	; 0x24
 80021e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80021f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f000 fd9b 	bl	8002d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800220c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	695a      	ldr	r2, [r3, #20]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800221c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68da      	ldr	r2, [r3, #12]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800222c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2220      	movs	r2, #32
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002244:	2300      	movs	r3, #0
}
 8002246:	4618      	mov	r0, r3
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b08a      	sub	sp, #40	; 0x28
 8002252:	af02      	add	r7, sp, #8
 8002254:	60f8      	str	r0, [r7, #12]
 8002256:	60b9      	str	r1, [r7, #8]
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4613      	mov	r3, r2
 800225c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002268:	b2db      	uxtb	r3, r3
 800226a:	2b20      	cmp	r3, #32
 800226c:	d17c      	bne.n	8002368 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d002      	beq.n	800227a <HAL_UART_Transmit+0x2c>
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e075      	b.n	800236a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002284:	2b01      	cmp	r3, #1
 8002286:	d101      	bne.n	800228c <HAL_UART_Transmit+0x3e>
 8002288:	2302      	movs	r3, #2
 800228a:	e06e      	b.n	800236a <HAL_UART_Transmit+0x11c>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2201      	movs	r2, #1
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2200      	movs	r2, #0
 8002298:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2221      	movs	r2, #33	; 0x21
 800229e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80022a2:	f7fe fcdb 	bl	8000c5c <HAL_GetTick>
 80022a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	88fa      	ldrh	r2, [r7, #6]
 80022ac:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	88fa      	ldrh	r2, [r7, #6]
 80022b2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022bc:	d108      	bne.n	80022d0 <HAL_UART_Transmit+0x82>
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	691b      	ldr	r3, [r3, #16]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	61bb      	str	r3, [r7, #24]
 80022ce:	e003      	b.n	80022d8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80022e0:	e02a      	b.n	8002338 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	2200      	movs	r2, #0
 80022ea:	2180      	movs	r1, #128	; 0x80
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f000 fb0d 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d001      	beq.n	80022fc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e036      	b.n	800236a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10b      	bne.n	800231a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	881b      	ldrh	r3, [r3, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002310:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	3302      	adds	r3, #2
 8002316:	61bb      	str	r3, [r7, #24]
 8002318:	e007      	b.n	800232a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	781a      	ldrb	r2, [r3, #0]
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	3301      	adds	r3, #1
 8002328:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800232e:	b29b      	uxth	r3, r3
 8002330:	3b01      	subs	r3, #1
 8002332:	b29a      	uxth	r2, r3
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800233c:	b29b      	uxth	r3, r3
 800233e:	2b00      	cmp	r3, #0
 8002340:	d1cf      	bne.n	80022e2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	9300      	str	r3, [sp, #0]
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	2140      	movs	r1, #64	; 0x40
 800234c:	68f8      	ldr	r0, [r7, #12]
 800234e:	f000 fadd 	bl	800290c <UART_WaitOnFlagUntilTimeout>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e006      	b.n	800236a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	2220      	movs	r2, #32
 8002360:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	e000      	b.n	800236a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002368:	2302      	movs	r3, #2
  }
}
 800236a:	4618      	mov	r0, r3
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af00      	add	r7, sp, #0
 8002378:	60f8      	str	r0, [r7, #12]
 800237a:	60b9      	str	r1, [r7, #8]
 800237c:	4613      	mov	r3, r2
 800237e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b20      	cmp	r3, #32
 800238a:	d13c      	bne.n	8002406 <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d002      	beq.n	8002398 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8002392:	88fb      	ldrh	r3, [r7, #6]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d101      	bne.n	800239c <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002398:	2301      	movs	r3, #1
 800239a:	e035      	b.n	8002408 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d101      	bne.n	80023aa <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80023a6:	2302      	movs	r3, #2
 80023a8:	e02e      	b.n	8002408 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80023b8:	88fb      	ldrh	r3, [r7, #6]
 80023ba:	461a      	mov	r2, r3
 80023bc:	68b9      	ldr	r1, [r7, #8]
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 faee 	bl	80029a0 <UART_Start_Receive_DMA>
 80023c4:	4603      	mov	r3, r0
 80023c6:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d119      	bne.n	8002402 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	2b01      	cmp	r3, #1
 80023d4:	d113      	bne.n	80023fe <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023d6:	2300      	movs	r3, #0
 80023d8:	613b      	str	r3, [r7, #16]
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68da      	ldr	r2, [r3, #12]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f042 0210 	orr.w	r2, r2, #16
 80023fa:	60da      	str	r2, [r3, #12]
 80023fc:	e001      	b.n	8002402 <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 8002402:	7dfb      	ldrb	r3, [r7, #23]
 8002404:	e000      	b.n	8002408 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 8002406:	2302      	movs	r3, #2
  }
}
 8002408:	4618      	mov	r0, r3
 800240a:	3718      	adds	r7, #24
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}

08002410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b08a      	sub	sp, #40	; 0x28
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8002430:	2300      	movs	r3, #0
 8002432:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8002434:	2300      	movs	r3, #0
 8002436:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800243a:	f003 030f 	and.w	r3, r3, #15
 800243e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10d      	bne.n	8002462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	f003 0320 	and.w	r3, r3, #32
 800244c:	2b00      	cmp	r3, #0
 800244e:	d008      	beq.n	8002462 <HAL_UART_IRQHandler+0x52>
 8002450:	6a3b      	ldr	r3, [r7, #32]
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d003      	beq.n	8002462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f000 fbc0 	bl	8002be0 <UART_Receive_IT>
      return;
 8002460:	e17b      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002462:	69bb      	ldr	r3, [r7, #24]
 8002464:	2b00      	cmp	r3, #0
 8002466:	f000 80b1 	beq.w	80025cc <HAL_UART_IRQHandler+0x1bc>
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d105      	bne.n	8002480 <HAL_UART_IRQHandler+0x70>
 8002474:	6a3b      	ldr	r3, [r7, #32]
 8002476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 80a6 	beq.w	80025cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HAL_UART_IRQHandler+0x90>
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	f043 0201 	orr.w	r2, r3, #1
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	f003 0304 	and.w	r3, r3, #4
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_UART_IRQHandler+0xb0>
 80024aa:	69fb      	ldr	r3, [r7, #28]
 80024ac:	f003 0301 	and.w	r3, r3, #1
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b8:	f043 0202 	orr.w	r2, r3, #2
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_UART_IRQHandler+0xd0>
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	f003 0301 	and.w	r3, r3, #1
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d005      	beq.n	80024e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d8:	f043 0204 	orr.w	r2, r3, #4
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80024e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024e2:	f003 0308 	and.w	r3, r3, #8
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d00f      	beq.n	800250a <HAL_UART_IRQHandler+0xfa>
 80024ea:	6a3b      	ldr	r3, [r7, #32]
 80024ec:	f003 0320 	and.w	r3, r3, #32
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d104      	bne.n	80024fe <HAL_UART_IRQHandler+0xee>
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002502:	f043 0208 	orr.w	r2, r3, #8
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 811e 	beq.w	8002750 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002516:	f003 0320 	and.w	r3, r3, #32
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <HAL_UART_IRQHandler+0x11e>
 800251e:	6a3b      	ldr	r3, [r7, #32]
 8002520:	f003 0320 	and.w	r3, r3, #32
 8002524:	2b00      	cmp	r3, #0
 8002526:	d002      	beq.n	800252e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 fb59 	bl	8002be0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	695b      	ldr	r3, [r3, #20]
 8002534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002538:	2b00      	cmp	r3, #0
 800253a:	bf14      	ite	ne
 800253c:	2301      	movne	r3, #1
 800253e:	2300      	moveq	r3, #0
 8002540:	b2db      	uxtb	r3, r3
 8002542:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002548:	f003 0308 	and.w	r3, r3, #8
 800254c:	2b00      	cmp	r3, #0
 800254e:	d102      	bne.n	8002556 <HAL_UART_IRQHandler+0x146>
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d031      	beq.n	80025ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 fa9b 	bl	8002a92 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002566:	2b00      	cmp	r3, #0
 8002568:	d023      	beq.n	80025b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	695a      	ldr	r2, [r3, #20]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800257e:	2b00      	cmp	r3, #0
 8002580:	d013      	beq.n	80025aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002586:	4a76      	ldr	r2, [pc, #472]	; (8002760 <HAL_UART_IRQHandler+0x350>)
 8002588:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800258e:	4618      	mov	r0, r3
 8002590:	f7fe fd70 	bl	8001074 <HAL_DMA_Abort_IT>
 8002594:	4603      	mov	r3, r0
 8002596:	2b00      	cmp	r3, #0
 8002598:	d016      	beq.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80025a4:	4610      	mov	r0, r2
 80025a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025a8:	e00e      	b.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 f8f5 	bl	800279a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b0:	e00a      	b.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f8f1 	bl	800279a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b8:	e006      	b.n	80025c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f8ed 	bl	800279a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80025c6:	e0c3      	b.n	8002750 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025c8:	bf00      	nop
    return;
 80025ca:	e0c1      	b.n	8002750 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	f040 80a1 	bne.w	8002718 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80025d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 809b 	beq.w	8002718 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80025e2:	6a3b      	ldr	r3, [r7, #32]
 80025e4:	f003 0310 	and.w	r3, r3, #16
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8095 	beq.w	8002718 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80025ee:	2300      	movs	r3, #0
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	695b      	ldr	r3, [r3, #20]
 800260a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d04e      	beq.n	80026b0 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800261c:	8a3b      	ldrh	r3, [r7, #16]
 800261e:	2b00      	cmp	r3, #0
 8002620:	f000 8098 	beq.w	8002754 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002628:	8a3a      	ldrh	r2, [r7, #16]
 800262a:	429a      	cmp	r2, r3
 800262c:	f080 8092 	bcs.w	8002754 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	8a3a      	ldrh	r2, [r7, #16]
 8002634:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	2b20      	cmp	r3, #32
 800263e:	d02b      	beq.n	8002698 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68da      	ldr	r2, [r3, #12]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800264e:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	695a      	ldr	r2, [r3, #20]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800266e:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2220      	movs	r2, #32
 8002674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 0210 	bic.w	r2, r2, #16
 800268c:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fcb3 	bl	8000ffe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026a0:	b29b      	uxth	r3, r3
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	b29b      	uxth	r3, r3
 80026a6:	4619      	mov	r1, r3
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7fe f875 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80026ae:	e051      	b.n	8002754 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80026c2:	b29b      	uxth	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d047      	beq.n	8002758 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 80026c8:	8a7b      	ldrh	r3, [r7, #18]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d044      	beq.n	8002758 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	68da      	ldr	r2, [r3, #12]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80026dc:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695a      	ldr	r2, [r3, #20]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f022 0201 	bic.w	r2, r2, #1
 80026ec:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2220      	movs	r2, #32
 80026f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	68da      	ldr	r2, [r3, #12]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0210 	bic.w	r2, r2, #16
 800270a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800270c:	8a7b      	ldrh	r3, [r7, #18]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7fe f841 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002716:	e01f      	b.n	8002758 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d008      	beq.n	8002734 <HAL_UART_IRQHandler+0x324>
 8002722:	6a3b      	ldr	r3, [r7, #32]
 8002724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002728:	2b00      	cmp	r3, #0
 800272a:	d003      	beq.n	8002734 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 f9f0 	bl	8002b12 <UART_Transmit_IT>
    return;
 8002732:	e012      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00d      	beq.n	800275a <HAL_UART_IRQHandler+0x34a>
 800273e:	6a3b      	ldr	r3, [r7, #32]
 8002740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002744:	2b00      	cmp	r3, #0
 8002746:	d008      	beq.n	800275a <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f000 fa31 	bl	8002bb0 <UART_EndTransmit_IT>
    return;
 800274e:	e004      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
    return;
 8002750:	bf00      	nop
 8002752:	e002      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
      return;
 8002754:	bf00      	nop
 8002756:	e000      	b.n	800275a <HAL_UART_IRQHandler+0x34a>
      return;
 8002758:	bf00      	nop
  }
}
 800275a:	3728      	adds	r7, #40	; 0x28
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}
 8002760:	08002aeb 	.word	0x08002aeb

08002764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	bc80      	pop	{r7}
 8002774:	4770      	bx	lr

08002776 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	bc80      	pop	{r7}
 8002798:	4770      	bx	lr

0800279a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bc80      	pop	{r7}
 80027aa:	4770      	bx	lr

080027ac <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027b8:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0320 	and.w	r3, r3, #32
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d12a      	bne.n	800281e <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	2200      	movs	r2, #0
 80027cc:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80027dc:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	695a      	ldr	r2, [r3, #20]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0201 	bic.w	r2, r2, #1
 80027ec:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	695a      	ldr	r2, [r3, #20]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027fc:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2220      	movs	r2, #32
 8002802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800280a:	2b01      	cmp	r3, #1
 800280c:	d107      	bne.n	800281e <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68da      	ldr	r2, [r3, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f022 0210 	bic.w	r2, r2, #16
 800281c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002822:	2b01      	cmp	r3, #1
 8002824:	d106      	bne.n	8002834 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800282a:	4619      	mov	r1, r3
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7fd ffb3 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002832:	e002      	b.n	800283a <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8002834:	68f8      	ldr	r0, [r7, #12]
 8002836:	f7ff ff9e 	bl	8002776 <HAL_UART_RxCpltCallback>
}
 800283a:	bf00      	nop
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}

08002842 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002842:	b580      	push	{r7, lr}
 8002844:	b084      	sub	sp, #16
 8002846:	af00      	add	r7, sp, #0
 8002848:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002854:	2b01      	cmp	r3, #1
 8002856:	d108      	bne.n	800286a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	b29b      	uxth	r3, r3
 8002860:	4619      	mov	r1, r3
 8002862:	68f8      	ldr	r0, [r7, #12]
 8002864:	f7fd ff98 	bl	8000798 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002868:	e002      	b.n	8002870 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	f7ff ff8c 	bl	8002788 <HAL_UART_RxHalfCpltCallback>
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	695b      	ldr	r3, [r3, #20]
 8002890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002894:	2b00      	cmp	r3, #0
 8002896:	bf14      	ite	ne
 8002898:	2301      	movne	r3, #1
 800289a:	2300      	moveq	r3, #0
 800289c:	b2db      	uxtb	r3, r3
 800289e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b21      	cmp	r3, #33	; 0x21
 80028aa:	d108      	bne.n	80028be <UART_DMAError+0x46>
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	2200      	movs	r2, #0
 80028b6:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80028b8:	68b8      	ldr	r0, [r7, #8]
 80028ba:	f000 f8d5 	bl	8002a68 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028da:	b2db      	uxtb	r3, r3
 80028dc:	2b22      	cmp	r3, #34	; 0x22
 80028de:	d108      	bne.n	80028f2 <UART_DMAError+0x7a>
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	2200      	movs	r2, #0
 80028ea:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80028ec:	68b8      	ldr	r0, [r7, #8]
 80028ee:	f000 f8d0 	bl	8002a92 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f6:	f043 0210 	orr.w	r2, r3, #16
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80028fe:	68b8      	ldr	r0, [r7, #8]
 8002900:	f7ff ff4b 	bl	800279a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002904:	bf00      	nop
 8002906:	3710      	adds	r7, #16
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b084      	sub	sp, #16
 8002910:	af00      	add	r7, sp, #0
 8002912:	60f8      	str	r0, [r7, #12]
 8002914:	60b9      	str	r1, [r7, #8]
 8002916:	603b      	str	r3, [r7, #0]
 8002918:	4613      	mov	r3, r2
 800291a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800291c:	e02c      	b.n	8002978 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d028      	beq.n	8002978 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002926:	69bb      	ldr	r3, [r7, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <UART_WaitOnFlagUntilTimeout+0x30>
 800292c:	f7fe f996 	bl	8000c5c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	429a      	cmp	r2, r3
 800293a:	d21d      	bcs.n	8002978 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800294a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 0201 	bic.w	r2, r2, #1
 800295a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2220      	movs	r2, #32
 8002968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2200      	movs	r2, #0
 8002970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8002974:	2303      	movs	r3, #3
 8002976:	e00f      	b.n	8002998 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	4013      	ands	r3, r2
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	bf0c      	ite	eq
 8002988:	2301      	moveq	r3, #1
 800298a:	2300      	movne	r3, #0
 800298c:	b2db      	uxtb	r3, r3
 800298e:	461a      	mov	r2, r3
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	429a      	cmp	r2, r3
 8002994:	d0c3      	beq.n	800291e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002996:	2300      	movs	r3, #0
}
 8002998:	4618      	mov	r0, r3
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b086      	sub	sp, #24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	4613      	mov	r3, r2
 80029ac:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	88fa      	ldrh	r2, [r7, #6]
 80029b8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	2200      	movs	r2, #0
 80029be:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	2222      	movs	r2, #34	; 0x22
 80029c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029cc:	4a23      	ldr	r2, [pc, #140]	; (8002a5c <UART_Start_Receive_DMA+0xbc>)
 80029ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029d4:	4a22      	ldr	r2, [pc, #136]	; (8002a60 <UART_Start_Receive_DMA+0xc0>)
 80029d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029dc:	4a21      	ldr	r2, [pc, #132]	; (8002a64 <UART_Start_Receive_DMA+0xc4>)
 80029de:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029e4:	2200      	movs	r2, #0
 80029e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80029e8:	f107 0308 	add.w	r3, r7, #8
 80029ec:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3304      	adds	r3, #4
 80029f8:	4619      	mov	r1, r3
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	88fb      	ldrh	r3, [r7, #6]
 8002a00:	f7fe fa9e 	bl	8000f40 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002a04:	2300      	movs	r3, #0
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	613b      	str	r3, [r7, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	613b      	str	r3, [r7, #16]
 8002a18:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	68da      	ldr	r2, [r3, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a30:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	695a      	ldr	r2, [r3, #20]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f042 0201 	orr.w	r2, r2, #1
 8002a40:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	695a      	ldr	r2, [r3, #20]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002a50:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8002a52:	2300      	movs	r3, #0
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	080027ad 	.word	0x080027ad
 8002a60:	08002843 	.word	0x08002843
 8002a64:	08002879 	.word	0x08002879

08002a68 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68da      	ldr	r2, [r3, #12]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002a7e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2220      	movs	r2, #32
 8002a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68da      	ldr	r2, [r3, #12]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002aa8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	695a      	ldr	r2, [r3, #20]
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f022 0201 	bic.w	r2, r2, #1
 8002ab8:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	2b01      	cmp	r3, #1
 8002ac0:	d107      	bne.n	8002ad2 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f022 0210 	bic.w	r2, r2, #16
 8002ad0:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2220      	movs	r2, #32
 8002ad6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr

08002aea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b084      	sub	sp, #16
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2200      	movs	r2, #0
 8002afc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2200      	movs	r2, #0
 8002b02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	f7ff fe48 	bl	800279a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002b0a:	bf00      	nop
 8002b0c:	3710      	adds	r7, #16
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}

08002b12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b085      	sub	sp, #20
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b21      	cmp	r3, #33	; 0x21
 8002b24:	d13e      	bne.n	8002ba4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b2e:	d114      	bne.n	8002b5a <UART_Transmit_IT+0x48>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	691b      	ldr	r3, [r3, #16]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d110      	bne.n	8002b5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	881b      	ldrh	r3, [r3, #0]
 8002b42:	461a      	mov	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	1c9a      	adds	r2, r3, #2
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	621a      	str	r2, [r3, #32]
 8002b58:	e008      	b.n	8002b6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	1c59      	adds	r1, r3, #1
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6211      	str	r1, [r2, #32]
 8002b64:	781a      	ldrb	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d10f      	bne.n	8002ba0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	68da      	ldr	r2, [r3, #12]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002b9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	e000      	b.n	8002ba6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002ba4:	2302      	movs	r3, #2
  }
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b082      	sub	sp, #8
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68da      	ldr	r2, [r3, #12]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bc6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002bd0:	6878      	ldr	r0, [r7, #4]
 8002bd2:	f7ff fdc7 	bl	8002764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b086      	sub	sp, #24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002bee:	b2db      	uxtb	r3, r3
 8002bf0:	2b22      	cmp	r3, #34	; 0x22
 8002bf2:	f040 8099 	bne.w	8002d28 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfe:	d117      	bne.n	8002c30 <UART_Receive_IT+0x50>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	691b      	ldr	r3, [r3, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d113      	bne.n	8002c30 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c10:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	b29b      	uxth	r3, r3
 8002c1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1e:	b29a      	uxth	r2, r3
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	1c9a      	adds	r2, r3, #2
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	629a      	str	r2, [r3, #40]	; 0x28
 8002c2e:	e026      	b.n	8002c7e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c34:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c42:	d007      	beq.n	8002c54 <UART_Receive_IT+0x74>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d10a      	bne.n	8002c62 <UART_Receive_IT+0x82>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	691b      	ldr	r3, [r3, #16]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	b2da      	uxtb	r2, r3
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e008      	b.n	8002c74 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6e:	b2da      	uxtb	r2, r3
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	3b01      	subs	r3, #1
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	4619      	mov	r1, r3
 8002c8c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d148      	bne.n	8002d24 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68da      	ldr	r2, [r3, #12]
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f022 0220 	bic.w	r2, r2, #32
 8002ca0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	68da      	ldr	r2, [r3, #12]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002cb0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	695a      	ldr	r2, [r3, #20]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f022 0201 	bic.w	r2, r2, #1
 8002cc0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2220      	movs	r2, #32
 8002cc6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d123      	bne.n	8002d1a <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f022 0210 	bic.w	r2, r2, #16
 8002ce6:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b10      	cmp	r3, #16
 8002cf4:	d10a      	bne.n	8002d0c <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	60fb      	str	r3, [r7, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002d10:	4619      	mov	r1, r3
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fd fd40 	bl	8000798 <HAL_UARTEx_RxEventCallback>
 8002d18:	e002      	b.n	8002d20 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8002d1a:	6878      	ldr	r0, [r7, #4]
 8002d1c:	f7ff fd2b 	bl	8002776 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002d20:	2300      	movs	r3, #0
 8002d22:	e002      	b.n	8002d2a <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	e000      	b.n	8002d2a <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8002d28:	2302      	movs	r3, #2
  }
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3718      	adds	r7, #24
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
	...

08002d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	691b      	ldr	r3, [r3, #16]
 8002d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	68da      	ldr	r2, [r3, #12]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	430a      	orrs	r2, r1
 8002d50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	691b      	ldr	r3, [r3, #16]
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002d6e:	f023 030c 	bic.w	r3, r3, #12
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	6812      	ldr	r2, [r2, #0]
 8002d76:	68b9      	ldr	r1, [r7, #8]
 8002d78:	430b      	orrs	r3, r1
 8002d7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	699a      	ldr	r2, [r3, #24]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4a2c      	ldr	r2, [pc, #176]	; (8002e48 <UART_SetConfig+0x114>)
 8002d98:	4293      	cmp	r3, r2
 8002d9a:	d103      	bne.n	8002da4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002d9c:	f7ff f9d8 	bl	8002150 <HAL_RCC_GetPCLK2Freq>
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	e002      	b.n	8002daa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002da4:	f7ff f9c0 	bl	8002128 <HAL_RCC_GetPCLK1Freq>
 8002da8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002daa:	68fa      	ldr	r2, [r7, #12]
 8002dac:	4613      	mov	r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	4413      	add	r3, r2
 8002db2:	009a      	lsls	r2, r3, #2
 8002db4:	441a      	add	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dc0:	4a22      	ldr	r2, [pc, #136]	; (8002e4c <UART_SetConfig+0x118>)
 8002dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002dc6:	095b      	lsrs	r3, r3, #5
 8002dc8:	0119      	lsls	r1, r3, #4
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	009b      	lsls	r3, r3, #2
 8002dd0:	4413      	add	r3, r2
 8002dd2:	009a      	lsls	r2, r3, #2
 8002dd4:	441a      	add	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002de0:	4b1a      	ldr	r3, [pc, #104]	; (8002e4c <UART_SetConfig+0x118>)
 8002de2:	fba3 0302 	umull	r0, r3, r3, r2
 8002de6:	095b      	lsrs	r3, r3, #5
 8002de8:	2064      	movs	r0, #100	; 0x64
 8002dea:	fb00 f303 	mul.w	r3, r0, r3
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	011b      	lsls	r3, r3, #4
 8002df2:	3332      	adds	r3, #50	; 0x32
 8002df4:	4a15      	ldr	r2, [pc, #84]	; (8002e4c <UART_SetConfig+0x118>)
 8002df6:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002e00:	4419      	add	r1, r3
 8002e02:	68fa      	ldr	r2, [r7, #12]
 8002e04:	4613      	mov	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	009a      	lsls	r2, r3, #2
 8002e0c:	441a      	add	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <UART_SetConfig+0x118>)
 8002e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8002e1e:	095b      	lsrs	r3, r3, #5
 8002e20:	2064      	movs	r0, #100	; 0x64
 8002e22:	fb00 f303 	mul.w	r3, r0, r3
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	011b      	lsls	r3, r3, #4
 8002e2a:	3332      	adds	r3, #50	; 0x32
 8002e2c:	4a07      	ldr	r2, [pc, #28]	; (8002e4c <UART_SetConfig+0x118>)
 8002e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e32:	095b      	lsrs	r3, r3, #5
 8002e34:	f003 020f 	and.w	r2, r3, #15
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	440a      	add	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002e40:	bf00      	nop
 8002e42:	3710      	adds	r7, #16
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40013800 	.word	0x40013800
 8002e4c:	51eb851f 	.word	0x51eb851f

08002e50 <__libc_init_array>:
 8002e50:	b570      	push	{r4, r5, r6, lr}
 8002e52:	2600      	movs	r6, #0
 8002e54:	4d0c      	ldr	r5, [pc, #48]	; (8002e88 <__libc_init_array+0x38>)
 8002e56:	4c0d      	ldr	r4, [pc, #52]	; (8002e8c <__libc_init_array+0x3c>)
 8002e58:	1b64      	subs	r4, r4, r5
 8002e5a:	10a4      	asrs	r4, r4, #2
 8002e5c:	42a6      	cmp	r6, r4
 8002e5e:	d109      	bne.n	8002e74 <__libc_init_array+0x24>
 8002e60:	f000 f822 	bl	8002ea8 <_init>
 8002e64:	2600      	movs	r6, #0
 8002e66:	4d0a      	ldr	r5, [pc, #40]	; (8002e90 <__libc_init_array+0x40>)
 8002e68:	4c0a      	ldr	r4, [pc, #40]	; (8002e94 <__libc_init_array+0x44>)
 8002e6a:	1b64      	subs	r4, r4, r5
 8002e6c:	10a4      	asrs	r4, r4, #2
 8002e6e:	42a6      	cmp	r6, r4
 8002e70:	d105      	bne.n	8002e7e <__libc_init_array+0x2e>
 8002e72:	bd70      	pop	{r4, r5, r6, pc}
 8002e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e78:	4798      	blx	r3
 8002e7a:	3601      	adds	r6, #1
 8002e7c:	e7ee      	b.n	8002e5c <__libc_init_array+0xc>
 8002e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e82:	4798      	blx	r3
 8002e84:	3601      	adds	r6, #1
 8002e86:	e7f2      	b.n	8002e6e <__libc_init_array+0x1e>
 8002e88:	08002ef0 	.word	0x08002ef0
 8002e8c:	08002ef0 	.word	0x08002ef0
 8002e90:	08002ef0 	.word	0x08002ef0
 8002e94:	08002ef4 	.word	0x08002ef4

08002e98 <memset>:
 8002e98:	4603      	mov	r3, r0
 8002e9a:	4402      	add	r2, r0
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d100      	bne.n	8002ea2 <memset+0xa>
 8002ea0:	4770      	bx	lr
 8002ea2:	f803 1b01 	strb.w	r1, [r3], #1
 8002ea6:	e7f9      	b.n	8002e9c <memset+0x4>

08002ea8 <_init>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr

08002eb4 <_fini>:
 8002eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb6:	bf00      	nop
 8002eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eba:	bc08      	pop	{r3}
 8002ebc:	469e      	mov	lr, r3
 8002ebe:	4770      	bx	lr
