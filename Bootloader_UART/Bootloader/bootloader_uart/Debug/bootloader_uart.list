
bootloader_uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a5c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002b68  08002b68  00012b68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b98  08002b98  00020034  2**0
                  CONTENTS
  4 .ARM          00000000  08002b98  08002b98  00020034  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002b98  08002b98  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b98  08002b98  00012b98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b9c  08002b9c  00012b9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08002ba0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b0  20000034  08002bd4  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08002bd4  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   000068ec  00000000  00000000  0002005d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001817  00000000  00000000  00026949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000720  00000000  00000000  00028160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000688  00000000  00000000  00028880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003339  00000000  00000000  00028f08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008153  00000000  00000000  0002c241  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082447  00000000  00000000  00034394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b67db  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b30  00000000  00000000  000b682c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000034 	.word	0x20000034
 8000128:	00000000 	.word	0x00000000
 800012c:	08002b50 	.word	0x08002b50

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000038 	.word	0x20000038
 8000148:	08002b50 	.word	0x08002b50

0800014c <cb_init>:
#include "circular_buffer.h"

void cb_init(cbuffer_t *cb, void *buf, uint32_t size)
{
 800014c:	b480      	push	{r7}
 800014e:	b085      	sub	sp, #20
 8000150:	af00      	add	r7, sp, #0
 8000152:	60f8      	str	r0, [r7, #12]
 8000154:	60b9      	str	r1, [r7, #8]
 8000156:	607a      	str	r2, [r7, #4]
	//Limit max size of cbuffer
	cb->size = (cb->size > CB_MAX_SIZE) ? CB_MAX_SIZE: size;
 8000158:	68fb      	ldr	r3, [r7, #12]
 800015a:	685b      	ldr	r3, [r3, #4]
 800015c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8000160:	d801      	bhi.n	8000166 <cb_init+0x1a>
 8000162:	687b      	ldr	r3, [r7, #4]
 8000164:	e001      	b.n	800016a <cb_init+0x1e>
 8000166:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800016a:	68fa      	ldr	r2, [r7, #12]
 800016c:	6053      	str	r3, [r2, #4]
	cb->reader = -1;
 800016e:	68fb      	ldr	r3, [r7, #12]
 8000170:	f04f 32ff 	mov.w	r2, #4294967295
 8000174:	60da      	str	r2, [r3, #12]
	cb->writer = -1;
 8000176:	68fb      	ldr	r3, [r7, #12]
 8000178:	f04f 32ff 	mov.w	r2, #4294967295
 800017c:	609a      	str	r2, [r3, #8]
	cb->data = (uint8_t*)buf;
 800017e:	68fb      	ldr	r3, [r7, #12]
 8000180:	68ba      	ldr	r2, [r7, #8]
 8000182:	601a      	str	r2, [r3, #0]
	cb->overflow = 0;
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	2200      	movs	r2, #0
 8000188:	611a      	str	r2, [r3, #16]
	cb->active = true;
 800018a:	68fb      	ldr	r3, [r7, #12]
 800018c:	2201      	movs	r2, #1
 800018e:	751a      	strb	r2, [r3, #20]
}
 8000190:	bf00      	nop
 8000192:	3714      	adds	r7, #20
 8000194:	46bd      	mov	sp, r7
 8000196:	bc80      	pop	{r7}
 8000198:	4770      	bx	lr

0800019a <cb_read>:
	free(cb->data);
	cb->active = false;
}

uint32_t cb_read(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 800019a:	b480      	push	{r7}
 800019c:	b087      	sub	sp, #28
 800019e:	af00      	add	r7, sp, #0
 80001a0:	60f8      	str	r0, [r7, #12]
 80001a2:	60b9      	str	r1, [r7, #8]
 80001a4:	607a      	str	r2, [r7, #4]
	uint32_t index_read;
	for (index_read = 1; index_read <= nbytes; index_read++)
 80001a6:	2301      	movs	r3, #1
 80001a8:	617b      	str	r3, [r7, #20]
 80001aa:	e05e      	b.n	800026a <cb_read+0xd0>
	{
		//Check read full
		if ((cb->reader + 1)%cb->size == cb->writer)
 80001ac:	68fb      	ldr	r3, [r7, #12]
 80001ae:	68db      	ldr	r3, [r3, #12]
 80001b0:	3301      	adds	r3, #1
 80001b2:	68fa      	ldr	r2, [r7, #12]
 80001b4:	6852      	ldr	r2, [r2, #4]
 80001b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80001ba:	fb01 f202 	mul.w	r2, r1, r2
 80001be:	1a9a      	subs	r2, r3, r2
 80001c0:	68fb      	ldr	r3, [r7, #12]
 80001c2:	689b      	ldr	r3, [r3, #8]
 80001c4:	429a      	cmp	r2, r3
 80001c6:	d123      	bne.n	8000210 <cb_read+0x76>
		{
			//Increase reader
			cb->reader = (cb->reader + 1) % cb->size;
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	68db      	ldr	r3, [r3, #12]
 80001cc:	3301      	adds	r3, #1
 80001ce:	68fa      	ldr	r2, [r7, #12]
 80001d0:	6852      	ldr	r2, [r2, #4]
 80001d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80001d6:	fb01 f202 	mul.w	r2, r1, r2
 80001da:	1a9a      	subs	r2, r3, r2
 80001dc:	68fb      	ldr	r3, [r7, #12]
 80001de:	60da      	str	r2, [r3, #12]
			//Assign data from cbuffer to read buffer
			*(uint8_t*)(buf + cb->reader)= *(cb->data + cb->reader);
 80001e0:	68fb      	ldr	r3, [r7, #12]
 80001e2:	681a      	ldr	r2, [r3, #0]
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	68db      	ldr	r3, [r3, #12]
 80001e8:	441a      	add	r2, r3
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	68db      	ldr	r3, [r3, #12]
 80001ee:	68b9      	ldr	r1, [r7, #8]
 80001f0:	440b      	add	r3, r1
 80001f2:	7812      	ldrb	r2, [r2, #0]
 80001f4:	701a      	strb	r2, [r3, #0]
			//Assign data to overflow (2 is read all data)
			cb->overflow = 2;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	2202      	movs	r2, #2
 80001fa:	611a      	str	r2, [r3, #16]
			//Reset reader and writer
			cb->reader = -1;
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	f04f 32ff 	mov.w	r2, #4294967295
 8000202:	60da      	str	r2, [r3, #12]
			cb->writer = -1;
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	f04f 32ff 	mov.w	r2, #4294967295
 800020a:	609a      	str	r2, [r3, #8]
			return index_read;
 800020c:	697b      	ldr	r3, [r7, #20]
 800020e:	e030      	b.n	8000272 <cb_read+0xd8>
		}
		else if (cb->writer == -1)
 8000210:	68fb      	ldr	r3, [r7, #12]
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000218:	d104      	bne.n	8000224 <cb_read+0x8a>
		//Check if there is no data but user want to read
		{
			//Assign data to overflow (2 is read all data)
			cb->overflow = 2;
 800021a:	68fb      	ldr	r3, [r7, #12]
 800021c:	2202      	movs	r2, #2
 800021e:	611a      	str	r2, [r3, #16]
			return 0;
 8000220:	2300      	movs	r3, #0
 8000222:	e026      	b.n	8000272 <cb_read+0xd8>
		}
		else
		{
			//Assign data to overflow (0 is not writer and read full)
			cb->overflow = 0;
 8000224:	68fb      	ldr	r3, [r7, #12]
 8000226:	2200      	movs	r2, #0
 8000228:	611a      	str	r2, [r3, #16]
			//Increase reader
			cb->reader = (cb->reader + 1) % cb->size;
 800022a:	68fb      	ldr	r3, [r7, #12]
 800022c:	68db      	ldr	r3, [r3, #12]
 800022e:	3301      	adds	r3, #1
 8000230:	68fa      	ldr	r2, [r7, #12]
 8000232:	6852      	ldr	r2, [r2, #4]
 8000234:	fbb3 f1f2 	udiv	r1, r3, r2
 8000238:	fb01 f202 	mul.w	r2, r1, r2
 800023c:	1a9a      	subs	r2, r3, r2
 800023e:	68fb      	ldr	r3, [r7, #12]
 8000240:	60da      	str	r2, [r3, #12]
			//Assign data from cbuffer to read buffer
			*(uint8_t*)(buf + (index_read - 1))= *(cb->data + cb->reader);
 8000242:	68fb      	ldr	r3, [r7, #12]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	68fb      	ldr	r3, [r7, #12]
 8000248:	68db      	ldr	r3, [r3, #12]
 800024a:	441a      	add	r2, r3
 800024c:	697b      	ldr	r3, [r7, #20]
 800024e:	3b01      	subs	r3, #1
 8000250:	68b9      	ldr	r1, [r7, #8]
 8000252:	440b      	add	r3, r1
 8000254:	7812      	ldrb	r2, [r2, #0]
 8000256:	701a      	strb	r2, [r3, #0]
		}
		//Check if read enough required data
		if (index_read == nbytes) return nbytes;
 8000258:	697a      	ldr	r2, [r7, #20]
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	429a      	cmp	r2, r3
 800025e:	d101      	bne.n	8000264 <cb_read+0xca>
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	e006      	b.n	8000272 <cb_read+0xd8>
	for (index_read = 1; index_read <= nbytes; index_read++)
 8000264:	697b      	ldr	r3, [r7, #20]
 8000266:	3301      	adds	r3, #1
 8000268:	617b      	str	r3, [r7, #20]
 800026a:	697a      	ldr	r2, [r7, #20]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	429a      	cmp	r2, r3
 8000270:	d99c      	bls.n	80001ac <cb_read+0x12>
	}
}
 8000272:	4618      	mov	r0, r3
 8000274:	371c      	adds	r7, #28
 8000276:	46bd      	mov	sp, r7
 8000278:	bc80      	pop	{r7}
 800027a:	4770      	bx	lr

0800027c <cb_write>:

uint32_t cb_write(cbuffer_t *cb, void *buf, uint32_t nbytes)
{
 800027c:	b480      	push	{r7}
 800027e:	b087      	sub	sp, #28
 8000280:	af00      	add	r7, sp, #0
 8000282:	60f8      	str	r0, [r7, #12]
 8000284:	60b9      	str	r1, [r7, #8]
 8000286:	607a      	str	r2, [r7, #4]
	uint8_t index_write;
	for (index_write = 1; index_write <= nbytes; index_write++)
 8000288:	2301      	movs	r3, #1
 800028a:	75fb      	strb	r3, [r7, #23]
 800028c:	e040      	b.n	8000310 <cb_write+0x94>
	{
		//Check overflow data when writing
		if ((cb->writer + 1)%cb->size == cb->reader)
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	689b      	ldr	r3, [r3, #8]
 8000292:	3301      	adds	r3, #1
 8000294:	68fa      	ldr	r2, [r7, #12]
 8000296:	6852      	ldr	r2, [r2, #4]
 8000298:	fbb3 f1f2 	udiv	r1, r3, r2
 800029c:	fb01 f202 	mul.w	r2, r1, r2
 80002a0:	1a9a      	subs	r2, r3, r2
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	68db      	ldr	r3, [r3, #12]
 80002a6:	429a      	cmp	r2, r3
 80002a8:	d105      	bne.n	80002b6 <cb_write+0x3a>
		{
			//Assign data to overflow (1 is can not writer more data)
			cb->overflow = 1;
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	2201      	movs	r2, #1
 80002ae:	611a      	str	r2, [r3, #16]
			return (index_write - 1);
 80002b0:	7dfb      	ldrb	r3, [r7, #23]
 80002b2:	3b01      	subs	r3, #1
 80002b4:	e030      	b.n	8000318 <cb_write+0x9c>
		}
		else
		{
			//Assign data to overflow (0 is not writer and read full)
			cb->overflow = 0;
 80002b6:	68fb      	ldr	r3, [r7, #12]
 80002b8:	2200      	movs	r2, #0
 80002ba:	611a      	str	r2, [r3, #16]
			//Increase writer
			cb->writer = (cb->writer + 1) % cb->size;
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	3301      	adds	r3, #1
 80002c2:	68fa      	ldr	r2, [r7, #12]
 80002c4:	6852      	ldr	r2, [r2, #4]
 80002c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80002ca:	fb01 f202 	mul.w	r2, r1, r2
 80002ce:	1a9a      	subs	r2, r3, r2
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	609a      	str	r2, [r3, #8]
			//Assign data from writer buffer to cbuffer
			*(cb->data + cb->writer) = *(uint8_t*)(buf + (index_write - 1));
 80002d4:	7dfb      	ldrb	r3, [r7, #23]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	68ba      	ldr	r2, [r7, #8]
 80002da:	441a      	add	r2, r3
 80002dc:	68fb      	ldr	r3, [r7, #12]
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	68fb      	ldr	r3, [r7, #12]
 80002e2:	689b      	ldr	r3, [r3, #8]
 80002e4:	440b      	add	r3, r1
 80002e6:	7812      	ldrb	r2, [r2, #0]
 80002e8:	701a      	strb	r2, [r3, #0]
		}

		//Check if write enough required data
		if (index_write == nbytes) return nbytes;
 80002ea:	7dfb      	ldrb	r3, [r7, #23]
 80002ec:	687a      	ldr	r2, [r7, #4]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d101      	bne.n	80002f6 <cb_write+0x7a>
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	e010      	b.n	8000318 <cb_write+0x9c>

		//Check if amount data is equal than size of cbuffer
		if (index_write == cb->size)
 80002f6:	7dfa      	ldrb	r2, [r7, #23]
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	685b      	ldr	r3, [r3, #4]
 80002fc:	429a      	cmp	r2, r3
 80002fe:	d104      	bne.n	800030a <cb_write+0x8e>
		{
			//Assign data to overflow (1 is can not writer more data)
			cb->overflow = 1;
 8000300:	68fb      	ldr	r3, [r7, #12]
 8000302:	2201      	movs	r2, #1
 8000304:	611a      	str	r2, [r3, #16]
			return index_write;
 8000306:	7dfb      	ldrb	r3, [r7, #23]
 8000308:	e006      	b.n	8000318 <cb_write+0x9c>
	for (index_write = 1; index_write <= nbytes; index_write++)
 800030a:	7dfb      	ldrb	r3, [r7, #23]
 800030c:	3301      	adds	r3, #1
 800030e:	75fb      	strb	r3, [r7, #23]
 8000310:	7dfb      	ldrb	r3, [r7, #23]
 8000312:	687a      	ldr	r2, [r7, #4]
 8000314:	429a      	cmp	r2, r3
 8000316:	d2ba      	bcs.n	800028e <cb_write+0x12>
		}

	}
}
 8000318:	4618      	mov	r0, r3
 800031a:	371c      	adds	r7, #28
 800031c:	46bd      	mov	sp, r7
 800031e:	bc80      	pop	{r7}
 8000320:	4770      	bx	lr

08000322 <cb_data_count>:

uint32_t cb_data_count(cbuffer_t *cb)
{
 8000322:	b480      	push	{r7}
 8000324:	b085      	sub	sp, #20
 8000326:	af00      	add	r7, sp, #0
 8000328:	6078      	str	r0, [r7, #4]
	uint8_t num_empty_bytes_current;
	//Check if reader is reading and not read all data
	if (cb->reader != -1)
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	68db      	ldr	r3, [r3, #12]
 800032e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000332:	d021      	beq.n	8000378 <cb_data_count+0x56>
	{
		if (cb->reader > cb->writer)
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	68da      	ldr	r2, [r3, #12]
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	689b      	ldr	r3, [r3, #8]
 800033c:	429a      	cmp	r2, r3
 800033e:	d90c      	bls.n	800035a <cb_data_count+0x38>
		{
			num_empty_bytes_current = cb->size - (cb->reader - cb->writer);
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	685b      	ldr	r3, [r3, #4]
 8000344:	b2da      	uxtb	r2, r3
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	689b      	ldr	r3, [r3, #8]
 800034a:	b2d9      	uxtb	r1, r3
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	68db      	ldr	r3, [r3, #12]
 8000350:	b2db      	uxtb	r3, r3
 8000352:	1acb      	subs	r3, r1, r3
 8000354:	b2db      	uxtb	r3, r3
 8000356:	4413      	add	r3, r2
 8000358:	73fb      	strb	r3, [r7, #15]
		}
		if (cb->reader < cb->writer)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	68da      	ldr	r2, [r3, #12]
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	429a      	cmp	r2, r3
 8000364:	d214      	bcs.n	8000390 <cb_data_count+0x6e>
		{
			num_empty_bytes_current = cb->writer - cb->reader;
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	689b      	ldr	r3, [r3, #8]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	68db      	ldr	r3, [r3, #12]
 8000370:	b2db      	uxtb	r3, r3
 8000372:	1ad3      	subs	r3, r2, r3
 8000374:	73fb      	strb	r3, [r7, #15]
 8000376:	e00b      	b.n	8000390 <cb_data_count+0x6e>
		}
	}
	else
	{
		//Check if read all data
		if (cb->overflow == 2) num_empty_bytes_current = 0;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	691b      	ldr	r3, [r3, #16]
 800037c:	2b02      	cmp	r3, #2
 800037e:	d102      	bne.n	8000386 <cb_data_count+0x64>
 8000380:	2300      	movs	r3, #0
 8000382:	73fb      	strb	r3, [r7, #15]
 8000384:	e004      	b.n	8000390 <cb_data_count+0x6e>
		//Check if this is the first time read when cbuffer init
		else num_empty_bytes_current = cb->writer + 1;
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	689b      	ldr	r3, [r3, #8]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	3301      	adds	r3, #1
 800038e:	73fb      	strb	r3, [r7, #15]
	}
	return num_empty_bytes_current;
 8000390:	7bfb      	ldrb	r3, [r7, #15]
}
 8000392:	4618      	mov	r0, r3
 8000394:	3714      	adds	r7, #20
 8000396:	46bd      	mov	sp, r7
 8000398:	bc80      	pop	{r7}
 800039a:	4770      	bx	lr

0800039c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003a2:	f000 fbaf 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003a6:	f000 f891 	bl	80004cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003aa:	f000 f91b 	bl	80005e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80003ae:	f000 f8f3 	bl	8000598 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80003b2:	f000 f8c7 	bl	8000544 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  uart_transmit_string((uint8_t*)"Hello\n\r");
 80003b6:	483d      	ldr	r0, [pc, #244]	; (80004ac <main+0x110>)
 80003b8:	f000 fb58 	bl	8000a6c <uart_transmit_string>
  cb_init(&cb, buffer, 128);
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	493c      	ldr	r1, [pc, #240]	; (80004b0 <main+0x114>)
 80003c0:	483c      	ldr	r0, [pc, #240]	; (80004b4 <main+0x118>)
 80003c2:	f7ff fec3 	bl	800014c <cb_init>


  start_reception();
 80003c6:	f000 f939 	bl	800063c <start_reception>
  //flash_erase(0x08004000);
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	cb_read(&cb, frame_rx_data, cb_data_count(&cb));
 80003ca:	483a      	ldr	r0, [pc, #232]	; (80004b4 <main+0x118>)
 80003cc:	f7ff ffa9 	bl	8000322 <cb_data_count>
 80003d0:	4603      	mov	r3, r0
 80003d2:	461a      	mov	r2, r3
 80003d4:	4938      	ldr	r1, [pc, #224]	; (80004b8 <main+0x11c>)
 80003d6:	4837      	ldr	r0, [pc, #220]	; (80004b4 <main+0x118>)
 80003d8:	f7ff fedf 	bl	800019a <cb_read>

    /* USER CODE END WHILE */
		data_frame.start_code = *frame_rx_data;
 80003dc:	4b36      	ldr	r3, [pc, #216]	; (80004b8 <main+0x11c>)
 80003de:	781a      	ldrb	r2, [r3, #0]
 80003e0:	4b36      	ldr	r3, [pc, #216]	; (80004bc <main+0x120>)
 80003e2:	701a      	strb	r2, [r3, #0]

		data_frame.byte_count = *(frame_rx_data + 1);
 80003e4:	4b34      	ldr	r3, [pc, #208]	; (80004b8 <main+0x11c>)
 80003e6:	785a      	ldrb	r2, [r3, #1]
 80003e8:	4b34      	ldr	r3, [pc, #208]	; (80004bc <main+0x120>)
 80003ea:	705a      	strb	r2, [r3, #1]

		data_frame.address = ((*(frame_rx_data + 2) << 8) & 0xFF00) | (*(frame_rx_data + 3) & 0x00FF);
 80003ec:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <main+0x11c>)
 80003ee:	789b      	ldrb	r3, [r3, #2]
 80003f0:	021b      	lsls	r3, r3, #8
 80003f2:	b21a      	sxth	r2, r3
 80003f4:	4b30      	ldr	r3, [pc, #192]	; (80004b8 <main+0x11c>)
 80003f6:	78db      	ldrb	r3, [r3, #3]
 80003f8:	b21b      	sxth	r3, r3
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b21b      	sxth	r3, r3
 80003fe:	b29a      	uxth	r2, r3
 8000400:	4b2e      	ldr	r3, [pc, #184]	; (80004bc <main+0x120>)
 8000402:	805a      	strh	r2, [r3, #2]

		data_frame.record_type = *(frame_rx_data + 4);
 8000404:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <main+0x11c>)
 8000406:	791a      	ldrb	r2, [r3, #4]
 8000408:	4b2c      	ldr	r3, [pc, #176]	; (80004bc <main+0x120>)
 800040a:	711a      	strb	r2, [r3, #4]

		if (data_frame.record_type == RECORD_DATA)
 800040c:	4b2b      	ldr	r3, [pc, #172]	; (80004bc <main+0x120>)
 800040e:	791b      	ldrb	r3, [r3, #4]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d131      	bne.n	8000478 <main+0xdc>
		{
			for (uint8_t i = 0; i < data_frame.byte_count; i++)
 8000414:	2300      	movs	r3, #0
 8000416:	71fb      	strb	r3, [r7, #7]
 8000418:	e00c      	b.n	8000434 <main+0x98>
			{
				data_frame.data[i] = *(frame_rx_data + 5 + i);
 800041a:	79fb      	ldrb	r3, [r7, #7]
 800041c:	3305      	adds	r3, #5
 800041e:	4a26      	ldr	r2, [pc, #152]	; (80004b8 <main+0x11c>)
 8000420:	441a      	add	r2, r3
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	7811      	ldrb	r1, [r2, #0]
 8000426:	4a25      	ldr	r2, [pc, #148]	; (80004bc <main+0x120>)
 8000428:	4413      	add	r3, r2
 800042a:	460a      	mov	r2, r1
 800042c:	715a      	strb	r2, [r3, #5]
			for (uint8_t i = 0; i < data_frame.byte_count; i++)
 800042e:	79fb      	ldrb	r3, [r7, #7]
 8000430:	3301      	adds	r3, #1
 8000432:	71fb      	strb	r3, [r7, #7]
 8000434:	4b21      	ldr	r3, [pc, #132]	; (80004bc <main+0x120>)
 8000436:	785b      	ldrb	r3, [r3, #1]
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	429a      	cmp	r2, r3
 800043c:	d3ed      	bcc.n	800041a <main+0x7e>
			}

			data_frame.checksum = *(frame_rx_data + (uint32_t)(data_frame.byte_count + 5));
 800043e:	4b1f      	ldr	r3, [pc, #124]	; (80004bc <main+0x120>)
 8000440:	785b      	ldrb	r3, [r3, #1]
 8000442:	3305      	adds	r3, #5
 8000444:	461a      	mov	r2, r3
 8000446:	4b1c      	ldr	r3, [pc, #112]	; (80004b8 <main+0x11c>)
 8000448:	4413      	add	r3, r2
 800044a:	781a      	ldrb	r2, [r3, #0]
 800044c:	4b1b      	ldr	r3, [pc, #108]	; (80004bc <main+0x120>)
 800044e:	755a      	strb	r2, [r3, #21]

			full_address = (uint32_t)(((high_address << 16) & 0xFFFF0000) | ( data_frame.address & 0x0000FFFF));
 8000450:	4b1b      	ldr	r3, [pc, #108]	; (80004c0 <main+0x124>)
 8000452:	881b      	ldrh	r3, [r3, #0]
 8000454:	041b      	lsls	r3, r3, #16
 8000456:	461a      	mov	r2, r3
 8000458:	4b18      	ldr	r3, [pc, #96]	; (80004bc <main+0x120>)
 800045a:	885b      	ldrh	r3, [r3, #2]
 800045c:	4313      	orrs	r3, r2
 800045e:	4a19      	ldr	r2, [pc, #100]	; (80004c4 <main+0x128>)
 8000460:	6013      	str	r3, [r2, #0]

			if (last_checksum != data_frame.checksum)
 8000462:	4b16      	ldr	r3, [pc, #88]	; (80004bc <main+0x120>)
 8000464:	7d5a      	ldrb	r2, [r3, #21]
 8000466:	4b18      	ldr	r3, [pc, #96]	; (80004c8 <main+0x12c>)
 8000468:	781b      	ldrb	r3, [r3, #0]
 800046a:	429a      	cmp	r2, r3
 800046c:	d018      	beq.n	80004a0 <main+0x104>
			{
				//flash_write(full_address, (uint32_t*)data_frame.data, (data_frame.byte_count/4));
				last_checksum = data_frame.checksum;
 800046e:	4b13      	ldr	r3, [pc, #76]	; (80004bc <main+0x120>)
 8000470:	7d5a      	ldrb	r2, [r3, #21]
 8000472:	4b15      	ldr	r3, [pc, #84]	; (80004c8 <main+0x12c>)
 8000474:	701a      	strb	r2, [r3, #0]
 8000476:	e013      	b.n	80004a0 <main+0x104>
			}

		}
		else if (data_frame.record_type == RECORD_EX_LIR_ADDRESS)
 8000478:	4b10      	ldr	r3, [pc, #64]	; (80004bc <main+0x120>)
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	2b04      	cmp	r3, #4
 800047e:	d10f      	bne.n	80004a0 <main+0x104>
		{
			high_address = ((*(frame_rx_data + 5) << 8) & 0xFF00) | (*(frame_rx_data + 6));
 8000480:	4b0d      	ldr	r3, [pc, #52]	; (80004b8 <main+0x11c>)
 8000482:	795b      	ldrb	r3, [r3, #5]
 8000484:	021b      	lsls	r3, r3, #8
 8000486:	b21a      	sxth	r2, r3
 8000488:	4b0b      	ldr	r3, [pc, #44]	; (80004b8 <main+0x11c>)
 800048a:	799b      	ldrb	r3, [r3, #6]
 800048c:	b21b      	sxth	r3, r3
 800048e:	4313      	orrs	r3, r2
 8000490:	b21b      	sxth	r3, r3
 8000492:	b29a      	uxth	r2, r3
 8000494:	4b0a      	ldr	r3, [pc, #40]	; (80004c0 <main+0x124>)
 8000496:	801a      	strh	r2, [r3, #0]
			data_frame.checksum = *(frame_rx_data + 7);
 8000498:	4b07      	ldr	r3, [pc, #28]	; (80004b8 <main+0x11c>)
 800049a:	79da      	ldrb	r2, [r3, #7]
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <main+0x120>)
 800049e:	755a      	strb	r2, [r3, #21]
		}

		last_checksum = data_frame.checksum;
 80004a0:	4b06      	ldr	r3, [pc, #24]	; (80004bc <main+0x120>)
 80004a2:	7d5a      	ldrb	r2, [r3, #21]
 80004a4:	4b08      	ldr	r3, [pc, #32]	; (80004c8 <main+0x12c>)
 80004a6:	701a      	strb	r2, [r3, #0]
	cb_read(&cb, frame_rx_data, cb_data_count(&cb));
 80004a8:	e78f      	b.n	80003ca <main+0x2e>
 80004aa:	bf00      	nop
 80004ac:	08002b68 	.word	0x08002b68
 80004b0:	200002c0 	.word	0x200002c0
 80004b4:	20000340 	.word	0x20000340
 80004b8:	20000358 	.word	0x20000358
 80004bc:	200002a8 	.word	0x200002a8
 80004c0:	20000026 	.word	0x20000026
 80004c4:	200003d8 	.word	0x200003d8
 80004c8:	200003dc 	.word	0x200003dc

080004cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b090      	sub	sp, #64	; 0x40
 80004d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d2:	f107 0318 	add.w	r3, r7, #24
 80004d6:	2228      	movs	r2, #40	; 0x28
 80004d8:	2100      	movs	r1, #0
 80004da:	4618      	mov	r0, r3
 80004dc:	f002 fb30 	bl	8002b40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e0:	1d3b      	adds	r3, r7, #4
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ee:	2302      	movs	r3, #2
 80004f0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004f2:	2301      	movs	r3, #1
 80004f4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004f6:	2310      	movs	r3, #16
 80004f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004fa:	2300      	movs	r3, #0
 80004fc:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004fe:	f107 0318 	add.w	r3, r7, #24
 8000502:	4618      	mov	r0, r3
 8000504:	f001 f890 	bl	8001628 <HAL_RCC_OscConfig>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d001      	beq.n	8000512 <SystemClock_Config+0x46>
  {
    Error_Handler();
 800050e:	f000 f97f 	bl	8000810 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000512:	230f      	movs	r3, #15
 8000514:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000516:	2300      	movs	r3, #0
 8000518:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800051a:	2300      	movs	r3, #0
 800051c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800051e:	2300      	movs	r3, #0
 8000520:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000522:	2300      	movs	r3, #0
 8000524:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000526:	1d3b      	adds	r3, r7, #4
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f001 fafe 	bl	8001b2c <HAL_RCC_ClockConfig>
 8000530:	4603      	mov	r3, r0
 8000532:	2b00      	cmp	r3, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000536:	f000 f96b 	bl	8000810 <Error_Handler>
  }
}
 800053a:	bf00      	nop
 800053c:	3740      	adds	r7, #64	; 0x40
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000548:	4b11      	ldr	r3, [pc, #68]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800054a:	4a12      	ldr	r2, [pc, #72]	; (8000594 <MX_USART1_UART_Init+0x50>)
 800054c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000550:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000554:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000562:	4b0b      	ldr	r3, [pc, #44]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800056a:	220c      	movs	r2, #12
 800056c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000570:	2200      	movs	r2, #0
 8000572:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 8000576:	2200      	movs	r2, #0
 8000578:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800057a:	4805      	ldr	r0, [pc, #20]	; (8000590 <MX_USART1_UART_Init+0x4c>)
 800057c:	f001 fc6e 	bl	8001e5c <HAL_UART_Init>
 8000580:	4603      	mov	r3, r0
 8000582:	2b00      	cmp	r3, #0
 8000584:	d001      	beq.n	800058a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000586:	f000 f943 	bl	8000810 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800058a:	bf00      	nop
 800058c:	bd80      	pop	{r7, pc}
 800058e:	bf00      	nop
 8000590:	20000050 	.word	0x20000050
 8000594:	40013800 	.word	0x40013800

08000598 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a0:	695b      	ldr	r3, [r3, #20]
 80005a2:	4a0f      	ldr	r2, [pc, #60]	; (80005e0 <MX_DMA_Init+0x48>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6153      	str	r3, [r2, #20]
 80005aa:	4b0d      	ldr	r3, [pc, #52]	; (80005e0 <MX_DMA_Init+0x48>)
 80005ac:	695b      	ldr	r3, [r3, #20]
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	607b      	str	r3, [r7, #4]
 80005b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80005b6:	2200      	movs	r2, #0
 80005b8:	2100      	movs	r1, #0
 80005ba:	200e      	movs	r0, #14
 80005bc:	f000 fbdb 	bl	8000d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80005c0:	200e      	movs	r0, #14
 80005c2:	f000 fbf4 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	200f      	movs	r0, #15
 80005cc:	f000 fbd3 	bl	8000d76 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80005d0:	200f      	movs	r0, #15
 80005d2:	f000 fbec 	bl	8000dae <HAL_NVIC_EnableIRQ>

}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	40021000 	.word	0x40021000

080005e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b08      	ldr	r3, [pc, #32]	; (800060c <MX_GPIO_Init+0x28>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4a07      	ldr	r2, [pc, #28]	; (800060c <MX_GPIO_Init+0x28>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	6193      	str	r3, [r2, #24]
 80005f6:	4b05      	ldr	r3, [pc, #20]	; (800060c <MX_GPIO_Init+0x28>)
 80005f8:	699b      	ldr	r3, [r3, #24]
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	687b      	ldr	r3, [r7, #4]

}
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	bc80      	pop	{r7}
 800060a:	4770      	bx	lr
 800060c:	40021000 	.word	0x40021000

08000610 <print_info>:

/* USER CODE BEGIN 4 */
void print_info(UART_HandleTypeDef *huart, uint8_t *String, uint16_t Size)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b084      	sub	sp, #16
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	4613      	mov	r3, r2
 800061c:	80fb      	strh	r3, [r7, #6]
  if (HAL_UART_Transmit(huart, String, Size, 100) != HAL_OK)
 800061e:	88fa      	ldrh	r2, [r7, #6]
 8000620:	2364      	movs	r3, #100	; 0x64
 8000622:	68b9      	ldr	r1, [r7, #8]
 8000624:	68f8      	ldr	r0, [r7, #12]
 8000626:	f001 fc66 	bl	8001ef6 <HAL_UART_Transmit>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <print_info+0x24>
  {
    Error_Handler();
 8000630:	f000 f8ee 	bl	8000810 <Error_Handler>
  }
}
 8000634:	bf00      	nop
 8000636:	3710      	adds	r7, #16
 8000638:	46bd      	mov	sp, r7
 800063a:	bd80      	pop	{r7, pc}

0800063c <start_reception>:

void start_reception(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* Initializes buffer swap
   */
  p_buffer_for_reception = aRXbufferA;
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <start_reception+0x34>)
 8000642:	4a0c      	ldr	r2, [pc, #48]	; (8000674 <start_reception+0x38>)
 8000644:	601a      	str	r2, [r3, #0]
  p_buffer_for_user = aRXbufferB;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <start_reception+0x3c>)
 8000648:	4a0c      	ldr	r2, [pc, #48]	; (800067c <start_reception+0x40>)
 800064a:	601a      	str	r2, [r3, #0]

  /* Print user info on COMPORT*/
  print_info(&huart1, aTextInfo, COUNTOF(aTextInfo));
 800064c:	2226      	movs	r2, #38	; 0x26
 800064e:	490c      	ldr	r1, [pc, #48]	; (8000680 <start_reception+0x44>)
 8000650:	480c      	ldr	r0, [pc, #48]	; (8000684 <start_reception+0x48>)
 8000652:	f7ff ffdd 	bl	8000610 <print_info>

  /*Initialize RX sequence using Reception To Idle event API */
  if (HAL_UARTEx_ReceiveToIdle_DMA(&huart1, aRXBufferUser, RX_BUFFER_SIZE) != HAL_OK)
 8000656:	2280      	movs	r2, #128	; 0x80
 8000658:	490b      	ldr	r1, [pc, #44]	; (8000688 <start_reception+0x4c>)
 800065a:	480a      	ldr	r0, [pc, #40]	; (8000684 <start_reception+0x48>)
 800065c:	f001 fcdd 	bl	800201a <HAL_UARTEx_ReceiveToIdle_DMA>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <start_reception+0x2e>
  {
    Error_Handler();
 8000666:	f000 f8d3 	bl	8000810 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	2000029c 	.word	0x2000029c
 8000674:	2000019c 	.word	0x2000019c
 8000678:	200002a0 	.word	0x200002a0
 800067c:	2000021c 	.word	0x2000021c
 8000680:	20000000 	.word	0x20000000
 8000684:	20000050 	.word	0x20000050
 8000688:	2000011c 	.word	0x2000011c

0800068c <user_data_treatment>:

void user_data_treatment(UART_HandleTypeDef *huart, uint8_t *p_data, uint16_t size)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	4613      	mov	r3, r2
 8000698:	80fb      	strh	r3, [r7, #6]
  uint8_t *p_buff = p_data;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	617b      	str	r3, [r7, #20]
  uint8_t i;

  cb_write(&cb, p_data, size);
 800069e:	88fb      	ldrh	r3, [r7, #6]
 80006a0:	461a      	mov	r2, r3
 80006a2:	68b9      	ldr	r1, [r7, #8]
 80006a4:	4811      	ldr	r0, [pc, #68]	; (80006ec <user_data_treatment+0x60>)
 80006a6:	f7ff fde9 	bl	800027c <cb_write>

  for (i = 0; i < size; i++)
 80006aa:	2300      	movs	r3, #0
 80006ac:	74fb      	strb	r3, [r7, #19]
 80006ae:	e012      	b.n	80006d6 <user_data_treatment+0x4a>
  {
    while (!(__HAL_UART_GET_FLAG(huart, UART_FLAG_TXE)))
 80006b0:	bf00      	nop
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006bc:	2b80      	cmp	r3, #128	; 0x80
 80006be:	d1f8      	bne.n	80006b2 <user_data_treatment+0x26>
    {
    }
    huart->Instance->DR = *p_buff;
 80006c0:	697b      	ldr	r3, [r7, #20]
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	605a      	str	r2, [r3, #4]
    p_buff++;
 80006ca:	697b      	ldr	r3, [r7, #20]
 80006cc:	3301      	adds	r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
  for (i = 0; i < size; i++)
 80006d0:	7cfb      	ldrb	r3, [r7, #19]
 80006d2:	3301      	adds	r3, #1
 80006d4:	74fb      	strb	r3, [r7, #19]
 80006d6:	7cfb      	ldrb	r3, [r7, #19]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	88fa      	ldrh	r2, [r7, #6]
 80006dc:	429a      	cmp	r2, r3
 80006de:	d8e7      	bhi.n	80006b0 <user_data_treatment+0x24>
  }
}
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	3718      	adds	r7, #24
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000340 	.word	0x20000340

080006f0 <HAL_UARTEx_RxEventCallback>:
 * @param huart UART handle
 * @param size Number of data available in application reception buffer
 */

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	460b      	mov	r3, r1
 80006fa:	807b      	strh	r3, [r7, #2]
  static uint8_t old_pos = 0;
  uint8_t *p_temp;
  uint8_t i;

  /*Check if number of received data in reception buffer has changed*/
  if (size != old_pos)
 80006fc:	4b3f      	ldr	r3, [pc, #252]	; (80007fc <HAL_UARTEx_RxEventCallback+0x10c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	b29b      	uxth	r3, r3
 8000702:	887a      	ldrh	r2, [r7, #2]
 8000704:	429a      	cmp	r2, r3
 8000706:	d070      	beq.n	80007ea <HAL_UARTEx_RxEventCallback+0xfa>
  {
    /*Check if of index in reception buffer has be increased */
    if (size > old_pos)
 8000708:	4b3c      	ldr	r3, [pc, #240]	; (80007fc <HAL_UARTEx_RxEventCallback+0x10c>)
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	b29b      	uxth	r3, r3
 800070e:	887a      	ldrh	r2, [r7, #2]
 8000710:	429a      	cmp	r2, r3
 8000712:	d91e      	bls.n	8000752 <HAL_UARTEx_RxEventCallback+0x62>
    {
      /*Current position is higher than previous one*/
      num_received_chars = size - old_pos;
 8000714:	887b      	ldrh	r3, [r7, #2]
 8000716:	4a39      	ldr	r2, [pc, #228]	; (80007fc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000718:	7812      	ldrb	r2, [r2, #0]
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	461a      	mov	r2, r3
 800071e:	4b38      	ldr	r3, [pc, #224]	; (8000800 <HAL_UARTEx_RxEventCallback+0x110>)
 8000720:	601a      	str	r2, [r3, #0]
      /*Coppy received data in "User" buffer for evacution*/
      for (i = 0; i < num_received_chars; i++)
 8000722:	2300      	movs	r3, #0
 8000724:	73fb      	strb	r3, [r7, #15]
 8000726:	e00e      	b.n	8000746 <HAL_UARTEx_RxEventCallback+0x56>
      {
        p_buffer_for_user[i] = aRXBufferUser[old_pos + i];
 8000728:	4b34      	ldr	r3, [pc, #208]	; (80007fc <HAL_UARTEx_RxEventCallback+0x10c>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	461a      	mov	r2, r3
 800072e:	7bfb      	ldrb	r3, [r7, #15]
 8000730:	441a      	add	r2, r3
 8000732:	4b34      	ldr	r3, [pc, #208]	; (8000804 <HAL_UARTEx_RxEventCallback+0x114>)
 8000734:	6819      	ldr	r1, [r3, #0]
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	440b      	add	r3, r1
 800073a:	4933      	ldr	r1, [pc, #204]	; (8000808 <HAL_UARTEx_RxEventCallback+0x118>)
 800073c:	5c8a      	ldrb	r2, [r1, r2]
 800073e:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < num_received_chars; i++)
 8000740:	7bfb      	ldrb	r3, [r7, #15]
 8000742:	3301      	adds	r3, #1
 8000744:	73fb      	strb	r3, [r7, #15]
 8000746:	7bfa      	ldrb	r2, [r7, #15]
 8000748:	4b2d      	ldr	r3, [pc, #180]	; (8000800 <HAL_UARTEx_RxEventCallback+0x110>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	429a      	cmp	r2, r3
 800074e:	d3eb      	bcc.n	8000728 <HAL_UARTEx_RxEventCallback+0x38>
 8000750:	e038      	b.n	80007c4 <HAL_UARTEx_RxEventCallback+0xd4>
    }
    else
    {
      /*Current position is lower than previous one: end of buffer*/
      /*First coppy data from current potion till end of buffer*/
      num_received_chars = RX_BUFFER_SIZE - old_pos;
 8000752:	4b2a      	ldr	r3, [pc, #168]	; (80007fc <HAL_UARTEx_RxEventCallback+0x10c>)
 8000754:	781b      	ldrb	r3, [r3, #0]
 8000756:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800075a:	461a      	mov	r2, r3
 800075c:	4b28      	ldr	r3, [pc, #160]	; (8000800 <HAL_UARTEx_RxEventCallback+0x110>)
 800075e:	601a      	str	r2, [r3, #0]
      /*Coppy received data in "User" buffer for evacuation*/
      for (i = 0; i < num_received_chars; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	73fb      	strb	r3, [r7, #15]
 8000764:	e00d      	b.n	8000782 <HAL_UARTEx_RxEventCallback+0x92>
      {
        p_buffer_for_user[i] = aRXBufferUser[i + old_pos];
 8000766:	7bfb      	ldrb	r3, [r7, #15]
 8000768:	4a24      	ldr	r2, [pc, #144]	; (80007fc <HAL_UARTEx_RxEventCallback+0x10c>)
 800076a:	7812      	ldrb	r2, [r2, #0]
 800076c:	441a      	add	r2, r3
 800076e:	4b25      	ldr	r3, [pc, #148]	; (8000804 <HAL_UARTEx_RxEventCallback+0x114>)
 8000770:	6819      	ldr	r1, [r3, #0]
 8000772:	7bfb      	ldrb	r3, [r7, #15]
 8000774:	440b      	add	r3, r1
 8000776:	4924      	ldr	r1, [pc, #144]	; (8000808 <HAL_UARTEx_RxEventCallback+0x118>)
 8000778:	5c8a      	ldrb	r2, [r1, r2]
 800077a:	701a      	strb	r2, [r3, #0]
      for (i = 0; i < num_received_chars; i++)
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	3301      	adds	r3, #1
 8000780:	73fb      	strb	r3, [r7, #15]
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	4b1e      	ldr	r3, [pc, #120]	; (8000800 <HAL_UARTEx_RxEventCallback+0x110>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	429a      	cmp	r2, r3
 800078a:	d3ec      	bcc.n	8000766 <HAL_UARTEx_RxEventCallback+0x76>
      }

      /*Check and continue with beginning of buffer*/
      if (size > 0)
 800078c:	887b      	ldrh	r3, [r7, #2]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d018      	beq.n	80007c4 <HAL_UARTEx_RxEventCallback+0xd4>
      {
        for (i = 0; i < size; i++)
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	e00a      	b.n	80007ae <HAL_UARTEx_RxEventCallback+0xbe>
        {
          p_buffer_for_user[i] = aRXBufferUser[i];
 8000798:	7bfa      	ldrb	r2, [r7, #15]
 800079a:	4b1a      	ldr	r3, [pc, #104]	; (8000804 <HAL_UARTEx_RxEventCallback+0x114>)
 800079c:	6819      	ldr	r1, [r3, #0]
 800079e:	7bfb      	ldrb	r3, [r7, #15]
 80007a0:	440b      	add	r3, r1
 80007a2:	4919      	ldr	r1, [pc, #100]	; (8000808 <HAL_UARTEx_RxEventCallback+0x118>)
 80007a4:	5c8a      	ldrb	r2, [r1, r2]
 80007a6:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < size; i++)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3301      	adds	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	b29b      	uxth	r3, r3
 80007b2:	887a      	ldrh	r2, [r7, #2]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	d8ef      	bhi.n	8000798 <HAL_UARTEx_RxEventCallback+0xa8>
        }
        num_received_chars = num_received_chars + size;
 80007b8:	887a      	ldrh	r2, [r7, #2]
 80007ba:	4b11      	ldr	r3, [pc, #68]	; (8000800 <HAL_UARTEx_RxEventCallback+0x110>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	4413      	add	r3, r2
 80007c0:	4a0f      	ldr	r2, [pc, #60]	; (8000800 <HAL_UARTEx_RxEventCallback+0x110>)
 80007c2:	6013      	str	r3, [r2, #0]
      }
    }
    /*Process received data*/
    user_data_treatment(huart, p_buffer_for_user, num_received_chars);
 80007c4:	4b0f      	ldr	r3, [pc, #60]	; (8000804 <HAL_UARTEx_RxEventCallback+0x114>)
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	4a0d      	ldr	r2, [pc, #52]	; (8000800 <HAL_UARTEx_RxEventCallback+0x110>)
 80007ca:	6812      	ldr	r2, [r2, #0]
 80007cc:	b292      	uxth	r2, r2
 80007ce:	4619      	mov	r1, r3
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff5b 	bl	800068c <user_data_treatment>

    /*Swap buffers for next bytes to be processed*/
    /*p_buffer_for_user <--> p_buffer_for_reception*/
    p_temp = p_buffer_for_user;
 80007d6:	4b0b      	ldr	r3, [pc, #44]	; (8000804 <HAL_UARTEx_RxEventCallback+0x114>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	60bb      	str	r3, [r7, #8]
    p_buffer_for_user = p_buffer_for_reception;
 80007dc:	4b0b      	ldr	r3, [pc, #44]	; (800080c <HAL_UARTEx_RxEventCallback+0x11c>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	4a08      	ldr	r2, [pc, #32]	; (8000804 <HAL_UARTEx_RxEventCallback+0x114>)
 80007e2:	6013      	str	r3, [r2, #0]
    p_buffer_for_reception = p_temp;
 80007e4:	4a09      	ldr	r2, [pc, #36]	; (800080c <HAL_UARTEx_RxEventCallback+0x11c>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	6013      	str	r3, [r2, #0]
  }

  /*Update old_pos*/
  old_pos = size;
 80007ea:	887b      	ldrh	r3, [r7, #2]
 80007ec:	b2da      	uxtb	r2, r3
 80007ee:	4b03      	ldr	r3, [pc, #12]	; (80007fc <HAL_UARTEx_RxEventCallback+0x10c>)
 80007f0:	701a      	strb	r2, [r3, #0]
}
 80007f2:	bf00      	nop
 80007f4:	3710      	adds	r7, #16
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	200003dd 	.word	0x200003dd
 8000800:	200002a4 	.word	0x200002a4
 8000804:	200002a0 	.word	0x200002a0
 8000808:	2000011c 	.word	0x2000011c
 800080c:	2000029c 	.word	0x2000029c

08000810 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000814:	b672      	cpsid	i
}
 8000816:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000818:	e7fe      	b.n	8000818 <Error_Handler+0x8>
	...

0800081c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081c:	b480      	push	{r7}
 800081e:	b085      	sub	sp, #20
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000822:	4b15      	ldr	r3, [pc, #84]	; (8000878 <HAL_MspInit+0x5c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a14      	ldr	r2, [pc, #80]	; (8000878 <HAL_MspInit+0x5c>)
 8000828:	f043 0301 	orr.w	r3, r3, #1
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b12      	ldr	r3, [pc, #72]	; (8000878 <HAL_MspInit+0x5c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0301 	and.w	r3, r3, #1
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <HAL_MspInit+0x5c>)
 800083c:	69db      	ldr	r3, [r3, #28]
 800083e:	4a0e      	ldr	r2, [pc, #56]	; (8000878 <HAL_MspInit+0x5c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	61d3      	str	r3, [r2, #28]
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <HAL_MspInit+0x5c>)
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	607b      	str	r3, [r7, #4]
 8000850:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000852:	4b0a      	ldr	r3, [pc, #40]	; (800087c <HAL_MspInit+0x60>)
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	60fb      	str	r3, [r7, #12]
 8000858:	68fb      	ldr	r3, [r7, #12]
 800085a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
 8000862:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	4a04      	ldr	r2, [pc, #16]	; (800087c <HAL_MspInit+0x60>)
 800086a:	68fb      	ldr	r3, [r7, #12]
 800086c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800086e:	bf00      	nop
 8000870:	3714      	adds	r7, #20
 8000872:	46bd      	mov	sp, r7
 8000874:	bc80      	pop	{r7}
 8000876:	4770      	bx	lr
 8000878:	40021000 	.word	0x40021000
 800087c:	40010000 	.word	0x40010000

08000880 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b088      	sub	sp, #32
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
 8000890:	605a      	str	r2, [r3, #4]
 8000892:	609a      	str	r2, [r3, #8]
 8000894:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a47      	ldr	r2, [pc, #284]	; (80009b8 <HAL_UART_MspInit+0x138>)
 800089c:	4293      	cmp	r3, r2
 800089e:	f040 8086 	bne.w	80009ae <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80008a2:	4b46      	ldr	r3, [pc, #280]	; (80009bc <HAL_UART_MspInit+0x13c>)
 80008a4:	699b      	ldr	r3, [r3, #24]
 80008a6:	4a45      	ldr	r2, [pc, #276]	; (80009bc <HAL_UART_MspInit+0x13c>)
 80008a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ac:	6193      	str	r3, [r2, #24]
 80008ae:	4b43      	ldr	r3, [pc, #268]	; (80009bc <HAL_UART_MspInit+0x13c>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b40      	ldr	r3, [pc, #256]	; (80009bc <HAL_UART_MspInit+0x13c>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	4a3f      	ldr	r2, [pc, #252]	; (80009bc <HAL_UART_MspInit+0x13c>)
 80008c0:	f043 0304 	orr.w	r3, r3, #4
 80008c4:	6193      	str	r3, [r2, #24]
 80008c6:	4b3d      	ldr	r3, [pc, #244]	; (80009bc <HAL_UART_MspInit+0x13c>)
 80008c8:	699b      	ldr	r3, [r3, #24]
 80008ca:	f003 0304 	and.w	r3, r3, #4
 80008ce:	60bb      	str	r3, [r7, #8]
 80008d0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008d6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008dc:	2303      	movs	r3, #3
 80008de:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e0:	f107 0310 	add.w	r3, r7, #16
 80008e4:	4619      	mov	r1, r3
 80008e6:	4836      	ldr	r0, [pc, #216]	; (80009c0 <HAL_UART_MspInit+0x140>)
 80008e8:	f000 fd1a 	bl	8001320 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008f0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008f2:	2300      	movs	r3, #0
 80008f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fa:	f107 0310 	add.w	r3, r7, #16
 80008fe:	4619      	mov	r1, r3
 8000900:	482f      	ldr	r0, [pc, #188]	; (80009c0 <HAL_UART_MspInit+0x140>)
 8000902:	f000 fd0d 	bl	8001320 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000906:	4b2f      	ldr	r3, [pc, #188]	; (80009c4 <HAL_UART_MspInit+0x144>)
 8000908:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <HAL_UART_MspInit+0x148>)
 800090a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800090c:	4b2d      	ldr	r3, [pc, #180]	; (80009c4 <HAL_UART_MspInit+0x144>)
 800090e:	2200      	movs	r2, #0
 8000910:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000912:	4b2c      	ldr	r3, [pc, #176]	; (80009c4 <HAL_UART_MspInit+0x144>)
 8000914:	2200      	movs	r2, #0
 8000916:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000918:	4b2a      	ldr	r3, [pc, #168]	; (80009c4 <HAL_UART_MspInit+0x144>)
 800091a:	2280      	movs	r2, #128	; 0x80
 800091c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800091e:	4b29      	ldr	r3, [pc, #164]	; (80009c4 <HAL_UART_MspInit+0x144>)
 8000920:	2200      	movs	r2, #0
 8000922:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000924:	4b27      	ldr	r3, [pc, #156]	; (80009c4 <HAL_UART_MspInit+0x144>)
 8000926:	2200      	movs	r2, #0
 8000928:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800092a:	4b26      	ldr	r3, [pc, #152]	; (80009c4 <HAL_UART_MspInit+0x144>)
 800092c:	2220      	movs	r2, #32
 800092e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000930:	4b24      	ldr	r3, [pc, #144]	; (80009c4 <HAL_UART_MspInit+0x144>)
 8000932:	2200      	movs	r2, #0
 8000934:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000936:	4823      	ldr	r0, [pc, #140]	; (80009c4 <HAL_UART_MspInit+0x144>)
 8000938:	f000 fa54 	bl	8000de4 <HAL_DMA_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8000942:	f7ff ff65 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	4a1e      	ldr	r2, [pc, #120]	; (80009c4 <HAL_UART_MspInit+0x144>)
 800094a:	639a      	str	r2, [r3, #56]	; 0x38
 800094c:	4a1d      	ldr	r2, [pc, #116]	; (80009c4 <HAL_UART_MspInit+0x144>)
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8000952:	4b1e      	ldr	r3, [pc, #120]	; (80009cc <HAL_UART_MspInit+0x14c>)
 8000954:	4a1e      	ldr	r2, [pc, #120]	; (80009d0 <HAL_UART_MspInit+0x150>)
 8000956:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000958:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_UART_MspInit+0x14c>)
 800095a:	2210      	movs	r2, #16
 800095c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800095e:	4b1b      	ldr	r3, [pc, #108]	; (80009cc <HAL_UART_MspInit+0x14c>)
 8000960:	2200      	movs	r2, #0
 8000962:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000964:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_UART_MspInit+0x14c>)
 8000966:	2280      	movs	r2, #128	; 0x80
 8000968:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800096a:	4b18      	ldr	r3, [pc, #96]	; (80009cc <HAL_UART_MspInit+0x14c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000970:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_UART_MspInit+0x14c>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <HAL_UART_MspInit+0x14c>)
 8000978:	2220      	movs	r2, #32
 800097a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800097c:	4b13      	ldr	r3, [pc, #76]	; (80009cc <HAL_UART_MspInit+0x14c>)
 800097e:	2200      	movs	r2, #0
 8000980:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000982:	4812      	ldr	r0, [pc, #72]	; (80009cc <HAL_UART_MspInit+0x14c>)
 8000984:	f000 fa2e 	bl	8000de4 <HAL_DMA_Init>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800098e:	f7ff ff3f 	bl	8000810 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4a0d      	ldr	r2, [pc, #52]	; (80009cc <HAL_UART_MspInit+0x14c>)
 8000996:	635a      	str	r2, [r3, #52]	; 0x34
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <HAL_UART_MspInit+0x14c>)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800099e:	2200      	movs	r2, #0
 80009a0:	2101      	movs	r1, #1
 80009a2:	2025      	movs	r0, #37	; 0x25
 80009a4:	f000 f9e7 	bl	8000d76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009a8:	2025      	movs	r0, #37	; 0x25
 80009aa:	f000 fa00 	bl	8000dae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80009ae:	bf00      	nop
 80009b0:	3720      	adds	r7, #32
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
 80009b6:	bf00      	nop
 80009b8:	40013800 	.word	0x40013800
 80009bc:	40021000 	.word	0x40021000
 80009c0:	40010800 	.word	0x40010800
 80009c4:	20000094 	.word	0x20000094
 80009c8:	40020058 	.word	0x40020058
 80009cc:	200000d8 	.word	0x200000d8
 80009d0:	40020044 	.word	0x40020044

080009d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d8:	e7fe      	b.n	80009d8 <NMI_Handler+0x4>

080009da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009de:	e7fe      	b.n	80009de <HardFault_Handler+0x4>

080009e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <MemManage_Handler+0x4>

080009e6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e6:	b480      	push	{r7}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ea:	e7fe      	b.n	80009ea <BusFault_Handler+0x4>

080009ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009ec:	b480      	push	{r7}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009f0:	e7fe      	b.n	80009f0 <UsageFault_Handler+0x4>

080009f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009f2:	b480      	push	{r7}
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f6:	bf00      	nop
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bc80      	pop	{r7}
 80009fc:	4770      	bx	lr

080009fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bc80      	pop	{r7}
 8000a14:	4770      	bx	lr

08000a16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1a:	f000 f8b9 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a1e:	bf00      	nop
 8000a20:	bd80      	pop	{r7, pc}
	...

08000a24 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <DMA1_Channel4_IRQHandler+0x10>)
 8000a2a:	f000 fb45 	bl	80010b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	200000d8 	.word	0x200000d8

08000a38 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000a3c:	4802      	ldr	r0, [pc, #8]	; (8000a48 <DMA1_Channel5_IRQHandler+0x10>)
 8000a3e:	f000 fb3b 	bl	80010b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	20000094 	.word	0x20000094

08000a4c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000a50:	4802      	ldr	r0, [pc, #8]	; (8000a5c <USART1_IRQHandler+0x10>)
 8000a52:	f001 fb31 	bl	80020b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000a56:	bf00      	nop
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	20000050 	.word	0x20000050

08000a60 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a64:	bf00      	nop
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bc80      	pop	{r7}
 8000a6a:	4770      	bx	lr

08000a6c <uart_transmit_string>:
 *
 * @param *data
 * @return uart_status
 */
uart_status uart_transmit_string(uint8_t *data)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	uart_status status = UART_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	73fb      	strb	r3, [r7, #15]
	uint16_t length = 0u;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	81bb      	strh	r3, [r7, #12]

	/* Check the length of string */
	while ('\0' != data[length])
 8000a7c:	e002      	b.n	8000a84 <uart_transmit_string+0x18>
	{
	  length++;
 8000a7e:	89bb      	ldrh	r3, [r7, #12]
 8000a80:	3301      	adds	r3, #1
 8000a82:	81bb      	strh	r3, [r7, #12]
	while ('\0' != data[length])
 8000a84:	89bb      	ldrh	r3, [r7, #12]
 8000a86:	687a      	ldr	r2, [r7, #4]
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d1f6      	bne.n	8000a7e <uart_transmit_string+0x12>
	}

	if (HAL_UART_Transmit(&huart1, data, length, UART_TIMEOUT) == HAL_OK)
 8000a90:	89ba      	ldrh	r2, [r7, #12]
 8000a92:	f04f 33ff 	mov.w	r3, #4294967295
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <uart_transmit_string+0x48>)
 8000a9a:	f001 fa2c 	bl	8001ef6 <HAL_UART_Transmit>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d101      	bne.n	8000aa8 <uart_transmit_string+0x3c>
	{
	    status = UART_OK;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8000aa8:	7bfb      	ldrb	r3, [r7, #15]

}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000050 	.word	0x20000050

08000ab8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab8:	480c      	ldr	r0, [pc, #48]	; (8000aec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000aba:	490d      	ldr	r1, [pc, #52]	; (8000af0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000abc:	4a0d      	ldr	r2, [pc, #52]	; (8000af4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0a      	ldr	r2, [pc, #40]	; (8000af8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ad0:	4c0a      	ldr	r4, [pc, #40]	; (8000afc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ade:	f7ff ffbf 	bl	8000a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f002 f809 	bl	8002af8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ae6:	f7ff fc59 	bl	800039c <main>
  bx lr
 8000aea:	4770      	bx	lr
  ldr r0, =_sdata
 8000aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af0:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8000af4:	08002ba0 	.word	0x08002ba0
  ldr r2, =_sbss
 8000af8:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8000afc:	200003e4 	.word	0x200003e4

08000b00 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b00:	e7fe      	b.n	8000b00 <ADC1_2_IRQHandler>
	...

08000b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x28>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x28>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f923 	bl	8000d60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f7ff fe7c 	bl	800081c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40022000 	.word	0x40022000

08000b30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f93b 	bl	8000dca <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f903 	bl	8000d76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000028 	.word	0x20000028
 8000b88:	20000030 	.word	0x20000030
 8000b8c:	2000002c 	.word	0x2000002c

08000b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <HAL_IncTick+0x1c>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a03      	ldr	r2, [pc, #12]	; (8000bb0 <HAL_IncTick+0x20>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bc80      	pop	{r7}
 8000baa:	4770      	bx	lr
 8000bac:	20000030 	.word	0x20000030
 8000bb0:	200003e0 	.word	0x200003e0

08000bb4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <HAL_GetTick+0x10>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bc80      	pop	{r7}
 8000bc2:	4770      	bx	lr
 8000bc4:	200003e0 	.word	0x200003e0

08000bc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	b085      	sub	sp, #20
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	f003 0307 	and.w	r3, r3, #7
 8000bd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bda:	68db      	ldr	r3, [r3, #12]
 8000bdc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bde:	68ba      	ldr	r2, [r7, #8]
 8000be0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be4:	4013      	ands	r3, r2
 8000be6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bec:	68bb      	ldr	r3, [r7, #8]
 8000bee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x44>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bc80      	pop	{r7}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	e000ed00 	.word	0xe000ed00

08000c10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c14:	4b04      	ldr	r3, [pc, #16]	; (8000c28 <__NVIC_GetPriorityGrouping+0x18>)
 8000c16:	68db      	ldr	r3, [r3, #12]
 8000c18:	0a1b      	lsrs	r3, r3, #8
 8000c1a:	f003 0307 	and.w	r3, r3, #7
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b083      	sub	sp, #12
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	db0b      	blt.n	8000c56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4906      	ldr	r1, [pc, #24]	; (8000c60 <__NVIC_EnableIRQ+0x34>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bc80      	pop	{r7}
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bc80      	pop	{r7}
 8000d1a:	4770      	bx	lr

08000d1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	3b01      	subs	r3, #1
 8000d28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d2c:	d301      	bcc.n	8000d32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e00f      	b.n	8000d52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <SysTick_Config+0x40>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3a:	210f      	movs	r1, #15
 8000d3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d40:	f7ff ff90 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d44:	4b05      	ldr	r3, [pc, #20]	; (8000d5c <SysTick_Config+0x40>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4a:	4b04      	ldr	r3, [pc, #16]	; (8000d5c <SysTick_Config+0x40>)
 8000d4c:	2207      	movs	r2, #7
 8000d4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	e000e010 	.word	0xe000e010

08000d60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d68:	6878      	ldr	r0, [r7, #4]
 8000d6a:	f7ff ff2d 	bl	8000bc8 <__NVIC_SetPriorityGrouping>
}
 8000d6e:	bf00      	nop
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}

08000d76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d76:	b580      	push	{r7, lr}
 8000d78:	b086      	sub	sp, #24
 8000d7a:	af00      	add	r7, sp, #0
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	60b9      	str	r1, [r7, #8]
 8000d80:	607a      	str	r2, [r7, #4]
 8000d82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d88:	f7ff ff42 	bl	8000c10 <__NVIC_GetPriorityGrouping>
 8000d8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	68b9      	ldr	r1, [r7, #8]
 8000d92:	6978      	ldr	r0, [r7, #20]
 8000d94:	f7ff ff90 	bl	8000cb8 <NVIC_EncodePriority>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d9e:	4611      	mov	r1, r2
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff ff5f 	bl	8000c64 <__NVIC_SetPriority>
}
 8000da6:	bf00      	nop
 8000da8:	3718      	adds	r7, #24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b082      	sub	sp, #8
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000db8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff35 	bl	8000c2c <__NVIC_EnableIRQ>
}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b082      	sub	sp, #8
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd2:	6878      	ldr	r0, [r7, #4]
 8000dd4:	f7ff ffa2 	bl	8000d1c <SysTick_Config>
 8000dd8:	4603      	mov	r3, r0
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3708      	adds	r7, #8
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
	...

08000de4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b085      	sub	sp, #20
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d101      	bne.n	8000dfa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
 8000df8:	e043      	b.n	8000e82 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <HAL_DMA_Init+0xa8>)
 8000e02:	4413      	add	r3, r2
 8000e04:	4a22      	ldr	r2, [pc, #136]	; (8000e90 <HAL_DMA_Init+0xac>)
 8000e06:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0a:	091b      	lsrs	r3, r3, #4
 8000e0c:	009a      	lsls	r2, r3, #2
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a1f      	ldr	r2, [pc, #124]	; (8000e94 <HAL_DMA_Init+0xb0>)
 8000e16:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2202      	movs	r2, #2
 8000e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000e2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000e32:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000e3c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	68db      	ldr	r3, [r3, #12]
 8000e42:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000e48:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	695b      	ldr	r3, [r3, #20]
 8000e4e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000e54:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	69db      	ldr	r3, [r3, #28]
 8000e5a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4313      	orrs	r3, r2
 8000e60:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	68fa      	ldr	r2, [r7, #12]
 8000e68:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2201      	movs	r2, #1
 8000e74:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000e80:	2300      	movs	r3, #0
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3714      	adds	r7, #20
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	bffdfff8 	.word	0xbffdfff8
 8000e90:	cccccccd 	.word	0xcccccccd
 8000e94:	40020000 	.word	0x40020000

08000e98 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	607a      	str	r2, [r7, #4]
 8000ea4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <HAL_DMA_Start_IT+0x20>
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	e04a      	b.n	8000f4e <HAL_DMA_Start_IT+0xb6>
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	2201      	movs	r2, #1
 8000ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d13a      	bne.n	8000f40 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	681a      	ldr	r2, [r3, #0]
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f022 0201 	bic.w	r2, r2, #1
 8000ee6:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	68b9      	ldr	r1, [r7, #8]
 8000eee:	68f8      	ldr	r0, [r7, #12]
 8000ef0:	f000 f9e8 	bl	80012c4 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d008      	beq.n	8000f0e <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	681a      	ldr	r2, [r3, #0]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f042 020e 	orr.w	r2, r2, #14
 8000f0a:	601a      	str	r2, [r3, #0]
 8000f0c:	e00f      	b.n	8000f2e <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	681a      	ldr	r2, [r3, #0]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f022 0204 	bic.w	r2, r2, #4
 8000f1c:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	681a      	ldr	r2, [r3, #0]
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f042 020a 	orr.w	r2, r2, #10
 8000f2c:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000f2e:	68fb      	ldr	r3, [r7, #12]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f042 0201 	orr.w	r2, r2, #1
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	e005      	b.n	8000f4c <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	2200      	movs	r2, #0
 8000f44:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000f4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3718      	adds	r7, #24
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}

08000f56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000f56:	b480      	push	{r7}
 8000f58:	b085      	sub	sp, #20
 8000f5a:	af00      	add	r7, sp, #0
 8000f5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d008      	beq.n	8000f7e <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2204      	movs	r2, #4
 8000f70:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000f7a:	2301      	movs	r3, #1
 8000f7c:	e020      	b.n	8000fc0 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	681a      	ldr	r2, [r3, #0]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f022 020e 	bic.w	r2, r2, #14
 8000f8c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f022 0201 	bic.w	r2, r2, #1
 8000f9c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8000fac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2200      	movs	r2, #0
 8000fba:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3714      	adds	r7, #20
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bc80      	pop	{r7}
 8000fc8:	4770      	bx	lr
	...

08000fcc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d005      	beq.n	8000fee <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	73fb      	strb	r3, [r7, #15]
 8000fec:	e051      	b.n	8001092 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681a      	ldr	r2, [r3, #0]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 020e 	bic.w	r2, r2, #14
 8000ffc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681a      	ldr	r2, [r3, #0]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 0201 	bic.w	r2, r2, #1
 800100c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a22      	ldr	r2, [pc, #136]	; (800109c <HAL_DMA_Abort_IT+0xd0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d029      	beq.n	800106c <HAL_DMA_Abort_IT+0xa0>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <HAL_DMA_Abort_IT+0xd4>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d022      	beq.n	8001068 <HAL_DMA_Abort_IT+0x9c>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <HAL_DMA_Abort_IT+0xd8>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d01a      	beq.n	8001062 <HAL_DMA_Abort_IT+0x96>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a1d      	ldr	r2, [pc, #116]	; (80010a8 <HAL_DMA_Abort_IT+0xdc>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d012      	beq.n	800105c <HAL_DMA_Abort_IT+0x90>
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a1c      	ldr	r2, [pc, #112]	; (80010ac <HAL_DMA_Abort_IT+0xe0>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d00a      	beq.n	8001056 <HAL_DMA_Abort_IT+0x8a>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4a1a      	ldr	r2, [pc, #104]	; (80010b0 <HAL_DMA_Abort_IT+0xe4>)
 8001046:	4293      	cmp	r3, r2
 8001048:	d102      	bne.n	8001050 <HAL_DMA_Abort_IT+0x84>
 800104a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800104e:	e00e      	b.n	800106e <HAL_DMA_Abort_IT+0xa2>
 8001050:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001054:	e00b      	b.n	800106e <HAL_DMA_Abort_IT+0xa2>
 8001056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800105a:	e008      	b.n	800106e <HAL_DMA_Abort_IT+0xa2>
 800105c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001060:	e005      	b.n	800106e <HAL_DMA_Abort_IT+0xa2>
 8001062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001066:	e002      	b.n	800106e <HAL_DMA_Abort_IT+0xa2>
 8001068:	2310      	movs	r3, #16
 800106a:	e000      	b.n	800106e <HAL_DMA_Abort_IT+0xa2>
 800106c:	2301      	movs	r3, #1
 800106e:	4a11      	ldr	r2, [pc, #68]	; (80010b4 <HAL_DMA_Abort_IT+0xe8>)
 8001070:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001086:	2b00      	cmp	r3, #0
 8001088:	d003      	beq.n	8001092 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	4798      	blx	r3
    } 
  }
  return status;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40020008 	.word	0x40020008
 80010a0:	4002001c 	.word	0x4002001c
 80010a4:	40020030 	.word	0x40020030
 80010a8:	40020044 	.word	0x40020044
 80010ac:	40020058 	.word	0x40020058
 80010b0:	4002006c 	.word	0x4002006c
 80010b4:	40020000 	.word	0x40020000

080010b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	2204      	movs	r2, #4
 80010d6:	409a      	lsls	r2, r3
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	4013      	ands	r3, r2
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d04f      	beq.n	8001180 <HAL_DMA_IRQHandler+0xc8>
 80010e0:	68bb      	ldr	r3, [r7, #8]
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d04a      	beq.n	8001180 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0320 	and.w	r3, r3, #32
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d107      	bne.n	8001108 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f022 0204 	bic.w	r2, r2, #4
 8001106:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a66      	ldr	r2, [pc, #408]	; (80012a8 <HAL_DMA_IRQHandler+0x1f0>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d029      	beq.n	8001166 <HAL_DMA_IRQHandler+0xae>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a65      	ldr	r2, [pc, #404]	; (80012ac <HAL_DMA_IRQHandler+0x1f4>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d022      	beq.n	8001162 <HAL_DMA_IRQHandler+0xaa>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a63      	ldr	r2, [pc, #396]	; (80012b0 <HAL_DMA_IRQHandler+0x1f8>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d01a      	beq.n	800115c <HAL_DMA_IRQHandler+0xa4>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a62      	ldr	r2, [pc, #392]	; (80012b4 <HAL_DMA_IRQHandler+0x1fc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d012      	beq.n	8001156 <HAL_DMA_IRQHandler+0x9e>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a60      	ldr	r2, [pc, #384]	; (80012b8 <HAL_DMA_IRQHandler+0x200>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d00a      	beq.n	8001150 <HAL_DMA_IRQHandler+0x98>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4a5f      	ldr	r2, [pc, #380]	; (80012bc <HAL_DMA_IRQHandler+0x204>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d102      	bne.n	800114a <HAL_DMA_IRQHandler+0x92>
 8001144:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001148:	e00e      	b.n	8001168 <HAL_DMA_IRQHandler+0xb0>
 800114a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800114e:	e00b      	b.n	8001168 <HAL_DMA_IRQHandler+0xb0>
 8001150:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001154:	e008      	b.n	8001168 <HAL_DMA_IRQHandler+0xb0>
 8001156:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800115a:	e005      	b.n	8001168 <HAL_DMA_IRQHandler+0xb0>
 800115c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001160:	e002      	b.n	8001168 <HAL_DMA_IRQHandler+0xb0>
 8001162:	2340      	movs	r3, #64	; 0x40
 8001164:	e000      	b.n	8001168 <HAL_DMA_IRQHandler+0xb0>
 8001166:	2304      	movs	r3, #4
 8001168:	4a55      	ldr	r2, [pc, #340]	; (80012c0 <HAL_DMA_IRQHandler+0x208>)
 800116a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 8094 	beq.w	800129e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800117e:	e08e      	b.n	800129e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001184:	2202      	movs	r2, #2
 8001186:	409a      	lsls	r2, r3
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	4013      	ands	r3, r2
 800118c:	2b00      	cmp	r3, #0
 800118e:	d056      	beq.n	800123e <HAL_DMA_IRQHandler+0x186>
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d051      	beq.n	800123e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0320 	and.w	r3, r3, #32
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d10b      	bne.n	80011c0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f022 020a 	bic.w	r2, r2, #10
 80011b6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2201      	movs	r2, #1
 80011bc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a38      	ldr	r2, [pc, #224]	; (80012a8 <HAL_DMA_IRQHandler+0x1f0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d029      	beq.n	800121e <HAL_DMA_IRQHandler+0x166>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a37      	ldr	r2, [pc, #220]	; (80012ac <HAL_DMA_IRQHandler+0x1f4>)
 80011d0:	4293      	cmp	r3, r2
 80011d2:	d022      	beq.n	800121a <HAL_DMA_IRQHandler+0x162>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	4a35      	ldr	r2, [pc, #212]	; (80012b0 <HAL_DMA_IRQHandler+0x1f8>)
 80011da:	4293      	cmp	r3, r2
 80011dc:	d01a      	beq.n	8001214 <HAL_DMA_IRQHandler+0x15c>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	4a34      	ldr	r2, [pc, #208]	; (80012b4 <HAL_DMA_IRQHandler+0x1fc>)
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d012      	beq.n	800120e <HAL_DMA_IRQHandler+0x156>
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a32      	ldr	r2, [pc, #200]	; (80012b8 <HAL_DMA_IRQHandler+0x200>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d00a      	beq.n	8001208 <HAL_DMA_IRQHandler+0x150>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a31      	ldr	r2, [pc, #196]	; (80012bc <HAL_DMA_IRQHandler+0x204>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d102      	bne.n	8001202 <HAL_DMA_IRQHandler+0x14a>
 80011fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001200:	e00e      	b.n	8001220 <HAL_DMA_IRQHandler+0x168>
 8001202:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001206:	e00b      	b.n	8001220 <HAL_DMA_IRQHandler+0x168>
 8001208:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800120c:	e008      	b.n	8001220 <HAL_DMA_IRQHandler+0x168>
 800120e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001212:	e005      	b.n	8001220 <HAL_DMA_IRQHandler+0x168>
 8001214:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001218:	e002      	b.n	8001220 <HAL_DMA_IRQHandler+0x168>
 800121a:	2320      	movs	r3, #32
 800121c:	e000      	b.n	8001220 <HAL_DMA_IRQHandler+0x168>
 800121e:	2302      	movs	r3, #2
 8001220:	4a27      	ldr	r2, [pc, #156]	; (80012c0 <HAL_DMA_IRQHandler+0x208>)
 8001222:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001230:	2b00      	cmp	r3, #0
 8001232:	d034      	beq.n	800129e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800123c:	e02f      	b.n	800129e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001242:	2208      	movs	r2, #8
 8001244:	409a      	lsls	r2, r3
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	4013      	ands	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d028      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x1e8>
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f003 0308 	and.w	r3, r3, #8
 8001254:	2b00      	cmp	r3, #0
 8001256:	d023      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 020e 	bic.w	r2, r2, #14
 8001266:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001270:	2101      	movs	r1, #1
 8001272:	fa01 f202 	lsl.w	r2, r1, r2
 8001276:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2201      	movs	r2, #1
 800127c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2201      	movs	r2, #1
 8001282:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001292:	2b00      	cmp	r3, #0
 8001294:	d004      	beq.n	80012a0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	4798      	blx	r3
    }
  }
  return;
 800129e:	bf00      	nop
 80012a0:	bf00      	nop
}
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	40020008 	.word	0x40020008
 80012ac:	4002001c 	.word	0x4002001c
 80012b0:	40020030 	.word	0x40020030
 80012b4:	40020044 	.word	0x40020044
 80012b8:	40020058 	.word	0x40020058
 80012bc:	4002006c 	.word	0x4002006c
 80012c0:	40020000 	.word	0x40020000

080012c4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	60f8      	str	r0, [r7, #12]
 80012cc:	60b9      	str	r1, [r7, #8]
 80012ce:	607a      	str	r2, [r7, #4]
 80012d0:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	683a      	ldr	r2, [r7, #0]
 80012e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b10      	cmp	r3, #16
 80012f0:	d108      	bne.n	8001304 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	687a      	ldr	r2, [r7, #4]
 80012f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	68ba      	ldr	r2, [r7, #8]
 8001300:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001302:	e007      	b.n	8001314 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68ba      	ldr	r2, [r7, #8]
 800130a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	60da      	str	r2, [r3, #12]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr
	...

08001320 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001320:	b480      	push	{r7}
 8001322:	b08b      	sub	sp, #44	; 0x2c
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
 8001328:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800132a:	2300      	movs	r3, #0
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800132e:	2300      	movs	r3, #0
 8001330:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001332:	e169      	b.n	8001608 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001334:	2201      	movs	r2, #1
 8001336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001338:	fa02 f303 	lsl.w	r3, r2, r3
 800133c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	4013      	ands	r3, r2
 8001346:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001348:	69ba      	ldr	r2, [r7, #24]
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	429a      	cmp	r2, r3
 800134e:	f040 8158 	bne.w	8001602 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4a9a      	ldr	r2, [pc, #616]	; (80015c0 <HAL_GPIO_Init+0x2a0>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d05e      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800135c:	4a98      	ldr	r2, [pc, #608]	; (80015c0 <HAL_GPIO_Init+0x2a0>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d875      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001362:	4a98      	ldr	r2, [pc, #608]	; (80015c4 <HAL_GPIO_Init+0x2a4>)
 8001364:	4293      	cmp	r3, r2
 8001366:	d058      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001368:	4a96      	ldr	r2, [pc, #600]	; (80015c4 <HAL_GPIO_Init+0x2a4>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d86f      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800136e:	4a96      	ldr	r2, [pc, #600]	; (80015c8 <HAL_GPIO_Init+0x2a8>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d052      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001374:	4a94      	ldr	r2, [pc, #592]	; (80015c8 <HAL_GPIO_Init+0x2a8>)
 8001376:	4293      	cmp	r3, r2
 8001378:	d869      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800137a:	4a94      	ldr	r2, [pc, #592]	; (80015cc <HAL_GPIO_Init+0x2ac>)
 800137c:	4293      	cmp	r3, r2
 800137e:	d04c      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 8001380:	4a92      	ldr	r2, [pc, #584]	; (80015cc <HAL_GPIO_Init+0x2ac>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d863      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001386:	4a92      	ldr	r2, [pc, #584]	; (80015d0 <HAL_GPIO_Init+0x2b0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d046      	beq.n	800141a <HAL_GPIO_Init+0xfa>
 800138c:	4a90      	ldr	r2, [pc, #576]	; (80015d0 <HAL_GPIO_Init+0x2b0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d85d      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 8001392:	2b12      	cmp	r3, #18
 8001394:	d82a      	bhi.n	80013ec <HAL_GPIO_Init+0xcc>
 8001396:	2b12      	cmp	r3, #18
 8001398:	d859      	bhi.n	800144e <HAL_GPIO_Init+0x12e>
 800139a:	a201      	add	r2, pc, #4	; (adr r2, 80013a0 <HAL_GPIO_Init+0x80>)
 800139c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013a0:	0800141b 	.word	0x0800141b
 80013a4:	080013f5 	.word	0x080013f5
 80013a8:	08001407 	.word	0x08001407
 80013ac:	08001449 	.word	0x08001449
 80013b0:	0800144f 	.word	0x0800144f
 80013b4:	0800144f 	.word	0x0800144f
 80013b8:	0800144f 	.word	0x0800144f
 80013bc:	0800144f 	.word	0x0800144f
 80013c0:	0800144f 	.word	0x0800144f
 80013c4:	0800144f 	.word	0x0800144f
 80013c8:	0800144f 	.word	0x0800144f
 80013cc:	0800144f 	.word	0x0800144f
 80013d0:	0800144f 	.word	0x0800144f
 80013d4:	0800144f 	.word	0x0800144f
 80013d8:	0800144f 	.word	0x0800144f
 80013dc:	0800144f 	.word	0x0800144f
 80013e0:	0800144f 	.word	0x0800144f
 80013e4:	080013fd 	.word	0x080013fd
 80013e8:	08001411 	.word	0x08001411
 80013ec:	4a79      	ldr	r2, [pc, #484]	; (80015d4 <HAL_GPIO_Init+0x2b4>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d013      	beq.n	800141a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80013f2:	e02c      	b.n	800144e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	68db      	ldr	r3, [r3, #12]
 80013f8:	623b      	str	r3, [r7, #32]
          break;
 80013fa:	e029      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	68db      	ldr	r3, [r3, #12]
 8001400:	3304      	adds	r3, #4
 8001402:	623b      	str	r3, [r7, #32]
          break;
 8001404:	e024      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	68db      	ldr	r3, [r3, #12]
 800140a:	3308      	adds	r3, #8
 800140c:	623b      	str	r3, [r7, #32]
          break;
 800140e:	e01f      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	330c      	adds	r3, #12
 8001416:	623b      	str	r3, [r7, #32]
          break;
 8001418:	e01a      	b.n	8001450 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	689b      	ldr	r3, [r3, #8]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d102      	bne.n	8001428 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001422:	2304      	movs	r3, #4
 8001424:	623b      	str	r3, [r7, #32]
          break;
 8001426:	e013      	b.n	8001450 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	2b01      	cmp	r3, #1
 800142e:	d105      	bne.n	800143c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001430:	2308      	movs	r3, #8
 8001432:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	69fa      	ldr	r2, [r7, #28]
 8001438:	611a      	str	r2, [r3, #16]
          break;
 800143a:	e009      	b.n	8001450 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800143c:	2308      	movs	r3, #8
 800143e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69fa      	ldr	r2, [r7, #28]
 8001444:	615a      	str	r2, [r3, #20]
          break;
 8001446:	e003      	b.n	8001450 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001448:	2300      	movs	r3, #0
 800144a:	623b      	str	r3, [r7, #32]
          break;
 800144c:	e000      	b.n	8001450 <HAL_GPIO_Init+0x130>
          break;
 800144e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2bff      	cmp	r3, #255	; 0xff
 8001454:	d801      	bhi.n	800145a <HAL_GPIO_Init+0x13a>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	e001      	b.n	800145e <HAL_GPIO_Init+0x13e>
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	3304      	adds	r3, #4
 800145e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2bff      	cmp	r3, #255	; 0xff
 8001464:	d802      	bhi.n	800146c <HAL_GPIO_Init+0x14c>
 8001466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001468:	009b      	lsls	r3, r3, #2
 800146a:	e002      	b.n	8001472 <HAL_GPIO_Init+0x152>
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	3b08      	subs	r3, #8
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001474:	697b      	ldr	r3, [r7, #20]
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	210f      	movs	r1, #15
 800147a:	693b      	ldr	r3, [r7, #16]
 800147c:	fa01 f303 	lsl.w	r3, r1, r3
 8001480:	43db      	mvns	r3, r3
 8001482:	401a      	ands	r2, r3
 8001484:	6a39      	ldr	r1, [r7, #32]
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	431a      	orrs	r2, r3
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800149a:	2b00      	cmp	r3, #0
 800149c:	f000 80b1 	beq.w	8001602 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014a0:	4b4d      	ldr	r3, [pc, #308]	; (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014a2:	699b      	ldr	r3, [r3, #24]
 80014a4:	4a4c      	ldr	r2, [pc, #304]	; (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014a6:	f043 0301 	orr.w	r3, r3, #1
 80014aa:	6193      	str	r3, [r2, #24]
 80014ac:	4b4a      	ldr	r3, [pc, #296]	; (80015d8 <HAL_GPIO_Init+0x2b8>)
 80014ae:	699b      	ldr	r3, [r3, #24]
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014b8:	4a48      	ldr	r2, [pc, #288]	; (80015dc <HAL_GPIO_Init+0x2bc>)
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	3302      	adds	r3, #2
 80014c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	220f      	movs	r2, #15
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	43db      	mvns	r3, r3
 80014d6:	68fa      	ldr	r2, [r7, #12]
 80014d8:	4013      	ands	r3, r2
 80014da:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4a40      	ldr	r2, [pc, #256]	; (80015e0 <HAL_GPIO_Init+0x2c0>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d013      	beq.n	800150c <HAL_GPIO_Init+0x1ec>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	4a3f      	ldr	r2, [pc, #252]	; (80015e4 <HAL_GPIO_Init+0x2c4>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d00d      	beq.n	8001508 <HAL_GPIO_Init+0x1e8>
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	4a3e      	ldr	r2, [pc, #248]	; (80015e8 <HAL_GPIO_Init+0x2c8>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	d007      	beq.n	8001504 <HAL_GPIO_Init+0x1e4>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a3d      	ldr	r2, [pc, #244]	; (80015ec <HAL_GPIO_Init+0x2cc>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d101      	bne.n	8001500 <HAL_GPIO_Init+0x1e0>
 80014fc:	2303      	movs	r3, #3
 80014fe:	e006      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 8001500:	2304      	movs	r3, #4
 8001502:	e004      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 8001504:	2302      	movs	r3, #2
 8001506:	e002      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_GPIO_Init+0x1ee>
 800150c:	2300      	movs	r3, #0
 800150e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001510:	f002 0203 	and.w	r2, r2, #3
 8001514:	0092      	lsls	r2, r2, #2
 8001516:	4093      	lsls	r3, r2
 8001518:	68fa      	ldr	r2, [r7, #12]
 800151a:	4313      	orrs	r3, r2
 800151c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800151e:	492f      	ldr	r1, [pc, #188]	; (80015dc <HAL_GPIO_Init+0x2bc>)
 8001520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001522:	089b      	lsrs	r3, r3, #2
 8001524:	3302      	adds	r3, #2
 8001526:	68fa      	ldr	r2, [r7, #12]
 8001528:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001534:	2b00      	cmp	r3, #0
 8001536:	d006      	beq.n	8001546 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001538:	4b2d      	ldr	r3, [pc, #180]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800153a:	681a      	ldr	r2, [r3, #0]
 800153c:	492c      	ldr	r1, [pc, #176]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800153e:	69bb      	ldr	r3, [r7, #24]
 8001540:	4313      	orrs	r3, r2
 8001542:	600b      	str	r3, [r1, #0]
 8001544:	e006      	b.n	8001554 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001546:	4b2a      	ldr	r3, [pc, #168]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	43db      	mvns	r3, r3
 800154e:	4928      	ldr	r1, [pc, #160]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001550:	4013      	ands	r3, r2
 8001552:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d006      	beq.n	800156e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001560:	4b23      	ldr	r3, [pc, #140]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001562:	685a      	ldr	r2, [r3, #4]
 8001564:	4922      	ldr	r1, [pc, #136]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	4313      	orrs	r3, r2
 800156a:	604b      	str	r3, [r1, #4]
 800156c:	e006      	b.n	800157c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800156e:	4b20      	ldr	r3, [pc, #128]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001570:	685a      	ldr	r2, [r3, #4]
 8001572:	69bb      	ldr	r3, [r7, #24]
 8001574:	43db      	mvns	r3, r3
 8001576:	491e      	ldr	r1, [pc, #120]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001578:	4013      	ands	r3, r2
 800157a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001584:	2b00      	cmp	r3, #0
 8001586:	d006      	beq.n	8001596 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001588:	4b19      	ldr	r3, [pc, #100]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	4918      	ldr	r1, [pc, #96]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
 8001594:	e006      	b.n	80015a4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001596:	4b16      	ldr	r3, [pc, #88]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 8001598:	689a      	ldr	r2, [r3, #8]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	43db      	mvns	r3, r3
 800159e:	4914      	ldr	r1, [pc, #80]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80015a0:	4013      	ands	r3, r2
 80015a2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d021      	beq.n	80015f4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015b0:	4b0f      	ldr	r3, [pc, #60]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80015b2:	68da      	ldr	r2, [r3, #12]
 80015b4:	490e      	ldr	r1, [pc, #56]	; (80015f0 <HAL_GPIO_Init+0x2d0>)
 80015b6:	69bb      	ldr	r3, [r7, #24]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60cb      	str	r3, [r1, #12]
 80015bc:	e021      	b.n	8001602 <HAL_GPIO_Init+0x2e2>
 80015be:	bf00      	nop
 80015c0:	10320000 	.word	0x10320000
 80015c4:	10310000 	.word	0x10310000
 80015c8:	10220000 	.word	0x10220000
 80015cc:	10210000 	.word	0x10210000
 80015d0:	10120000 	.word	0x10120000
 80015d4:	10110000 	.word	0x10110000
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000
 80015e0:	40010800 	.word	0x40010800
 80015e4:	40010c00 	.word	0x40010c00
 80015e8:	40011000 	.word	0x40011000
 80015ec:	40011400 	.word	0x40011400
 80015f0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80015f4:	4b0b      	ldr	r3, [pc, #44]	; (8001624 <HAL_GPIO_Init+0x304>)
 80015f6:	68da      	ldr	r2, [r3, #12]
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	43db      	mvns	r3, r3
 80015fc:	4909      	ldr	r1, [pc, #36]	; (8001624 <HAL_GPIO_Init+0x304>)
 80015fe:	4013      	ands	r3, r2
 8001600:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	3301      	adds	r3, #1
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	fa22 f303 	lsr.w	r3, r2, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	f47f ae8e 	bne.w	8001334 <HAL_GPIO_Init+0x14>
  }
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	372c      	adds	r7, #44	; 0x2c
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr
 8001624:	40010400 	.word	0x40010400

08001628 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e272      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	f000 8087 	beq.w	8001756 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001648:	4b92      	ldr	r3, [pc, #584]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 030c 	and.w	r3, r3, #12
 8001650:	2b04      	cmp	r3, #4
 8001652:	d00c      	beq.n	800166e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001654:	4b8f      	ldr	r3, [pc, #572]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 030c 	and.w	r3, r3, #12
 800165c:	2b08      	cmp	r3, #8
 800165e:	d112      	bne.n	8001686 <HAL_RCC_OscConfig+0x5e>
 8001660:	4b8c      	ldr	r3, [pc, #560]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800166c:	d10b      	bne.n	8001686 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166e:	4b89      	ldr	r3, [pc, #548]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d06c      	beq.n	8001754 <HAL_RCC_OscConfig+0x12c>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d168      	bne.n	8001754 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e24c      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800168e:	d106      	bne.n	800169e <HAL_RCC_OscConfig+0x76>
 8001690:	4b80      	ldr	r3, [pc, #512]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a7f      	ldr	r2, [pc, #508]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	e02e      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b7b      	ldr	r3, [pc, #492]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a7a      	ldr	r2, [pc, #488]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b78      	ldr	r3, [pc, #480]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a77      	ldr	r2, [pc, #476]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016b8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e01d      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016c8:	d10c      	bne.n	80016e4 <HAL_RCC_OscConfig+0xbc>
 80016ca:	4b72      	ldr	r3, [pc, #456]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a71      	ldr	r2, [pc, #452]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016d4:	6013      	str	r3, [r2, #0]
 80016d6:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6e      	ldr	r2, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	e00b      	b.n	80016fc <HAL_RCC_OscConfig+0xd4>
 80016e4:	4b6b      	ldr	r3, [pc, #428]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a6a      	ldr	r2, [pc, #424]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b68      	ldr	r3, [pc, #416]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a67      	ldr	r2, [pc, #412]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80016f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016fa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d013      	beq.n	800172c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001704:	f7ff fa56 	bl	8000bb4 <HAL_GetTick>
 8001708:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170a:	e008      	b.n	800171e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800170c:	f7ff fa52 	bl	8000bb4 <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b64      	cmp	r3, #100	; 0x64
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e200      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d0f0      	beq.n	800170c <HAL_RCC_OscConfig+0xe4>
 800172a:	e014      	b.n	8001756 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800172c:	f7ff fa42 	bl	8000bb4 <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001734:	f7ff fa3e 	bl	8000bb4 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b64      	cmp	r3, #100	; 0x64
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1ec      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001746:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800174e:	2b00      	cmp	r3, #0
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x10c>
 8001752:	e000      	b.n	8001756 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001754:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	2b00      	cmp	r3, #0
 8001760:	d063      	beq.n	800182a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001762:	4b4c      	ldr	r3, [pc, #304]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	f003 030c 	and.w	r3, r3, #12
 800176a:	2b00      	cmp	r3, #0
 800176c:	d00b      	beq.n	8001786 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800176e:	4b49      	ldr	r3, [pc, #292]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	f003 030c 	and.w	r3, r3, #12
 8001776:	2b08      	cmp	r3, #8
 8001778:	d11c      	bne.n	80017b4 <HAL_RCC_OscConfig+0x18c>
 800177a:	4b46      	ldr	r3, [pc, #280]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d116      	bne.n	80017b4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001786:	4b43      	ldr	r3, [pc, #268]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d005      	beq.n	800179e <HAL_RCC_OscConfig+0x176>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e1c0      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	00db      	lsls	r3, r3, #3
 80017ac:	4939      	ldr	r1, [pc, #228]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b2:	e03a      	b.n	800182a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	691b      	ldr	r3, [r3, #16]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d020      	beq.n	80017fe <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 80017be:	2201      	movs	r2, #1
 80017c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017c2:	f7ff f9f7 	bl	8000bb4 <HAL_GetTick>
 80017c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017c8:	e008      	b.n	80017dc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ca:	f7ff f9f3 	bl	8000bb4 <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	693b      	ldr	r3, [r7, #16]
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d901      	bls.n	80017dc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80017d8:	2303      	movs	r3, #3
 80017da:	e1a1      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017dc:	4b2d      	ldr	r3, [pc, #180]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 0302 	and.w	r3, r3, #2
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f0      	beq.n	80017ca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	695b      	ldr	r3, [r3, #20]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	4927      	ldr	r1, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 80017f8:	4313      	orrs	r3, r2
 80017fa:	600b      	str	r3, [r1, #0]
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017fe:	4b26      	ldr	r3, [pc, #152]	; (8001898 <HAL_RCC_OscConfig+0x270>)
 8001800:	2200      	movs	r2, #0
 8001802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001804:	f7ff f9d6 	bl	8000bb4 <HAL_GetTick>
 8001808:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180a:	e008      	b.n	800181e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800180c:	f7ff f9d2 	bl	8000bb4 <HAL_GetTick>
 8001810:	4602      	mov	r2, r0
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	2b02      	cmp	r3, #2
 8001818:	d901      	bls.n	800181e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800181a:	2303      	movs	r3, #3
 800181c:	e180      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800181e:	4b1d      	ldr	r3, [pc, #116]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1f0      	bne.n	800180c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d03a      	beq.n	80018ac <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d019      	beq.n	8001872 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800183e:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_RCC_OscConfig+0x274>)
 8001840:	2201      	movs	r2, #1
 8001842:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001844:	f7ff f9b6 	bl	8000bb4 <HAL_GetTick>
 8001848:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184a:	e008      	b.n	800185e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800184c:	f7ff f9b2 	bl	8000bb4 <HAL_GetTick>
 8001850:	4602      	mov	r2, r0
 8001852:	693b      	ldr	r3, [r7, #16]
 8001854:	1ad3      	subs	r3, r2, r3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d901      	bls.n	800185e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800185a:	2303      	movs	r3, #3
 800185c:	e160      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800185e:	4b0d      	ldr	r3, [pc, #52]	; (8001894 <HAL_RCC_OscConfig+0x26c>)
 8001860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d0f0      	beq.n	800184c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800186a:	2001      	movs	r0, #1
 800186c:	f000 fad8 	bl	8001e20 <RCC_Delay>
 8001870:	e01c      	b.n	80018ac <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001872:	4b0a      	ldr	r3, [pc, #40]	; (800189c <HAL_RCC_OscConfig+0x274>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001878:	f7ff f99c 	bl	8000bb4 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187e:	e00f      	b.n	80018a0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff f998 	bl	8000bb4 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d908      	bls.n	80018a0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e146      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	42420000 	.word	0x42420000
 800189c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018a0:	4b92      	ldr	r3, [pc, #584]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80018a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018a4:	f003 0302 	and.w	r3, r3, #2
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d1e9      	bne.n	8001880 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0304 	and.w	r3, r3, #4
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	f000 80a6 	beq.w	8001a06 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018ba:	2300      	movs	r3, #0
 80018bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018be:	4b8b      	ldr	r3, [pc, #556]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80018c0:	69db      	ldr	r3, [r3, #28]
 80018c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d10d      	bne.n	80018e6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018ca:	4b88      	ldr	r3, [pc, #544]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80018cc:	69db      	ldr	r3, [r3, #28]
 80018ce:	4a87      	ldr	r2, [pc, #540]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d4:	61d3      	str	r3, [r2, #28]
 80018d6:	4b85      	ldr	r3, [pc, #532]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80018d8:	69db      	ldr	r3, [r3, #28]
 80018da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b82      	ldr	r3, [pc, #520]	; (8001af0 <HAL_RCC_OscConfig+0x4c8>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b7f      	ldr	r3, [pc, #508]	; (8001af0 <HAL_RCC_OscConfig+0x4c8>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a7e      	ldr	r2, [pc, #504]	; (8001af0 <HAL_RCC_OscConfig+0x4c8>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff f959 	bl	8000bb4 <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff f955 	bl	8000bb4 <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b64      	cmp	r3, #100	; 0x64
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e103      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	4b75      	ldr	r3, [pc, #468]	; (8001af0 <HAL_RCC_OscConfig+0x4c8>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x312>
 800192c:	4b6f      	ldr	r3, [pc, #444]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 800192e:	6a1b      	ldr	r3, [r3, #32]
 8001930:	4a6e      	ldr	r2, [pc, #440]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6213      	str	r3, [r2, #32]
 8001938:	e02d      	b.n	8001996 <HAL_RCC_OscConfig+0x36e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x334>
 8001942:	4b6a      	ldr	r3, [pc, #424]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001944:	6a1b      	ldr	r3, [r3, #32]
 8001946:	4a69      	ldr	r2, [pc, #420]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6213      	str	r3, [r2, #32]
 800194e:	4b67      	ldr	r3, [pc, #412]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001950:	6a1b      	ldr	r3, [r3, #32]
 8001952:	4a66      	ldr	r2, [pc, #408]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001954:	f023 0304 	bic.w	r3, r3, #4
 8001958:	6213      	str	r3, [r2, #32]
 800195a:	e01c      	b.n	8001996 <HAL_RCC_OscConfig+0x36e>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b05      	cmp	r3, #5
 8001962:	d10c      	bne.n	800197e <HAL_RCC_OscConfig+0x356>
 8001964:	4b61      	ldr	r3, [pc, #388]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001966:	6a1b      	ldr	r3, [r3, #32]
 8001968:	4a60      	ldr	r2, [pc, #384]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6213      	str	r3, [r2, #32]
 8001970:	4b5e      	ldr	r3, [pc, #376]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001972:	6a1b      	ldr	r3, [r3, #32]
 8001974:	4a5d      	ldr	r2, [pc, #372]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001976:	f043 0301 	orr.w	r3, r3, #1
 800197a:	6213      	str	r3, [r2, #32]
 800197c:	e00b      	b.n	8001996 <HAL_RCC_OscConfig+0x36e>
 800197e:	4b5b      	ldr	r3, [pc, #364]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001980:	6a1b      	ldr	r3, [r3, #32]
 8001982:	4a5a      	ldr	r2, [pc, #360]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001984:	f023 0301 	bic.w	r3, r3, #1
 8001988:	6213      	str	r3, [r2, #32]
 800198a:	4b58      	ldr	r3, [pc, #352]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 800198c:	6a1b      	ldr	r3, [r3, #32]
 800198e:	4a57      	ldr	r2, [pc, #348]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	68db      	ldr	r3, [r3, #12]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d015      	beq.n	80019ca <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff f909 	bl	8000bb4 <HAL_GetTick>
 80019a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019a4:	e00a      	b.n	80019bc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a6:	f7ff f905 	bl	8000bb4 <HAL_GetTick>
 80019aa:	4602      	mov	r2, r0
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0b1      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019bc:	4b4b      	ldr	r3, [pc, #300]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0ee      	beq.n	80019a6 <HAL_RCC_OscConfig+0x37e>
 80019c8:	e014      	b.n	80019f4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019ca:	f7ff f8f3 	bl	8000bb4 <HAL_GetTick>
 80019ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019d0:	e00a      	b.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d2:	f7ff f8ef 	bl	8000bb4 <HAL_GetTick>
 80019d6:	4602      	mov	r2, r0
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	1ad3      	subs	r3, r2, r3
 80019dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e09b      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019e8:	4b40      	ldr	r3, [pc, #256]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80019ea:	6a1b      	ldr	r3, [r3, #32]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1ee      	bne.n	80019d2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019f4:	7dfb      	ldrb	r3, [r7, #23]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	d105      	bne.n	8001a06 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019fa:	4b3c      	ldr	r3, [pc, #240]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a3b      	ldr	r2, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001a00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a04:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8087 	beq.w	8001b1e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a10:	4b36      	ldr	r3, [pc, #216]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b08      	cmp	r3, #8
 8001a1a:	d061      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	69db      	ldr	r3, [r3, #28]
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d146      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	4b33      	ldr	r3, [pc, #204]	; (8001af4 <HAL_RCC_OscConfig+0x4cc>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a2a:	f7ff f8c3 	bl	8000bb4 <HAL_GetTick>
 8001a2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a30:	e008      	b.n	8001a44 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a32:	f7ff f8bf 	bl	8000bb4 <HAL_GetTick>
 8001a36:	4602      	mov	r2, r0
 8001a38:	693b      	ldr	r3, [r7, #16]
 8001a3a:	1ad3      	subs	r3, r2, r3
 8001a3c:	2b02      	cmp	r3, #2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e06d      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a44:	4b29      	ldr	r3, [pc, #164]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d1f0      	bne.n	8001a32 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6a1b      	ldr	r3, [r3, #32]
 8001a54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a58:	d108      	bne.n	8001a6c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a5a:	4b24      	ldr	r3, [pc, #144]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	4921      	ldr	r1, [pc, #132]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6a19      	ldr	r1, [r3, #32]
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	430b      	orrs	r3, r1
 8001a7e:	491b      	ldr	r1, [pc, #108]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	4313      	orrs	r3, r2
 8001a82:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a84:	4b1b      	ldr	r3, [pc, #108]	; (8001af4 <HAL_RCC_OscConfig+0x4cc>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff f893 	bl	8000bb4 <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a92:	f7ff f88f 	bl	8000bb4 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e03d      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aa4:	4b11      	ldr	r3, [pc, #68]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d0f0      	beq.n	8001a92 <HAL_RCC_OscConfig+0x46a>
 8001ab0:	e035      	b.n	8001b1e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <HAL_RCC_OscConfig+0x4cc>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff f87c 	bl	8000bb4 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001abe:	e008      	b.n	8001ad2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac0:	f7ff f878 	bl	8000bb4 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	2b02      	cmp	r3, #2
 8001acc:	d901      	bls.n	8001ad2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e026      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_RCC_OscConfig+0x4c4>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d1f0      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x498>
 8001ade:	e01e      	b.n	8001b1e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d107      	bne.n	8001af8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e019      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
 8001aec:	40021000 	.word	0x40021000
 8001af0:	40007000 	.word	0x40007000
 8001af4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001af8:	4b0b      	ldr	r3, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x500>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a1b      	ldr	r3, [r3, #32]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d106      	bne.n	8001b1a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d001      	beq.n	8001b1e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e000      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001b1e:	2300      	movs	r3, #0
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40021000 	.word	0x40021000

08001b2c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0d0      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b40:	4b6a      	ldr	r3, [pc, #424]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0307 	and.w	r3, r3, #7
 8001b48:	683a      	ldr	r2, [r7, #0]
 8001b4a:	429a      	cmp	r2, r3
 8001b4c:	d910      	bls.n	8001b70 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b4e:	4b67      	ldr	r3, [pc, #412]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f023 0207 	bic.w	r2, r3, #7
 8001b56:	4965      	ldr	r1, [pc, #404]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b5e:	4b63      	ldr	r3, [pc, #396]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	683a      	ldr	r2, [r7, #0]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d001      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0b8      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0302 	and.w	r3, r3, #2
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d020      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0304 	and.w	r3, r3, #4
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d005      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b88:	4b59      	ldr	r3, [pc, #356]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	4a58      	ldr	r2, [pc, #352]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001b8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001b92:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0308 	and.w	r3, r3, #8
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d005      	beq.n	8001bac <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ba0:	4b53      	ldr	r3, [pc, #332]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	4a52      	ldr	r2, [pc, #328]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba6:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001baa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bac:	4b50      	ldr	r3, [pc, #320]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	494d      	ldr	r1, [pc, #308]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d040      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d107      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bd2:	4b47      	ldr	r3, [pc, #284]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d115      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e07f      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d107      	bne.n	8001bfa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bea:	4b41      	ldr	r3, [pc, #260]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d109      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e073      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bfa:	4b3d      	ldr	r3, [pc, #244]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d101      	bne.n	8001c0a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e06b      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c0a:	4b39      	ldr	r3, [pc, #228]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f023 0203 	bic.w	r2, r3, #3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	4936      	ldr	r1, [pc, #216]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c1c:	f7fe ffca 	bl	8000bb4 <HAL_GetTick>
 8001c20:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c24:	f7fe ffc6 	bl	8000bb4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e053      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f003 020c 	and.w	r2, r3, #12
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d1eb      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001c4c:	4b27      	ldr	r3, [pc, #156]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	683a      	ldr	r2, [r7, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d210      	bcs.n	8001c7c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c5a:	4b24      	ldr	r3, [pc, #144]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 0207 	bic.w	r2, r3, #7
 8001c62:	4922      	ldr	r1, [pc, #136]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c6a:	4b20      	ldr	r3, [pc, #128]	; (8001cec <HAL_RCC_ClockConfig+0x1c0>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0307 	and.w	r3, r3, #7
 8001c72:	683a      	ldr	r2, [r7, #0]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e032      	b.n	8001ce2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 0304 	and.w	r3, r3, #4
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d008      	beq.n	8001c9a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c88:	4b19      	ldr	r3, [pc, #100]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4916      	ldr	r1, [pc, #88]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0308 	and.w	r3, r3, #8
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d009      	beq.n	8001cba <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ca6:	4b12      	ldr	r3, [pc, #72]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	490e      	ldr	r1, [pc, #56]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001cba:	f000 f821 	bl	8001d00 <HAL_RCC_GetSysClockFreq>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	4b0b      	ldr	r3, [pc, #44]	; (8001cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 030f 	and.w	r3, r3, #15
 8001cca:	490a      	ldr	r1, [pc, #40]	; (8001cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ccc:	5ccb      	ldrb	r3, [r1, r3]
 8001cce:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8001cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001cd6:	4b09      	ldr	r3, [pc, #36]	; (8001cfc <HAL_RCC_ClockConfig+0x1d0>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7fe ff28 	bl	8000b30 <HAL_InitTick>

  return HAL_OK;
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3710      	adds	r7, #16
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	40022000 	.word	0x40022000
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	08002b80 	.word	0x08002b80
 8001cf8:	20000028 	.word	0x20000028
 8001cfc:	2000002c 	.word	0x2000002c

08001d00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d00:	b490      	push	{r4, r7}
 8001d02:	b08a      	sub	sp, #40	; 0x28
 8001d04:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001d06:	4b29      	ldr	r3, [pc, #164]	; (8001dac <HAL_RCC_GetSysClockFreq+0xac>)
 8001d08:	1d3c      	adds	r4, r7, #4
 8001d0a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d0c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001d10:	f240 2301 	movw	r3, #513	; 0x201
 8001d14:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d16:	2300      	movs	r3, #0
 8001d18:	61fb      	str	r3, [r7, #28]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	61bb      	str	r3, [r7, #24]
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001d2a:	4b21      	ldr	r3, [pc, #132]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d002      	beq.n	8001d40 <HAL_RCC_GetSysClockFreq+0x40>
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d003      	beq.n	8001d46 <HAL_RCC_GetSysClockFreq+0x46>
 8001d3e:	e02b      	b.n	8001d98 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d40:	4b1c      	ldr	r3, [pc, #112]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d42:	623b      	str	r3, [r7, #32]
      break;
 8001d44:	e02b      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	0c9b      	lsrs	r3, r3, #18
 8001d4a:	f003 030f 	and.w	r3, r3, #15
 8001d4e:	3328      	adds	r3, #40	; 0x28
 8001d50:	443b      	add	r3, r7
 8001d52:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001d56:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d012      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	0c5b      	lsrs	r3, r3, #17
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	3328      	adds	r3, #40	; 0x28
 8001d6e:	443b      	add	r3, r7
 8001d70:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001d74:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4a0e      	ldr	r2, [pc, #56]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d7a:	fb03 f202 	mul.w	r2, r3, r2
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d84:	627b      	str	r3, [r7, #36]	; 0x24
 8001d86:	e004      	b.n	8001d92 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	4a0b      	ldr	r2, [pc, #44]	; (8001db8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d8c:	fb02 f303 	mul.w	r3, r2, r3
 8001d90:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d94:	623b      	str	r3, [r7, #32]
      break;
 8001d96:	e002      	b.n	8001d9e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001d9a:	623b      	str	r3, [r7, #32]
      break;
 8001d9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d9e:	6a3b      	ldr	r3, [r7, #32]
}
 8001da0:	4618      	mov	r0, r3
 8001da2:	3728      	adds	r7, #40	; 0x28
 8001da4:	46bd      	mov	sp, r7
 8001da6:	bc90      	pop	{r4, r7}
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	08002b70 	.word	0x08002b70
 8001db0:	40021000 	.word	0x40021000
 8001db4:	007a1200 	.word	0x007a1200
 8001db8:	003d0900 	.word	0x003d0900

08001dbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dc0:	4b02      	ldr	r3, [pc, #8]	; (8001dcc <HAL_RCC_GetHCLKFreq+0x10>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bc80      	pop	{r7}
 8001dca:	4770      	bx	lr
 8001dcc:	20000028 	.word	0x20000028

08001dd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001dd4:	f7ff fff2 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001dd8:	4602      	mov	r2, r0
 8001dda:	4b05      	ldr	r3, [pc, #20]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	f003 0307 	and.w	r3, r3, #7
 8001de4:	4903      	ldr	r1, [pc, #12]	; (8001df4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de6:	5ccb      	ldrb	r3, [r1, r3]
 8001de8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dec:	4618      	mov	r0, r3
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40021000 	.word	0x40021000
 8001df4:	08002b90 	.word	0x08002b90

08001df8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001dfc:	f7ff ffde 	bl	8001dbc <HAL_RCC_GetHCLKFreq>
 8001e00:	4602      	mov	r2, r0
 8001e02:	4b05      	ldr	r3, [pc, #20]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	0adb      	lsrs	r3, r3, #11
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	4903      	ldr	r1, [pc, #12]	; (8001e1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0e:	5ccb      	ldrb	r3, [r1, r3]
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	08002b90 	.word	0x08002b90

08001e20 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b085      	sub	sp, #20
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <RCC_Delay+0x34>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <RCC_Delay+0x38>)
 8001e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e32:	0a5b      	lsrs	r3, r3, #9
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001e3c:	bf00      	nop
  }
  while (Delay --);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	60fa      	str	r2, [r7, #12]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1f9      	bne.n	8001e3c <RCC_Delay+0x1c>
}
 8001e48:	bf00      	nop
 8001e4a:	bf00      	nop
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr
 8001e54:	20000028 	.word	0x20000028
 8001e58:	10624dd3 	.word	0x10624dd3

08001e5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b082      	sub	sp, #8
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d101      	bne.n	8001e6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e03f      	b.n	8001eee <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d106      	bne.n	8001e88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f7fe fcfc 	bl	8000880 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2224      	movs	r2, #36	; 0x24
 8001e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001e9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 fd9b 	bl	80029dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001eb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001ec4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	68da      	ldr	r2, [r3, #12]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ed4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2200      	movs	r2, #0
 8001eda:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2220      	movs	r2, #32
 8001ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2220      	movs	r2, #32
 8001ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b08a      	sub	sp, #40	; 0x28
 8001efa:	af02      	add	r7, sp, #8
 8001efc:	60f8      	str	r0, [r7, #12]
 8001efe:	60b9      	str	r1, [r7, #8]
 8001f00:	603b      	str	r3, [r7, #0]
 8001f02:	4613      	mov	r3, r2
 8001f04:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b20      	cmp	r3, #32
 8001f14:	d17c      	bne.n	8002010 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d002      	beq.n	8001f22 <HAL_UART_Transmit+0x2c>
 8001f1c:	88fb      	ldrh	r3, [r7, #6]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e075      	b.n	8002012 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_UART_Transmit+0x3e>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e06e      	b.n	8002012 <HAL_UART_Transmit+0x11c>
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2221      	movs	r2, #33	; 0x21
 8001f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001f4a:	f7fe fe33 	bl	8000bb4 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	88fa      	ldrh	r2, [r7, #6]
 8001f54:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	88fa      	ldrh	r2, [r7, #6]
 8001f5a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f64:	d108      	bne.n	8001f78 <HAL_UART_Transmit+0x82>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	691b      	ldr	r3, [r3, #16]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d104      	bne.n	8001f78 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	61bb      	str	r3, [r7, #24]
 8001f76:	e003      	b.n	8001f80 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001f88:	e02a      	b.n	8001fe0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	9300      	str	r3, [sp, #0]
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	2200      	movs	r2, #0
 8001f92:	2180      	movs	r1, #128	; 0x80
 8001f94:	68f8      	ldr	r0, [r7, #12]
 8001f96:	f000 fb0d 	bl	80025b4 <UART_WaitOnFlagUntilTimeout>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d001      	beq.n	8001fa4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e036      	b.n	8002012 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d10b      	bne.n	8001fc2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	881b      	ldrh	r3, [r3, #0]
 8001fae:	461a      	mov	r2, r3
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001fb8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001fba:	69bb      	ldr	r3, [r7, #24]
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]
 8001fc0:	e007      	b.n	8001fd2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	3301      	adds	r3, #1
 8001fd0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	3b01      	subs	r3, #1
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d1cf      	bne.n	8001f8a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2140      	movs	r1, #64	; 0x40
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 fadd 	bl	80025b4 <UART_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e006      	b.n	8002012 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2220      	movs	r2, #32
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800200c:	2300      	movs	r3, #0
 800200e:	e000      	b.n	8002012 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002010:	2302      	movs	r3, #2
  }
}
 8002012:	4618      	mov	r0, r3
 8002014:	3720      	adds	r7, #32
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}

0800201a <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	b086      	sub	sp, #24
 800201e:	af00      	add	r7, sp, #0
 8002020:	60f8      	str	r0, [r7, #12]
 8002022:	60b9      	str	r1, [r7, #8]
 8002024:	4613      	mov	r3, r2
 8002026:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800202e:	b2db      	uxtb	r3, r3
 8002030:	2b20      	cmp	r3, #32
 8002032:	d13c      	bne.n	80020ae <HAL_UARTEx_ReceiveToIdle_DMA+0x94>
  {
    if ((pData == NULL) || (Size == 0U))
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d002      	beq.n	8002040 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 800203a:	88fb      	ldrh	r3, [r7, #6]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d101      	bne.n	8002044 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e035      	b.n	80020b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
    }

    __HAL_LOCK(huart);
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800204a:	2b01      	cmp	r3, #1
 800204c:	d101      	bne.n	8002052 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 800204e:	2302      	movs	r3, #2
 8002050:	e02e      	b.n	80020b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	2201      	movs	r2, #1
 8002056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2201      	movs	r2, #1
 800205e:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	461a      	mov	r2, r3
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f000 faee 	bl	8002648 <UART_Start_Receive_DMA>
 800206c:	4603      	mov	r3, r0
 800206e:	75fb      	strb	r3, [r7, #23]

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002070:	7dfb      	ldrb	r3, [r7, #23]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d119      	bne.n	80020aa <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207a:	2b01      	cmp	r3, #1
 800207c:	d113      	bne.n	80020a6 <HAL_UARTEx_ReceiveToIdle_DMA+0x8c>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	613b      	str	r3, [r7, #16]
 8002092:	693b      	ldr	r3, [r7, #16]
        SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	68da      	ldr	r2, [r3, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f042 0210 	orr.w	r2, r2, #16
 80020a2:	60da      	str	r2, [r3, #12]
 80020a4:	e001      	b.n	80020aa <HAL_UARTEx_ReceiveToIdle_DMA+0x90>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	75fb      	strb	r3, [r7, #23]
      }
    }

    return status;
 80020aa:	7dfb      	ldrb	r3, [r7, #23]
 80020ac:	e000      	b.n	80020b0 <HAL_UARTEx_ReceiveToIdle_DMA+0x96>
  }
  else
  {
    return HAL_BUSY;
 80020ae:	2302      	movs	r3, #2
  }
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3718      	adds	r7, #24
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08a      	sub	sp, #40	; 0x28
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695b      	ldr	r3, [r3, #20]
 80020d6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80020d8:	2300      	movs	r3, #0
 80020da:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80020dc:	2300      	movs	r3, #0
 80020de:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80020e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e2:	f003 030f 	and.w	r3, r3, #15
 80020e6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d10d      	bne.n	800210a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	f003 0320 	and.w	r3, r3, #32
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_UART_IRQHandler+0x52>
 80020f8:	6a3b      	ldr	r3, [r7, #32]
 80020fa:	f003 0320 	and.w	r3, r3, #32
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d003      	beq.n	800210a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f000 fbc0 	bl	8002888 <UART_Receive_IT>
      return;
 8002108:	e17b      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800210a:	69bb      	ldr	r3, [r7, #24]
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80b1 	beq.w	8002274 <HAL_UART_IRQHandler+0x1bc>
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b00      	cmp	r3, #0
 800211a:	d105      	bne.n	8002128 <HAL_UART_IRQHandler+0x70>
 800211c:	6a3b      	ldr	r3, [r7, #32]
 800211e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 80a6 	beq.w	8002274 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	f003 0301 	and.w	r3, r3, #1
 800212e:	2b00      	cmp	r3, #0
 8002130:	d00a      	beq.n	8002148 <HAL_UART_IRQHandler+0x90>
 8002132:	6a3b      	ldr	r3, [r7, #32]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d005      	beq.n	8002148 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f043 0201 	orr.w	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	2b00      	cmp	r3, #0
 8002150:	d00a      	beq.n	8002168 <HAL_UART_IRQHandler+0xb0>
 8002152:	69fb      	ldr	r3, [r7, #28]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b00      	cmp	r3, #0
 800215a:	d005      	beq.n	8002168 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0202 	orr.w	r2, r3, #2
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_UART_IRQHandler+0xd0>
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	2b00      	cmp	r3, #0
 800217a:	d005      	beq.n	8002188 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002180:	f043 0204 	orr.w	r2, r3, #4
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800218a:	f003 0308 	and.w	r3, r3, #8
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00f      	beq.n	80021b2 <HAL_UART_IRQHandler+0xfa>
 8002192:	6a3b      	ldr	r3, [r7, #32]
 8002194:	f003 0320 	and.w	r3, r3, #32
 8002198:	2b00      	cmp	r3, #0
 800219a:	d104      	bne.n	80021a6 <HAL_UART_IRQHandler+0xee>
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021aa:	f043 0208 	orr.w	r2, r3, #8
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f000 811e 	beq.w	80023f8 <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	f003 0320 	and.w	r3, r3, #32
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_UART_IRQHandler+0x11e>
 80021c6:	6a3b      	ldr	r3, [r7, #32]
 80021c8:	f003 0320 	and.w	r3, r3, #32
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d002      	beq.n	80021d6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f000 fb59 	bl	8002888 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	695b      	ldr	r3, [r3, #20]
 80021dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	bf14      	ite	ne
 80021e4:	2301      	movne	r3, #1
 80021e6:	2300      	moveq	r3, #0
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f0:	f003 0308 	and.w	r3, r3, #8
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d102      	bne.n	80021fe <HAL_UART_IRQHandler+0x146>
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d031      	beq.n	8002262 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f000 fa9b 	bl	800273a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220e:	2b00      	cmp	r3, #0
 8002210:	d023      	beq.n	800225a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	695a      	ldr	r2, [r3, #20]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002220:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	2b00      	cmp	r3, #0
 8002228:	d013      	beq.n	8002252 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222e:	4a76      	ldr	r2, [pc, #472]	; (8002408 <HAL_UART_IRQHandler+0x350>)
 8002230:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002236:	4618      	mov	r0, r3
 8002238:	f7fe fec8 	bl	8000fcc <HAL_DMA_Abort_IT>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d016      	beq.n	8002270 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002246:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800224c:	4610      	mov	r0, r2
 800224e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002250:	e00e      	b.n	8002270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 f8f5 	bl	8002442 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002258:	e00a      	b.n	8002270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800225a:	6878      	ldr	r0, [r7, #4]
 800225c:	f000 f8f1 	bl	8002442 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002260:	e006      	b.n	8002270 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f000 f8ed 	bl	8002442 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2200      	movs	r2, #0
 800226c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800226e:	e0c3      	b.n	80023f8 <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002270:	bf00      	nop
    return;
 8002272:	e0c1      	b.n	80023f8 <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 80a1 	bne.w	80023c0 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	2b00      	cmp	r3, #0
 8002286:	f000 809b 	beq.w	80023c0 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	f003 0310 	and.w	r3, r3, #16
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 8095 	beq.w	80023c0 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002296:	2300      	movs	r3, #0
 8002298:	60fb      	str	r3, [r7, #12]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d04e      	beq.n	8002358 <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80022c4:	8a3b      	ldrh	r3, [r7, #16]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	f000 8098 	beq.w	80023fc <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80022d0:	8a3a      	ldrh	r2, [r7, #16]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	f080 8092 	bcs.w	80023fc <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	8a3a      	ldrh	r2, [r7, #16]
 80022dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	2b20      	cmp	r3, #32
 80022e6:	d02b      	beq.n	8002340 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022f6:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0201 	bic.w	r2, r2, #1
 8002306:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	695a      	ldr	r2, [r3, #20]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002316:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2220      	movs	r2, #32
 800231c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2200      	movs	r2, #0
 8002324:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	68da      	ldr	r2, [r3, #12]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0210 	bic.w	r2, r2, #16
 8002334:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800233a:	4618      	mov	r0, r3
 800233c:	f7fe fe0b 	bl	8000f56 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002348:	b29b      	uxth	r3, r3
 800234a:	1ad3      	subs	r3, r2, r3
 800234c:	b29b      	uxth	r3, r3
 800234e:	4619      	mov	r1, r3
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	f7fe f9cd 	bl	80006f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002356:	e051      	b.n	80023fc <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002360:	b29b      	uxth	r3, r3
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800236a:	b29b      	uxth	r3, r3
 800236c:	2b00      	cmp	r3, #0
 800236e:	d047      	beq.n	8002400 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8002370:	8a7b      	ldrh	r3, [r7, #18]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d044      	beq.n	8002400 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	68da      	ldr	r2, [r3, #12]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002384:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2220      	movs	r2, #32
 800239a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	68da      	ldr	r2, [r3, #12]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f022 0210 	bic.w	r2, r2, #16
 80023b2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023b4:	8a7b      	ldrh	r3, [r7, #18]
 80023b6:	4619      	mov	r1, r3
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe f999 	bl	80006f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80023be:	e01f      	b.n	8002400 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d008      	beq.n	80023dc <HAL_UART_IRQHandler+0x324>
 80023ca:	6a3b      	ldr	r3, [r7, #32]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 f9f0 	bl	80027ba <UART_Transmit_IT>
    return;
 80023da:	e012      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80023dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00d      	beq.n	8002402 <HAL_UART_IRQHandler+0x34a>
 80023e6:	6a3b      	ldr	r3, [r7, #32]
 80023e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d008      	beq.n	8002402 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 fa31 	bl	8002858 <UART_EndTransmit_IT>
    return;
 80023f6:	e004      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
    return;
 80023f8:	bf00      	nop
 80023fa:	e002      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
      return;
 80023fc:	bf00      	nop
 80023fe:	e000      	b.n	8002402 <HAL_UART_IRQHandler+0x34a>
      return;
 8002400:	bf00      	nop
  }
}
 8002402:	3728      	adds	r7, #40	; 0x28
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	08002793 	.word	0x08002793

0800240c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800240c:	b480      	push	{r7}
 800240e:	b083      	sub	sp, #12
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002414:	bf00      	nop
 8002416:	370c      	adds	r7, #12
 8002418:	46bd      	mov	sp, r7
 800241a:	bc80      	pop	{r7}
 800241c:	4770      	bx	lr

0800241e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002426:	bf00      	nop
 8002428:	370c      	adds	r7, #12
 800242a:	46bd      	mov	sp, r7
 800242c:	bc80      	pop	{r7}
 800242e:	4770      	bx	lr

08002430 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	bc80      	pop	{r7}
 8002440:	4770      	bx	lr

08002442 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr

08002454 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0320 	and.w	r3, r3, #32
 800246c:	2b00      	cmp	r3, #0
 800246e:	d12a      	bne.n	80024c6 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002484:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695a      	ldr	r2, [r3, #20]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 0201 	bic.w	r2, r2, #1
 8002494:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	695a      	ldr	r2, [r3, #20]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2220      	movs	r2, #32
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68da      	ldr	r2, [r3, #12]
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0210 	bic.w	r2, r2, #16
 80024c4:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d106      	bne.n	80024dc <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80024d2:	4619      	mov	r1, r3
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f7fe f90b 	bl	80006f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80024da:	e002      	b.n	80024e2 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80024dc:	68f8      	ldr	r0, [r7, #12]
 80024de:	f7ff ff9e 	bl	800241e <HAL_UART_RxCpltCallback>
}
 80024e2:	bf00      	nop
 80024e4:	3710      	adds	r7, #16
 80024e6:	46bd      	mov	sp, r7
 80024e8:	bd80      	pop	{r7, pc}

080024ea <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f6:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fc:	2b01      	cmp	r3, #1
 80024fe:	d108      	bne.n	8002512 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002504:	085b      	lsrs	r3, r3, #1
 8002506:	b29b      	uxth	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	68f8      	ldr	r0, [r7, #12]
 800250c:	f7fe f8f0 	bl	80006f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002510:	e002      	b.n	8002518 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff ff8c 	bl	8002430 <HAL_UART_RxHalfCpltCallback>
}
 8002518:	bf00      	nop
 800251a:	3710      	adds	r7, #16
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}

08002520 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002528:	2300      	movs	r3, #0
 800252a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	695b      	ldr	r3, [r3, #20]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b00      	cmp	r3, #0
 800253e:	bf14      	ite	ne
 8002540:	2301      	movne	r3, #1
 8002542:	2300      	moveq	r3, #0
 8002544:	b2db      	uxtb	r3, r3
 8002546:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b21      	cmp	r3, #33	; 0x21
 8002552:	d108      	bne.n	8002566 <UART_DMAError+0x46>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d005      	beq.n	8002566 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	2200      	movs	r2, #0
 800255e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8002560:	68b8      	ldr	r0, [r7, #8]
 8002562:	f000 f8d5 	bl	8002710 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	695b      	ldr	r3, [r3, #20]
 800256c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b22      	cmp	r3, #34	; 0x22
 8002586:	d108      	bne.n	800259a <UART_DMAError+0x7a>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d005      	beq.n	800259a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2200      	movs	r2, #0
 8002592:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8002594:	68b8      	ldr	r0, [r7, #8]
 8002596:	f000 f8d0 	bl	800273a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	f043 0210 	orr.w	r2, r3, #16
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025a6:	68b8      	ldr	r0, [r7, #8]
 80025a8:	f7ff ff4b 	bl	8002442 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025ac:	bf00      	nop
 80025ae:	3710      	adds	r7, #16
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}

080025b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	603b      	str	r3, [r7, #0]
 80025c0:	4613      	mov	r3, r2
 80025c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025c4:	e02c      	b.n	8002620 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025cc:	d028      	beq.n	8002620 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d007      	beq.n	80025e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80025d4:	f7fe faee 	bl	8000bb4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	69ba      	ldr	r2, [r7, #24]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d21d      	bcs.n	8002620 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	68da      	ldr	r2, [r3, #12]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80025f2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	695a      	ldr	r2, [r3, #20]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2220      	movs	r2, #32
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800261c:	2303      	movs	r3, #3
 800261e:	e00f      	b.n	8002640 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	4013      	ands	r3, r2
 800262a:	68ba      	ldr	r2, [r7, #8]
 800262c:	429a      	cmp	r2, r3
 800262e:	bf0c      	ite	eq
 8002630:	2301      	moveq	r3, #1
 8002632:	2300      	movne	r3, #0
 8002634:	b2db      	uxtb	r3, r3
 8002636:	461a      	mov	r2, r3
 8002638:	79fb      	ldrb	r3, [r7, #7]
 800263a:	429a      	cmp	r2, r3
 800263c:	d0c3      	beq.n	80025c6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800263e:	2300      	movs	r3, #0
}
 8002640:	4618      	mov	r0, r3
 8002642:	3710      	adds	r7, #16
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b086      	sub	sp, #24
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	88fa      	ldrh	r2, [r7, #6]
 8002660:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	2200      	movs	r2, #0
 8002666:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	2222      	movs	r2, #34	; 0x22
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002674:	4a23      	ldr	r2, [pc, #140]	; (8002704 <UART_Start_Receive_DMA+0xbc>)
 8002676:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	4a22      	ldr	r2, [pc, #136]	; (8002708 <UART_Start_Receive_DMA+0xc0>)
 800267e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002684:	4a21      	ldr	r2, [pc, #132]	; (800270c <UART_Start_Receive_DMA+0xc4>)
 8002686:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800268c:	2200      	movs	r2, #0
 800268e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8002690:	f107 0308 	add.w	r3, r7, #8
 8002694:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	3304      	adds	r3, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	f7fe fbf6 	bl	8000e98 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80026ac:	2300      	movs	r3, #0
 80026ae:	613b      	str	r3, [r7, #16]
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	613b      	str	r3, [r7, #16]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	613b      	str	r3, [r7, #16]
 80026c0:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	68da      	ldr	r2, [r3, #12]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026d8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	695a      	ldr	r2, [r3, #20]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f042 0201 	orr.w	r2, r2, #1
 80026e8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026f8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80026fa:	2300      	movs	r3, #0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3718      	adds	r7, #24
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	08002455 	.word	0x08002455
 8002708:	080024eb 	.word	0x080024eb
 800270c:	08002521 	.word	0x08002521

08002710 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	68da      	ldr	r2, [r3, #12]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002726:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2220      	movs	r2, #32
 800272c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	bc80      	pop	{r7}
 8002738:	4770      	bx	lr

0800273a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800273a:	b480      	push	{r7}
 800273c:	b083      	sub	sp, #12
 800273e:	af00      	add	r7, sp, #0
 8002740:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	68da      	ldr	r2, [r3, #12]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002750:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	695a      	ldr	r2, [r3, #20]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 0201 	bic.w	r2, r2, #1
 8002760:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002766:	2b01      	cmp	r3, #1
 8002768:	d107      	bne.n	800277a <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	68da      	ldr	r2, [r3, #12]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 0210 	bic.w	r2, r2, #16
 8002778:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2220      	movs	r2, #32
 800277e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002792:	b580      	push	{r7, lr}
 8002794:	b084      	sub	sp, #16
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	2200      	movs	r2, #0
 80027a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80027ac:	68f8      	ldr	r0, [r7, #12]
 80027ae:	f7ff fe48 	bl	8002442 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80027b2:	bf00      	nop
 80027b4:	3710      	adds	r7, #16
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}

080027ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c8:	b2db      	uxtb	r3, r3
 80027ca:	2b21      	cmp	r3, #33	; 0x21
 80027cc:	d13e      	bne.n	800284c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	689b      	ldr	r3, [r3, #8]
 80027d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027d6:	d114      	bne.n	8002802 <UART_Transmit_IT+0x48>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d110      	bne.n	8002802 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	881b      	ldrh	r3, [r3, #0]
 80027ea:	461a      	mov	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	1c9a      	adds	r2, r3, #2
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	621a      	str	r2, [r3, #32]
 8002800:	e008      	b.n	8002814 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	6a1b      	ldr	r3, [r3, #32]
 8002806:	1c59      	adds	r1, r3, #1
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6211      	str	r1, [r2, #32]
 800280c:	781a      	ldrb	r2, [r3, #0]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002818:	b29b      	uxth	r3, r3
 800281a:	3b01      	subs	r3, #1
 800281c:	b29b      	uxth	r3, r3
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	4619      	mov	r1, r3
 8002822:	84d1      	strh	r1, [r2, #38]	; 0x26
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10f      	bne.n	8002848 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	68da      	ldr	r2, [r3, #12]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002836:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68da      	ldr	r2, [r3, #12]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002846:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002848:	2300      	movs	r3, #0
 800284a:	e000      	b.n	800284e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800284c:	2302      	movs	r3, #2
  }
}
 800284e:	4618      	mov	r0, r3
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bc80      	pop	{r7}
 8002856:	4770      	bx	lr

08002858 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	68da      	ldr	r2, [r3, #12]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800286e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2220      	movs	r2, #32
 8002874:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fdc7 	bl	800240c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3708      	adds	r7, #8
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b22      	cmp	r3, #34	; 0x22
 800289a:	f040 8099 	bne.w	80029d0 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	689b      	ldr	r3, [r3, #8]
 80028a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028a6:	d117      	bne.n	80028d8 <UART_Receive_IT+0x50>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	691b      	ldr	r3, [r3, #16]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d113      	bne.n	80028d8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80028b0:	2300      	movs	r3, #0
 80028b2:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028b8:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685b      	ldr	r3, [r3, #4]
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	1c9a      	adds	r2, r3, #2
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
 80028d6:	e026      	b.n	8002926 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028dc:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 80028de:	2300      	movs	r3, #0
 80028e0:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028ea:	d007      	beq.n	80028fc <UART_Receive_IT+0x74>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <UART_Receive_IT+0x82>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d106      	bne.n	800290a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	b2da      	uxtb	r2, r3
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	701a      	strb	r2, [r3, #0]
 8002908:	e008      	b.n	800291c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	b2db      	uxtb	r3, r3
 8002912:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002916:	b2da      	uxtb	r2, r3
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002920:	1c5a      	adds	r2, r3, #1
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800292a:	b29b      	uxth	r3, r3
 800292c:	3b01      	subs	r3, #1
 800292e:	b29b      	uxth	r3, r3
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	4619      	mov	r1, r3
 8002934:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002936:	2b00      	cmp	r3, #0
 8002938:	d148      	bne.n	80029cc <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68da      	ldr	r2, [r3, #12]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f022 0220 	bic.w	r2, r2, #32
 8002948:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68da      	ldr	r2, [r3, #12]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002958:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	695a      	ldr	r2, [r3, #20]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f022 0201 	bic.w	r2, r2, #1
 8002968:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	2b01      	cmp	r3, #1
 8002978:	d123      	bne.n	80029c2 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	68da      	ldr	r2, [r3, #12]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 0210 	bic.w	r2, r2, #16
 800298e:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0310 	and.w	r3, r3, #16
 800299a:	2b10      	cmp	r3, #16
 800299c:	d10a      	bne.n	80029b4 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800299e:	2300      	movs	r3, #0
 80029a0:	60fb      	str	r3, [r7, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	60fb      	str	r3, [r7, #12]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80029b8:	4619      	mov	r1, r3
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7fd fe98 	bl	80006f0 <HAL_UARTEx_RxEventCallback>
 80029c0:	e002      	b.n	80029c8 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff fd2b 	bl	800241e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	e002      	b.n	80029d2 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 80029cc:	2300      	movs	r3, #0
 80029ce:	e000      	b.n	80029d2 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 80029d0:	2302      	movs	r3, #2
  }
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	68da      	ldr	r2, [r3, #12]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	430a      	orrs	r2, r1
 80029f8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	689a      	ldr	r2, [r3, #8]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	691b      	ldr	r3, [r3, #16]
 8002a02:	431a      	orrs	r2, r3
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	695b      	ldr	r3, [r3, #20]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002a16:	f023 030c 	bic.w	r3, r3, #12
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6812      	ldr	r2, [r2, #0]
 8002a1e:	68b9      	ldr	r1, [r7, #8]
 8002a20:	430b      	orrs	r3, r1
 8002a22:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	695b      	ldr	r3, [r3, #20]
 8002a2a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699a      	ldr	r2, [r3, #24]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <UART_SetConfig+0x114>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d103      	bne.n	8002a4c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002a44:	f7ff f9d8 	bl	8001df8 <HAL_RCC_GetPCLK2Freq>
 8002a48:	60f8      	str	r0, [r7, #12]
 8002a4a:	e002      	b.n	8002a52 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002a4c:	f7ff f9c0 	bl	8001dd0 <HAL_RCC_GetPCLK1Freq>
 8002a50:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a68:	4a22      	ldr	r2, [pc, #136]	; (8002af4 <UART_SetConfig+0x118>)
 8002a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	0119      	lsls	r1, r3, #4
 8002a72:	68fa      	ldr	r2, [r7, #12]
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009a      	lsls	r2, r3, #2
 8002a7c:	441a      	add	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a88:	4b1a      	ldr	r3, [pc, #104]	; (8002af4 <UART_SetConfig+0x118>)
 8002a8a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	2064      	movs	r0, #100	; 0x64
 8002a92:	fb00 f303 	mul.w	r3, r0, r3
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	011b      	lsls	r3, r3, #4
 8002a9a:	3332      	adds	r3, #50	; 0x32
 8002a9c:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <UART_SetConfig+0x118>)
 8002a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa2:	095b      	lsrs	r3, r3, #5
 8002aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002aa8:	4419      	add	r1, r3
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009a      	lsls	r2, r3, #2
 8002ab4:	441a      	add	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ac0:	4b0c      	ldr	r3, [pc, #48]	; (8002af4 <UART_SetConfig+0x118>)
 8002ac2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ac6:	095b      	lsrs	r3, r3, #5
 8002ac8:	2064      	movs	r0, #100	; 0x64
 8002aca:	fb00 f303 	mul.w	r3, r0, r3
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	011b      	lsls	r3, r3, #4
 8002ad2:	3332      	adds	r3, #50	; 0x32
 8002ad4:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <UART_SetConfig+0x118>)
 8002ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ada:	095b      	lsrs	r3, r3, #5
 8002adc:	f003 020f 	and.w	r2, r3, #15
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002ae8:	bf00      	nop
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40013800 	.word	0x40013800
 8002af4:	51eb851f 	.word	0x51eb851f

08002af8 <__libc_init_array>:
 8002af8:	b570      	push	{r4, r5, r6, lr}
 8002afa:	2600      	movs	r6, #0
 8002afc:	4d0c      	ldr	r5, [pc, #48]	; (8002b30 <__libc_init_array+0x38>)
 8002afe:	4c0d      	ldr	r4, [pc, #52]	; (8002b34 <__libc_init_array+0x3c>)
 8002b00:	1b64      	subs	r4, r4, r5
 8002b02:	10a4      	asrs	r4, r4, #2
 8002b04:	42a6      	cmp	r6, r4
 8002b06:	d109      	bne.n	8002b1c <__libc_init_array+0x24>
 8002b08:	f000 f822 	bl	8002b50 <_init>
 8002b0c:	2600      	movs	r6, #0
 8002b0e:	4d0a      	ldr	r5, [pc, #40]	; (8002b38 <__libc_init_array+0x40>)
 8002b10:	4c0a      	ldr	r4, [pc, #40]	; (8002b3c <__libc_init_array+0x44>)
 8002b12:	1b64      	subs	r4, r4, r5
 8002b14:	10a4      	asrs	r4, r4, #2
 8002b16:	42a6      	cmp	r6, r4
 8002b18:	d105      	bne.n	8002b26 <__libc_init_array+0x2e>
 8002b1a:	bd70      	pop	{r4, r5, r6, pc}
 8002b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b20:	4798      	blx	r3
 8002b22:	3601      	adds	r6, #1
 8002b24:	e7ee      	b.n	8002b04 <__libc_init_array+0xc>
 8002b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b2a:	4798      	blx	r3
 8002b2c:	3601      	adds	r6, #1
 8002b2e:	e7f2      	b.n	8002b16 <__libc_init_array+0x1e>
 8002b30:	08002b98 	.word	0x08002b98
 8002b34:	08002b98 	.word	0x08002b98
 8002b38:	08002b98 	.word	0x08002b98
 8002b3c:	08002b9c 	.word	0x08002b9c

08002b40 <memset>:
 8002b40:	4603      	mov	r3, r0
 8002b42:	4402      	add	r2, r0
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d100      	bne.n	8002b4a <memset+0xa>
 8002b48:	4770      	bx	lr
 8002b4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002b4e:	e7f9      	b.n	8002b44 <memset+0x4>

08002b50 <_init>:
 8002b50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b52:	bf00      	nop
 8002b54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b56:	bc08      	pop	{r3}
 8002b58:	469e      	mov	lr, r3
 8002b5a:	4770      	bx	lr

08002b5c <_fini>:
 8002b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002b5e:	bf00      	nop
 8002b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002b62:	bc08      	pop	{r3}
 8002b64:	469e      	mov	lr, r3
 8002b66:	4770      	bx	lr
