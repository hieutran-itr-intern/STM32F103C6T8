
LEDs_RGB_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000029b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002ac4  08002ac4  00012ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ae4  08002ae4  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08002ae4  08002ae4  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ae4  08002ae4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ae4  08002ae4  00012ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ae8  08002ae8  00012ae8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002aec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  20000070  08002b5c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08002b5c  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008756  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ae  00000000  00000000  000287ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c8  00000000  00000000  00029da0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000920  00000000  00000000  0002a768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000165cc  00000000  00000000  0002b088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097a4  00000000  00000000  00041654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008411d  00000000  00000000  0004adf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000cef15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000284c  00000000  00000000  000cef68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002aac 	.word	0x08002aac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002aac 	.word	0x08002aac

0800014c <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM4)
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	681b      	ldr	r3, [r3, #0]
 8000158:	4a30      	ldr	r2, [pc, #192]	; (800021c <HAL_TIM_PeriodElapsedCallback+0xd0>)
 800015a:	4293      	cmp	r3, r2
 800015c:	d106      	bne.n	800016c <HAL_TIM_PeriodElapsedCallback+0x20>
	{
		en_LED =  1 - en_LED;
 800015e:	4b30      	ldr	r3, [pc, #192]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 8000160:	781b      	ldrb	r3, [r3, #0]
 8000162:	f1c3 0301 	rsb	r3, r3, #1
 8000166:	b2da      	uxtb	r2, r3
 8000168:	4b2d      	ldr	r3, [pc, #180]	; (8000220 <HAL_TIM_PeriodElapsedCallback+0xd4>)
 800016a:	701a      	strb	r2, [r3, #0]
	}

	if (htim->Instance == TIM1 && en_fade_mode == 1)
 800016c:	687b      	ldr	r3, [r7, #4]
 800016e:	681b      	ldr	r3, [r3, #0]
 8000170:	4a2c      	ldr	r2, [pc, #176]	; (8000224 <HAL_TIM_PeriodElapsedCallback+0xd8>)
 8000172:	4293      	cmp	r3, r2
 8000174:	d14c      	bne.n	8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8000176:	4b2c      	ldr	r3, [pc, #176]	; (8000228 <HAL_TIM_PeriodElapsedCallback+0xdc>)
 8000178:	781b      	ldrb	r3, [r3, #0]
 800017a:	2b01      	cmp	r3, #1
 800017c:	d148      	bne.n	8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>
	{
		if (di_LED == 0)
 800017e:	4b2b      	ldr	r3, [pc, #172]	; (800022c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 8000180:	781b      	ldrb	r3, [r3, #0]
 8000182:	2b00      	cmp	r3, #0
 8000184:	d121      	bne.n	80001ca <HAL_TIM_PeriodElapsedCallback+0x7e>
		{
			i_LED++;
 8000186:	4b2a      	ldr	r3, [pc, #168]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000188:	781b      	ldrb	r3, [r3, #0]
 800018a:	3301      	adds	r3, #1
 800018c:	b2da      	uxtb	r2, r3
 800018e:	4b28      	ldr	r3, [pc, #160]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000190:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, i_LED*79/99);
 8000192:	4b27      	ldr	r3, [pc, #156]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000194:	781b      	ldrb	r3, [r3, #0]
 8000196:	461a      	mov	r2, r3
 8000198:	4613      	mov	r3, r2
 800019a:	009b      	lsls	r3, r3, #2
 800019c:	4413      	add	r3, r2
 800019e:	011b      	lsls	r3, r3, #4
 80001a0:	1a9b      	subs	r3, r3, r2
 80001a2:	4a24      	ldr	r2, [pc, #144]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80001a4:	fb82 1203 	smull	r1, r2, r2, r3
 80001a8:	441a      	add	r2, r3
 80001aa:	1192      	asrs	r2, r2, #6
 80001ac:	17db      	asrs	r3, r3, #31
 80001ae:	1ad2      	subs	r2, r2, r3
 80001b0:	4b21      	ldr	r3, [pc, #132]	; (8000238 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	639a      	str	r2, [r3, #56]	; 0x38
			if (i_LED > bright_count_R) di_LED = 1;
 80001b6:	4b1e      	ldr	r3, [pc, #120]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001b8:	781b      	ldrb	r3, [r3, #0]
 80001ba:	461a      	mov	r2, r3
 80001bc:	4b1f      	ldr	r3, [pc, #124]	; (800023c <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80001be:	681b      	ldr	r3, [r3, #0]
 80001c0:	429a      	cmp	r2, r3
 80001c2:	d902      	bls.n	80001ca <HAL_TIM_PeriodElapsedCallback+0x7e>
 80001c4:	4b19      	ldr	r3, [pc, #100]	; (800022c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80001c6:	2201      	movs	r2, #1
 80001c8:	701a      	strb	r2, [r3, #0]
		}

		if (di_LED == 1)
 80001ca:	4b18      	ldr	r3, [pc, #96]	; (800022c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 80001cc:	781b      	ldrb	r3, [r3, #0]
 80001ce:	2b01      	cmp	r3, #1
 80001d0:	d11e      	bne.n	8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>
		{
			i_LED--;
 80001d2:	4b17      	ldr	r3, [pc, #92]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001d4:	781b      	ldrb	r3, [r3, #0]
 80001d6:	3b01      	subs	r3, #1
 80001d8:	b2da      	uxtb	r2, r3
 80001da:	4b15      	ldr	r3, [pc, #84]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001dc:	701a      	strb	r2, [r3, #0]
			  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, i_LED*79/99);
 80001de:	4b14      	ldr	r3, [pc, #80]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 80001e0:	781b      	ldrb	r3, [r3, #0]
 80001e2:	461a      	mov	r2, r3
 80001e4:	4613      	mov	r3, r2
 80001e6:	009b      	lsls	r3, r3, #2
 80001e8:	4413      	add	r3, r2
 80001ea:	011b      	lsls	r3, r3, #4
 80001ec:	1a9b      	subs	r3, r3, r2
 80001ee:	4a11      	ldr	r2, [pc, #68]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 80001f0:	fb82 1203 	smull	r1, r2, r2, r3
 80001f4:	441a      	add	r2, r3
 80001f6:	1192      	asrs	r2, r2, #6
 80001f8:	17db      	asrs	r3, r3, #31
 80001fa:	1ad2      	subs	r2, r2, r3
 80001fc:	4b0e      	ldr	r3, [pc, #56]	; (8000238 <HAL_TIM_PeriodElapsedCallback+0xec>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	639a      	str	r2, [r3, #56]	; 0x38
			if (i_LED < 1) di_LED = 0;
 8000202:	4b0b      	ldr	r3, [pc, #44]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0xe4>)
 8000204:	781b      	ldrb	r3, [r3, #0]
 8000206:	2b00      	cmp	r3, #0
 8000208:	d102      	bne.n	8000210 <HAL_TIM_PeriodElapsedCallback+0xc4>
 800020a:	4b08      	ldr	r3, [pc, #32]	; (800022c <HAL_TIM_PeriodElapsedCallback+0xe0>)
 800020c:	2200      	movs	r2, #0
 800020e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8000210:	bf00      	nop
 8000212:	370c      	adds	r7, #12
 8000214:	46bd      	mov	sp, r7
 8000216:	bc80      	pop	{r7}
 8000218:	4770      	bx	lr
 800021a:	bf00      	nop
 800021c:	40000800 	.word	0x40000800
 8000220:	200001b0 	.word	0x200001b0
 8000224:	40012c00 	.word	0x40012c00
 8000228:	200001b3 	.word	0x200001b3
 800022c:	200001b2 	.word	0x200001b2
 8000230:	200001b1 	.word	0x200001b1
 8000234:	a57eb503 	.word	0xa57eb503
 8000238:	200000d8 	.word	0x200000d8
 800023c:	200001c0 	.word	0x200001c0

08000240 <__RGB_Color>:
	if (en_LED == 1) __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, max_count + 1);
	if (en_LED == 0) __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, max_count - bright_count);
}

void __RGB_Color(uint8_t *Color_Table)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	  uint32_t PSC = 99;
 8000248:	2363      	movs	r3, #99	; 0x63
 800024a:	60fb      	str	r3, [r7, #12]
	  uint32_t max_count_RGB = 8000000/(250*(PSC + 1)) - 1;
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	3301      	adds	r3, #1
 8000250:	22fa      	movs	r2, #250	; 0xfa
 8000252:	fb02 f303 	mul.w	r3, r2, r3
 8000256:	4a2b      	ldr	r2, [pc, #172]	; (8000304 <__RGB_Color+0xc4>)
 8000258:	fbb2 f3f3 	udiv	r3, r2, r3
 800025c:	3b01      	subs	r3, #1
 800025e:	60bb      	str	r3, [r7, #8]
	  bright_count_R = *Color_Table*max_count_RGB/255;
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	781b      	ldrb	r3, [r3, #0]
 8000264:	461a      	mov	r2, r3
 8000266:	68bb      	ldr	r3, [r7, #8]
 8000268:	fb02 f303 	mul.w	r3, r2, r3
 800026c:	4a26      	ldr	r2, [pc, #152]	; (8000308 <__RGB_Color+0xc8>)
 800026e:	fba2 2303 	umull	r2, r3, r2, r3
 8000272:	09db      	lsrs	r3, r3, #7
 8000274:	4a25      	ldr	r2, [pc, #148]	; (800030c <__RGB_Color+0xcc>)
 8000276:	6013      	str	r3, [r2, #0]
	  bright_count_G = *(Color_Table + 1)*max_count_RGB/255;
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	3301      	adds	r3, #1
 800027c:	781b      	ldrb	r3, [r3, #0]
 800027e:	461a      	mov	r2, r3
 8000280:	68bb      	ldr	r3, [r7, #8]
 8000282:	fb02 f303 	mul.w	r3, r2, r3
 8000286:	4a20      	ldr	r2, [pc, #128]	; (8000308 <__RGB_Color+0xc8>)
 8000288:	fba2 2303 	umull	r2, r3, r2, r3
 800028c:	09db      	lsrs	r3, r3, #7
 800028e:	4a20      	ldr	r2, [pc, #128]	; (8000310 <__RGB_Color+0xd0>)
 8000290:	6013      	str	r3, [r2, #0]
	  bright_count_B = *(Color_Table + 2)*max_count_RGB/255;
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	3302      	adds	r3, #2
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	461a      	mov	r2, r3
 800029a:	68bb      	ldr	r3, [r7, #8]
 800029c:	fb02 f303 	mul.w	r3, r2, r3
 80002a0:	4a19      	ldr	r2, [pc, #100]	; (8000308 <__RGB_Color+0xc8>)
 80002a2:	fba2 2303 	umull	r2, r3, r2, r3
 80002a6:	09db      	lsrs	r3, r3, #7
 80002a8:	4a1a      	ldr	r2, [pc, #104]	; (8000314 <__RGB_Color+0xd4>)
 80002aa:	6013      	str	r3, [r2, #0]

	  //Set fade freq 80 Hz
	  __HAL_TIM_SET_AUTORELOAD(&htim1, 99);
 80002ac:	4b1a      	ldr	r3, [pc, #104]	; (8000318 <__RGB_Color+0xd8>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	2263      	movs	r2, #99	; 0x63
 80002b2:	62da      	str	r2, [r3, #44]	; 0x2c
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <__RGB_Color+0xd8>)
 80002b6:	2263      	movs	r2, #99	; 0x63
 80002b8:	60da      	str	r2, [r3, #12]
	  __HAL_TIM_SET_PRESCALER(&htim1, 999);
 80002ba:	4b17      	ldr	r3, [pc, #92]	; (8000318 <__RGB_Color+0xd8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002c2:	629a      	str	r2, [r3, #40]	; 0x28

	  //Set base timer for change pwm RGB - 250 Hz
	  __HAL_TIM_SET_AUTORELOAD(&htim2, max_count_RGB);
 80002c4:	4b15      	ldr	r3, [pc, #84]	; (800031c <__RGB_Color+0xdc>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	68ba      	ldr	r2, [r7, #8]
 80002ca:	62da      	str	r2, [r3, #44]	; 0x2c
 80002cc:	4a13      	ldr	r2, [pc, #76]	; (800031c <__RGB_Color+0xdc>)
 80002ce:	68bb      	ldr	r3, [r7, #8]
 80002d0:	60d3      	str	r3, [r2, #12]
	  __HAL_TIM_SET_PRESCALER(&htim2, PSC);
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <__RGB_Color+0xdc>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	68fa      	ldr	r2, [r7, #12]
 80002d8:	629a      	str	r2, [r3, #40]	; 0x28

	  //Set PWM for each R,G,B
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, bright_count_R);  //Red
 80002da:	4b10      	ldr	r3, [pc, #64]	; (800031c <__RGB_Color+0xdc>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a0b      	ldr	r2, [pc, #44]	; (800030c <__RGB_Color+0xcc>)
 80002e0:	6812      	ldr	r2, [r2, #0]
 80002e2:	641a      	str	r2, [r3, #64]	; 0x40
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, bright_count_G);  //Green
 80002e4:	4b0d      	ldr	r3, [pc, #52]	; (800031c <__RGB_Color+0xdc>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a09      	ldr	r2, [pc, #36]	; (8000310 <__RGB_Color+0xd0>)
 80002ea:	6812      	ldr	r2, [r2, #0]
 80002ec:	63da      	str	r2, [r3, #60]	; 0x3c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, bright_count_B);  //Blue
 80002ee:	4b0b      	ldr	r3, [pc, #44]	; (800031c <__RGB_Color+0xdc>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a08      	ldr	r2, [pc, #32]	; (8000314 <__RGB_Color+0xd4>)
 80002f4:	6812      	ldr	r2, [r2, #0]
 80002f6:	639a      	str	r2, [r3, #56]	; 0x38
}
 80002f8:	bf00      	nop
 80002fa:	3714      	adds	r7, #20
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bc80      	pop	{r7}
 8000300:	4770      	bx	lr
 8000302:	bf00      	nop
 8000304:	007a1200 	.word	0x007a1200
 8000308:	80808081 	.word	0x80808081
 800030c:	200001c0 	.word	0x200001c0
 8000310:	200001c4 	.word	0x200001c4
 8000314:	200001c8 	.word	0x200001c8
 8000318:	20000090 	.word	0x20000090
 800031c:	200000d8 	.word	0x200000d8

08000320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000324:	f000 fd2c 	bl	8000d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000328:	f000 f914 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800032c:	f000 fb06 	bl	800093c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000330:	f000 f99c 	bl	800066c <MX_TIM2_Init>
  MX_TIM3_Init();
 8000334:	f000 fa28 	bl	8000788 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000338:	f000 fab2 	bl	80008a0 <MX_TIM4_Init>
  MX_TIM1_Init();
 800033c:	f000 f946 	bl	80005cc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  //Turn on Timer 4 for Control LED period
  HAL_TIM_Base_Start_IT(&htim2);
 8000340:	487a      	ldr	r0, [pc, #488]	; (800052c <main+0x20c>)
 8000342:	f001 fc79 	bl	8001c38 <HAL_TIM_Base_Start_IT>

  //Turn on Timer 3 for LED power
  HAL_TIM_Base_Start_IT(&htim3);
 8000346:	487a      	ldr	r0, [pc, #488]	; (8000530 <main+0x210>)
 8000348:	f001 fc76 	bl	8001c38 <HAL_TIM_Base_Start_IT>

  //Turn on Timer 4 for Control LED period
  HAL_TIM_Base_Start_IT(&htim4);
 800034c:	4879      	ldr	r0, [pc, #484]	; (8000534 <main+0x214>)
 800034e:	f001 fc73 	bl	8001c38 <HAL_TIM_Base_Start_IT>

  //Turn on Timer 1 for Fade LED period
  HAL_TIM_Base_Start_IT(&htim1);
 8000352:	4879      	ldr	r0, [pc, #484]	; (8000538 <main+0x218>)
 8000354:	f001 fc70 	bl	8001c38 <HAL_TIM_Base_Start_IT>

  //Start turn ON PWM
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000358:	2104      	movs	r1, #4
 800035a:	4874      	ldr	r0, [pc, #464]	; (800052c <main+0x20c>)
 800035c:	f001 fd16 	bl	8001d8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000360:	2108      	movs	r1, #8
 8000362:	4872      	ldr	r0, [pc, #456]	; (800052c <main+0x20c>)
 8000364:	f001 fd12 	bl	8001d8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000368:	210c      	movs	r1, #12
 800036a:	4870      	ldr	r0, [pc, #448]	; (800052c <main+0x20c>)
 800036c:	f001 fd0e 	bl	8001d8c <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000370:	2104      	movs	r1, #4
 8000372:	486f      	ldr	r0, [pc, #444]	; (8000530 <main+0x210>)
 8000374:	f001 fd0a 	bl	8001d8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000378:	2108      	movs	r1, #8
 800037a:	486d      	ldr	r0, [pc, #436]	; (8000530 <main+0x210>)
 800037c:	f001 fd06 	bl	8001d8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 8000380:	210c      	movs	r1, #12
 8000382:	486b      	ldr	r0, [pc, #428]	; (8000530 <main+0x210>)
 8000384:	f001 fd02 	bl	8001d8c <HAL_TIM_PWM_Start>

  //Set start state for LED1, LED2, LED3
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 80);  //OFF
 8000388:	4b69      	ldr	r3, [pc, #420]	; (8000530 <main+0x210>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	2250      	movs	r2, #80	; 0x50
 800038e:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, 80);  //OFF
 8000390:	4b67      	ldr	r3, [pc, #412]	; (8000530 <main+0x210>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	2250      	movs	r2, #80	; 0x50
 8000396:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_4, 80);  //OFF
 8000398:	4b65      	ldr	r3, [pc, #404]	; (8000530 <main+0x210>)
 800039a:	681b      	ldr	r3, [r3, #0]
 800039c:	2250      	movs	r2, #80	; 0x50
 800039e:	641a      	str	r2, [r3, #64]	; 0x40

  //Set start state for R, G, B
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);  //OFF
 80003a0:	4b62      	ldr	r3, [pc, #392]	; (800052c <main+0x20c>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	2200      	movs	r2, #0
 80003a6:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 0);  //OFF
 80003a8:	4b60      	ldr	r3, [pc, #384]	; (800052c <main+0x20c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	2200      	movs	r2, #0
 80003ae:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_4, 0);  //OFF
 80003b0:	4b5e      	ldr	r3, [pc, #376]	; (800052c <main+0x20c>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	2200      	movs	r2, #0
 80003b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* USER CODE END 2 */
  HAL_InitTick(TICK_INT_PRIORITY); // Reset HAL_GetTick() to 0
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 fcf7 	bl	8000dac <HAL_InitTick>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	//  __LED_TIMER_Run(bright);
	    switch (state)
 80003be:	4b5f      	ldr	r3, [pc, #380]	; (800053c <main+0x21c>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b04      	cmp	r3, #4
 80003c4:	f200 80a6 	bhi.w	8000514 <main+0x1f4>
 80003c8:	a201      	add	r2, pc, #4	; (adr r2, 80003d0 <main+0xb0>)
 80003ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003ce:	bf00      	nop
 80003d0:	080003e5 	.word	0x080003e5
 80003d4:	08000515 	.word	0x08000515
 80003d8:	08000413 	.word	0x08000413
 80003dc:	0800046b 	.word	0x0800046b
 80003e0:	080004eb 	.word	0x080004eb
	    {
	      case IDLE:
	        if (button_interrupt == 1 && BUTTON_STATE == 0)
 80003e4:	4b56      	ldr	r3, [pc, #344]	; (8000540 <main+0x220>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b01      	cmp	r3, #1
 80003ea:	f040 8097 	bne.w	800051c <main+0x1fc>
 80003ee:	2120      	movs	r1, #32
 80003f0:	4854      	ldr	r0, [pc, #336]	; (8000544 <main+0x224>)
 80003f2:	f000 ffb9 	bl	8001368 <HAL_GPIO_ReadPin>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	f040 808f 	bne.w	800051c <main+0x1fc>
	        {
	          state = WAIT_PRESS_TIMEOUT;
 80003fe:	4b4f      	ldr	r3, [pc, #316]	; (800053c <main+0x21c>)
 8000400:	2202      	movs	r2, #2
 8000402:	701a      	strb	r2, [r3, #0]
	          t_timeout = HAL_GetTick() + 50;
 8000404:	f000 fd14 	bl	8000e30 <HAL_GetTick>
 8000408:	4603      	mov	r3, r0
 800040a:	3332      	adds	r3, #50	; 0x32
 800040c:	4a4e      	ldr	r2, [pc, #312]	; (8000548 <main+0x228>)
 800040e:	6013      	str	r3, [r2, #0]
	        }
	        break;
 8000410:	e084      	b.n	800051c <main+0x1fc>

	      case WAIT_PRESS_TIMEOUT:
	        if (BUTTON_STATE == 0 && HAL_GetTick() > t_timeout)
 8000412:	2120      	movs	r1, #32
 8000414:	484b      	ldr	r0, [pc, #300]	; (8000544 <main+0x224>)
 8000416:	f000 ffa7 	bl	8001368 <HAL_GPIO_ReadPin>
 800041a:	4603      	mov	r3, r0
 800041c:	2b00      	cmp	r3, #0
 800041e:	d10f      	bne.n	8000440 <main+0x120>
 8000420:	f000 fd06 	bl	8000e30 <HAL_GetTick>
 8000424:	4602      	mov	r2, r0
 8000426:	4b48      	ldr	r3, [pc, #288]	; (8000548 <main+0x228>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	429a      	cmp	r2, r3
 800042c:	d908      	bls.n	8000440 <main+0x120>
	        {
	          state = WAIT_CLICK_TIMEOUT;
 800042e:	4b43      	ldr	r3, [pc, #268]	; (800053c <main+0x21c>)
 8000430:	2203      	movs	r2, #3
 8000432:	701a      	strb	r2, [r3, #0]
	          t_timeout = HAL_GetTick() + 250;
 8000434:	f000 fcfc 	bl	8000e30 <HAL_GetTick>
 8000438:	4603      	mov	r3, r0
 800043a:	33fa      	adds	r3, #250	; 0xfa
 800043c:	4a42      	ldr	r2, [pc, #264]	; (8000548 <main+0x228>)
 800043e:	6013      	str	r3, [r2, #0]
	        }
	        if (BUTTON_STATE == 1 && HAL_GetTick() <= t_timeout)
 8000440:	2120      	movs	r1, #32
 8000442:	4840      	ldr	r0, [pc, #256]	; (8000544 <main+0x224>)
 8000444:	f000 ff90 	bl	8001368 <HAL_GPIO_ReadPin>
 8000448:	4603      	mov	r3, r0
 800044a:	2b01      	cmp	r3, #1
 800044c:	d168      	bne.n	8000520 <main+0x200>
 800044e:	f000 fcef 	bl	8000e30 <HAL_GetTick>
 8000452:	4602      	mov	r2, r0
 8000454:	4b3c      	ldr	r3, [pc, #240]	; (8000548 <main+0x228>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	429a      	cmp	r2, r3
 800045a:	d861      	bhi.n	8000520 <main+0x200>
	        {
	          state = IDLE;
 800045c:	4b37      	ldr	r3, [pc, #220]	; (800053c <main+0x21c>)
 800045e:	2200      	movs	r2, #0
 8000460:	701a      	strb	r2, [r3, #0]
	          button_interrupt = 0;
 8000462:	4b37      	ldr	r3, [pc, #220]	; (8000540 <main+0x220>)
 8000464:	2200      	movs	r2, #0
 8000466:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8000468:	e05a      	b.n	8000520 <main+0x200>

	      case WAIT_CLICK_TIMEOUT:
	        if (BUTTON_STATE == 1 && HAL_GetTick() <= t_timeout)
 800046a:	2120      	movs	r1, #32
 800046c:	4835      	ldr	r0, [pc, #212]	; (8000544 <main+0x224>)
 800046e:	f000 ff7b 	bl	8001368 <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
 8000474:	2b01      	cmp	r3, #1
 8000476:	d11f      	bne.n	80004b8 <main+0x198>
 8000478:	f000 fcda 	bl	8000e30 <HAL_GetTick>
 800047c:	4602      	mov	r2, r0
 800047e:	4b32      	ldr	r3, [pc, #200]	; (8000548 <main+0x228>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	429a      	cmp	r2, r3
 8000484:	d818      	bhi.n	80004b8 <main+0x198>
	        {
	          add_pointer_value = add_pointer_value + 3;
 8000486:	4b31      	ldr	r3, [pc, #196]	; (800054c <main+0x22c>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	3303      	adds	r3, #3
 800048c:	4a2f      	ldr	r2, [pc, #188]	; (800054c <main+0x22c>)
 800048e:	6013      	str	r3, [r2, #0]
	          if (add_pointer_value > 36) add_pointer_value = 0;
 8000490:	4b2e      	ldr	r3, [pc, #184]	; (800054c <main+0x22c>)
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	2b24      	cmp	r3, #36	; 0x24
 8000496:	d902      	bls.n	800049e <main+0x17e>
 8000498:	4b2c      	ldr	r3, [pc, #176]	; (800054c <main+0x22c>)
 800049a:	2200      	movs	r2, #0
 800049c:	601a      	str	r2, [r3, #0]
	          __RGB_Color(COLOR_TABLE + add_pointer_value);
 800049e:	4b2b      	ldr	r3, [pc, #172]	; (800054c <main+0x22c>)
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	4a2b      	ldr	r2, [pc, #172]	; (8000550 <main+0x230>)
 80004a4:	4413      	add	r3, r2
 80004a6:	4618      	mov	r0, r3
 80004a8:	f7ff feca 	bl	8000240 <__RGB_Color>
	          state = IDLE;
 80004ac:	4b23      	ldr	r3, [pc, #140]	; (800053c <main+0x21c>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	701a      	strb	r2, [r3, #0]
	          button_interrupt = 0;
 80004b2:	4b23      	ldr	r3, [pc, #140]	; (8000540 <main+0x220>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	701a      	strb	r2, [r3, #0]
	        }

	        if (BUTTON_STATE == 0 && HAL_GetTick() > t_timeout)
 80004b8:	2120      	movs	r1, #32
 80004ba:	4822      	ldr	r0, [pc, #136]	; (8000544 <main+0x224>)
 80004bc:	f000 ff54 	bl	8001368 <HAL_GPIO_ReadPin>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d12e      	bne.n	8000524 <main+0x204>
 80004c6:	f000 fcb3 	bl	8000e30 <HAL_GetTick>
 80004ca:	4602      	mov	r2, r0
 80004cc:	4b1e      	ldr	r3, [pc, #120]	; (8000548 <main+0x228>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	429a      	cmp	r2, r3
 80004d2:	d927      	bls.n	8000524 <main+0x204>
	        {
	          state = WAIT_HOLD_TIMEOUT;
 80004d4:	4b19      	ldr	r3, [pc, #100]	; (800053c <main+0x21c>)
 80004d6:	2204      	movs	r2, #4
 80004d8:	701a      	strb	r2, [r3, #0]
	          t_timeout = HAL_GetTick() + 2700;
 80004da:	f000 fca9 	bl	8000e30 <HAL_GetTick>
 80004de:	4603      	mov	r3, r0
 80004e0:	f603 238c 	addw	r3, r3, #2700	; 0xa8c
 80004e4:	4a18      	ldr	r2, [pc, #96]	; (8000548 <main+0x228>)
 80004e6:	6013      	str	r3, [r2, #0]
	        }
	        break;
 80004e8:	e01c      	b.n	8000524 <main+0x204>

	      case WAIT_HOLD_TIMEOUT:
	        if (BUTTON_STATE == 0 && HAL_GetTick() > t_timeout)
 80004ea:	2120      	movs	r1, #32
 80004ec:	4815      	ldr	r0, [pc, #84]	; (8000544 <main+0x224>)
 80004ee:	f000 ff3b 	bl	8001368 <HAL_GPIO_ReadPin>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d117      	bne.n	8000528 <main+0x208>
 80004f8:	f000 fc9a 	bl	8000e30 <HAL_GetTick>
 80004fc:	4602      	mov	r2, r0
 80004fe:	4b12      	ldr	r3, [pc, #72]	; (8000548 <main+0x228>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	429a      	cmp	r2, r3
 8000504:	d910      	bls.n	8000528 <main+0x208>
	        {
	          state = IDLE;
 8000506:	4b0d      	ldr	r3, [pc, #52]	; (800053c <main+0x21c>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]
	          button_interrupt = 0;
 800050c:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <main+0x220>)
 800050e:	2200      	movs	r2, #0
 8000510:	701a      	strb	r2, [r3, #0]
	        }
	        break;
 8000512:	e009      	b.n	8000528 <main+0x208>

	      default:
	          state = IDLE;
 8000514:	4b09      	ldr	r3, [pc, #36]	; (800053c <main+0x21c>)
 8000516:	2200      	movs	r2, #0
 8000518:	701a      	strb	r2, [r3, #0]
	          break;
 800051a:	e006      	b.n	800052a <main+0x20a>
	        break;
 800051c:	bf00      	nop
 800051e:	e74e      	b.n	80003be <main+0x9e>
	        break;
 8000520:	bf00      	nop
 8000522:	e74c      	b.n	80003be <main+0x9e>
	        break;
 8000524:	bf00      	nop
 8000526:	e74a      	b.n	80003be <main+0x9e>
	        break;
 8000528:	bf00      	nop
	    switch (state)
 800052a:	e748      	b.n	80003be <main+0x9e>
 800052c:	200000d8 	.word	0x200000d8
 8000530:	20000120 	.word	0x20000120
 8000534:	20000168 	.word	0x20000168
 8000538:	20000090 	.word	0x20000090
 800053c:	2000008c 	.word	0x2000008c
 8000540:	200001b4 	.word	0x200001b4
 8000544:	40010800 	.word	0x40010800
 8000548:	200001b8 	.word	0x200001b8
 800054c:	200001bc 	.word	0x200001bc
 8000550:	20000000 	.word	0x20000000

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b090      	sub	sp, #64	; 0x40
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0318 	add.w	r3, r7, #24
 800055e:	2228      	movs	r2, #40	; 0x28
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fa9a 	bl	8002a9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000576:	2302      	movs	r3, #2
 8000578:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	2301      	movs	r3, #1
 800057c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800057e:	2310      	movs	r3, #16
 8000580:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000582:	2300      	movs	r3, #0
 8000584:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	4618      	mov	r0, r3
 800058c:	f000 ff1c 	bl	80013c8 <HAL_RCC_OscConfig>
 8000590:	4603      	mov	r3, r0
 8000592:	2b00      	cmp	r3, #0
 8000594:	d001      	beq.n	800059a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000596:	f000 fa21 	bl	80009dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059a:	230f      	movs	r3, #15
 800059c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800059e:	2300      	movs	r3, #0
 80005a0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a2:	2300      	movs	r3, #0
 80005a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005aa:	2300      	movs	r3, #0
 80005ac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ae:	1d3b      	adds	r3, r7, #4
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f001 f98a 	bl	80018cc <HAL_RCC_ClockConfig>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80005be:	f000 fa0d 	bl	80009dc <Error_Handler>
  }
}
 80005c2:	bf00      	nop
 80005c4:	3740      	adds	r7, #64	; 0x40
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bd80      	pop	{r7, pc}
	...

080005cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005d2:	f107 0308 	add.w	r3, r7, #8
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <MX_TIM1_Init+0x98>)
 80005ea:	4a1f      	ldr	r2, [pc, #124]	; (8000668 <MX_TIM1_Init+0x9c>)
 80005ec:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1999;
 80005ee:	4b1d      	ldr	r3, [pc, #116]	; (8000664 <MX_TIM1_Init+0x98>)
 80005f0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80005f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <MX_TIM1_Init+0x98>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 99;
 80005fc:	4b19      	ldr	r3, [pc, #100]	; (8000664 <MX_TIM1_Init+0x98>)
 80005fe:	2263      	movs	r2, #99	; 0x63
 8000600:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000602:	4b18      	ldr	r3, [pc, #96]	; (8000664 <MX_TIM1_Init+0x98>)
 8000604:	2200      	movs	r2, #0
 8000606:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000608:	4b16      	ldr	r3, [pc, #88]	; (8000664 <MX_TIM1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800060e:	4b15      	ldr	r3, [pc, #84]	; (8000664 <MX_TIM1_Init+0x98>)
 8000610:	2280      	movs	r2, #128	; 0x80
 8000612:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000614:	4813      	ldr	r0, [pc, #76]	; (8000664 <MX_TIM1_Init+0x98>)
 8000616:	f001 fabf 	bl	8001b98 <HAL_TIM_Base_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000620:	f000 f9dc 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800062a:	f107 0308 	add.w	r3, r7, #8
 800062e:	4619      	mov	r1, r3
 8000630:	480c      	ldr	r0, [pc, #48]	; (8000664 <MX_TIM1_Init+0x98>)
 8000632:	f001 fe13 	bl	800225c <HAL_TIM_ConfigClockSource>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800063c:	f000 f9ce 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000640:	2300      	movs	r3, #0
 8000642:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	4619      	mov	r1, r3
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <MX_TIM1_Init+0x98>)
 800064e:	f002 f991 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000658:	f000 f9c0 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800065c:	bf00      	nop
 800065e:	3718      	adds	r7, #24
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	20000090 	.word	0x20000090
 8000668:	40012c00 	.word	0x40012c00

0800066c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b08e      	sub	sp, #56	; 0x38
 8000670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000672:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000680:	f107 0320 	add.w	r3, r7, #32
 8000684:	2200      	movs	r2, #0
 8000686:	601a      	str	r2, [r3, #0]
 8000688:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800068a:	1d3b      	adds	r3, r7, #4
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
 8000698:	615a      	str	r2, [r3, #20]
 800069a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800069c:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MX_TIM2_Init+0x118>)
 800069e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006a2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 3999;
 80006a4:	4b37      	ldr	r3, [pc, #220]	; (8000784 <MX_TIM2_Init+0x118>)
 80006a6:	f640 729f 	movw	r2, #3999	; 0xf9f
 80006aa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006ac:	4b35      	ldr	r3, [pc, #212]	; (8000784 <MX_TIM2_Init+0x118>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1999;
 80006b2:	4b34      	ldr	r3, [pc, #208]	; (8000784 <MX_TIM2_Init+0x118>)
 80006b4:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80006b8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006ba:	4b32      	ldr	r3, [pc, #200]	; (8000784 <MX_TIM2_Init+0x118>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80006c0:	4b30      	ldr	r3, [pc, #192]	; (8000784 <MX_TIM2_Init+0x118>)
 80006c2:	2280      	movs	r2, #128	; 0x80
 80006c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80006c6:	482f      	ldr	r0, [pc, #188]	; (8000784 <MX_TIM2_Init+0x118>)
 80006c8:	f001 fa66 	bl	8001b98 <HAL_TIM_Base_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80006d2:	f000 f983 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80006d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006da:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80006dc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006e0:	4619      	mov	r1, r3
 80006e2:	4828      	ldr	r0, [pc, #160]	; (8000784 <MX_TIM2_Init+0x118>)
 80006e4:	f001 fdba 	bl	800225c <HAL_TIM_ConfigClockSource>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80006ee:	f000 f975 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80006f2:	4824      	ldr	r0, [pc, #144]	; (8000784 <MX_TIM2_Init+0x118>)
 80006f4:	f001 faf2 	bl	8001cdc <HAL_TIM_PWM_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006fe:	f000 f96d 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000706:	2300      	movs	r3, #0
 8000708:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800070a:	f107 0320 	add.w	r3, r7, #32
 800070e:	4619      	mov	r1, r3
 8000710:	481c      	ldr	r0, [pc, #112]	; (8000784 <MX_TIM2_Init+0x118>)
 8000712:	f002 f92f 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 8000716:	4603      	mov	r3, r0
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 800071c:	f000 f95e 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000720:	2360      	movs	r3, #96	; 0x60
 8000722:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 999;
 8000724:	f240 33e7 	movw	r3, #999	; 0x3e7
 8000728:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800072a:	2300      	movs	r3, #0
 800072c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2204      	movs	r2, #4
 8000736:	4619      	mov	r1, r3
 8000738:	4812      	ldr	r0, [pc, #72]	; (8000784 <MX_TIM2_Init+0x118>)
 800073a:	f001 fcd1 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000744:	f000 f94a 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000748:	1d3b      	adds	r3, r7, #4
 800074a:	2208      	movs	r2, #8
 800074c:	4619      	mov	r1, r3
 800074e:	480d      	ldr	r0, [pc, #52]	; (8000784 <MX_TIM2_Init+0x118>)
 8000750:	f001 fcc6 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 800075a:	f000 f93f 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800075e:	1d3b      	adds	r3, r7, #4
 8000760:	220c      	movs	r2, #12
 8000762:	4619      	mov	r1, r3
 8000764:	4807      	ldr	r0, [pc, #28]	; (8000784 <MX_TIM2_Init+0x118>)
 8000766:	f001 fcbb 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000770:	f000 f934 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <MX_TIM2_Init+0x118>)
 8000776:	f000 f9f9 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 800077a:	bf00      	nop
 800077c:	3738      	adds	r7, #56	; 0x38
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000d8 	.word	0x200000d8

08000788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b08e      	sub	sp, #56	; 0x38
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800078e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800079c:	f107 0320 	add.w	r3, r7, #32
 80007a0:	2200      	movs	r2, #0
 80007a2:	601a      	str	r2, [r3, #0]
 80007a4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007a6:	1d3b      	adds	r3, r7, #4
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]
 80007b4:	615a      	str	r2, [r3, #20]
 80007b6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007b8:	4b37      	ldr	r3, [pc, #220]	; (8000898 <MX_TIM3_Init+0x110>)
 80007ba:	4a38      	ldr	r2, [pc, #224]	; (800089c <MX_TIM3_Init+0x114>)
 80007bc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 399;
 80007be:	4b36      	ldr	r3, [pc, #216]	; (8000898 <MX_TIM3_Init+0x110>)
 80007c0:	f240 128f 	movw	r2, #399	; 0x18f
 80007c4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007c6:	4b34      	ldr	r3, [pc, #208]	; (8000898 <MX_TIM3_Init+0x110>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 79;
 80007cc:	4b32      	ldr	r3, [pc, #200]	; (8000898 <MX_TIM3_Init+0x110>)
 80007ce:	224f      	movs	r2, #79	; 0x4f
 80007d0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007d2:	4b31      	ldr	r3, [pc, #196]	; (8000898 <MX_TIM3_Init+0x110>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007d8:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_TIM3_Init+0x110>)
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80007de:	482e      	ldr	r0, [pc, #184]	; (8000898 <MX_TIM3_Init+0x110>)
 80007e0:	f001 f9da 	bl	8001b98 <HAL_TIM_Base_Init>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80007ea:	f000 f8f7 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007f8:	4619      	mov	r1, r3
 80007fa:	4827      	ldr	r0, [pc, #156]	; (8000898 <MX_TIM3_Init+0x110>)
 80007fc:	f001 fd2e 	bl	800225c <HAL_TIM_ConfigClockSource>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d001      	beq.n	800080a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000806:	f000 f8e9 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800080a:	4823      	ldr	r0, [pc, #140]	; (8000898 <MX_TIM3_Init+0x110>)
 800080c:	f001 fa66 	bl	8001cdc <HAL_TIM_PWM_Init>
 8000810:	4603      	mov	r3, r0
 8000812:	2b00      	cmp	r3, #0
 8000814:	d001      	beq.n	800081a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000816:	f000 f8e1 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800081a:	2300      	movs	r3, #0
 800081c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800081e:	2300      	movs	r3, #0
 8000820:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000822:	f107 0320 	add.w	r3, r7, #32
 8000826:	4619      	mov	r1, r3
 8000828:	481b      	ldr	r0, [pc, #108]	; (8000898 <MX_TIM3_Init+0x110>)
 800082a:	f002 f8a3 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000834:	f000 f8d2 	bl	80009dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000838:	2360      	movs	r3, #96	; 0x60
 800083a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 39;
 800083c:	2327      	movs	r3, #39	; 0x27
 800083e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000840:	2300      	movs	r3, #0
 8000842:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000844:	2300      	movs	r3, #0
 8000846:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2204      	movs	r2, #4
 800084c:	4619      	mov	r1, r3
 800084e:	4812      	ldr	r0, [pc, #72]	; (8000898 <MX_TIM3_Init+0x110>)
 8000850:	f001 fc46 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800085a:	f000 f8bf 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2208      	movs	r2, #8
 8000862:	4619      	mov	r1, r3
 8000864:	480c      	ldr	r0, [pc, #48]	; (8000898 <MX_TIM3_Init+0x110>)
 8000866:	f001 fc3b 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000870:	f000 f8b4 	bl	80009dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000874:	1d3b      	adds	r3, r7, #4
 8000876:	220c      	movs	r2, #12
 8000878:	4619      	mov	r1, r3
 800087a:	4807      	ldr	r0, [pc, #28]	; (8000898 <MX_TIM3_Init+0x110>)
 800087c:	f001 fc30 	bl	80020e0 <HAL_TIM_PWM_ConfigChannel>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000886:	f000 f8a9 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800088a:	4803      	ldr	r0, [pc, #12]	; (8000898 <MX_TIM3_Init+0x110>)
 800088c:	f000 f96e 	bl	8000b6c <HAL_TIM_MspPostInit>

}
 8000890:	bf00      	nop
 8000892:	3738      	adds	r7, #56	; 0x38
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000120 	.word	0x20000120
 800089c:	40000400 	.word	0x40000400

080008a0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b086      	sub	sp, #24
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b4:	463b      	mov	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	601a      	str	r2, [r3, #0]
 80008ba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MX_TIM4_Init+0x94>)
 80008be:	4a1e      	ldr	r2, [pc, #120]	; (8000938 <MX_TIM4_Init+0x98>)
 80008c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 3999;
 80008c2:	4b1c      	ldr	r3, [pc, #112]	; (8000934 <MX_TIM4_Init+0x94>)
 80008c4:	f640 729f 	movw	r2, #3999	; 0xf9f
 80008c8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_TIM4_Init+0x94>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80008d0:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_TIM4_Init+0x94>)
 80008d2:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008d6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_TIM4_Init+0x94>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008de:	4b15      	ldr	r3, [pc, #84]	; (8000934 <MX_TIM4_Init+0x94>)
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80008e4:	4813      	ldr	r0, [pc, #76]	; (8000934 <MX_TIM4_Init+0x94>)
 80008e6:	f001 f957 	bl	8001b98 <HAL_TIM_Base_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80008f0:	f000 f874 	bl	80009dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80008fa:	f107 0308 	add.w	r3, r7, #8
 80008fe:	4619      	mov	r1, r3
 8000900:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_TIM4_Init+0x94>)
 8000902:	f001 fcab 	bl	800225c <HAL_TIM_ConfigClockSource>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800090c:	f000 f866 	bl	80009dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000910:	2300      	movs	r3, #0
 8000912:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000918:	463b      	mov	r3, r7
 800091a:	4619      	mov	r1, r3
 800091c:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_TIM4_Init+0x94>)
 800091e:	f002 f829 	bl	8002974 <HAL_TIMEx_MasterConfigSynchronization>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8000928:	f000 f858 	bl	80009dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	3718      	adds	r7, #24
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	20000168 	.word	0x20000168
 8000938:	40000800 	.word	0x40000800

0800093c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0308 	add.w	r3, r7, #8
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000950:	4b17      	ldr	r3, [pc, #92]	; (80009b0 <MX_GPIO_Init+0x74>)
 8000952:	699b      	ldr	r3, [r3, #24]
 8000954:	4a16      	ldr	r2, [pc, #88]	; (80009b0 <MX_GPIO_Init+0x74>)
 8000956:	f043 0304 	orr.w	r3, r3, #4
 800095a:	6193      	str	r3, [r2, #24]
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <MX_GPIO_Init+0x74>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	f003 0304 	and.w	r3, r3, #4
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000968:	4b11      	ldr	r3, [pc, #68]	; (80009b0 <MX_GPIO_Init+0x74>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a10      	ldr	r2, [pc, #64]	; (80009b0 <MX_GPIO_Init+0x74>)
 800096e:	f043 0308 	orr.w	r3, r3, #8
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b0e      	ldr	r3, [pc, #56]	; (80009b0 <MX_GPIO_Init+0x74>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f003 0308 	and.w	r3, r3, #8
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000980:	2320      	movs	r3, #32
 8000982:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000984:	4b0b      	ldr	r3, [pc, #44]	; (80009b4 <MX_GPIO_Init+0x78>)
 8000986:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000988:	2301      	movs	r3, #1
 800098a:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	4619      	mov	r1, r3
 8000992:	4809      	ldr	r0, [pc, #36]	; (80009b8 <MX_GPIO_Init+0x7c>)
 8000994:	f000 fb64 	bl	8001060 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000998:	2200      	movs	r2, #0
 800099a:	2100      	movs	r1, #0
 800099c:	2017      	movs	r0, #23
 800099e:	f000 fb28 	bl	8000ff2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009a2:	2017      	movs	r0, #23
 80009a4:	f000 fb41 	bl	800102a <HAL_NVIC_EnableIRQ>

}
 80009a8:	bf00      	nop
 80009aa:	3718      	adds	r7, #24
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40021000 	.word	0x40021000
 80009b4:	10210000 	.word	0x10210000
 80009b8:	40010800 	.word	0x40010800

080009bc <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	80fb      	strh	r3, [r7, #6]
	button_interrupt = 1;
 80009c6:	4b04      	ldr	r3, [pc, #16]	; (80009d8 <HAL_GPIO_EXTI_Callback+0x1c>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bc80      	pop	{r7}
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	200001b4 	.word	0x200001b4

080009dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009e0:	b672      	cpsid	i
}
 80009e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009e4:	e7fe      	b.n	80009e4 <Error_Handler+0x8>
	...

080009e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80009ee:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f0:	699b      	ldr	r3, [r3, #24]
 80009f2:	4a14      	ldr	r2, [pc, #80]	; (8000a44 <HAL_MspInit+0x5c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6193      	str	r3, [r2, #24]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <HAL_MspInit+0x5c>)
 80009fc:	699b      	ldr	r3, [r3, #24]
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60bb      	str	r3, [r7, #8]
 8000a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x5c>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	; (8000a48 <HAL_MspInit+0x60>)
 8000a20:	685b      	ldr	r3, [r3, #4]
 8000a22:	60fb      	str	r3, [r7, #12]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	4a04      	ldr	r2, [pc, #16]	; (8000a48 <HAL_MspInit+0x60>)
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	3714      	adds	r7, #20
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bc80      	pop	{r7}
 8000a42:	4770      	bx	lr
 8000a44:	40021000 	.word	0x40021000
 8000a48:	40010000 	.word	0x40010000

08000a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a40      	ldr	r2, [pc, #256]	; (8000b5c <HAL_TIM_Base_MspInit+0x110>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d12c      	bne.n	8000ab8 <HAL_TIM_Base_MspInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a5e:	4b40      	ldr	r3, [pc, #256]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000a60:	699b      	ldr	r3, [r3, #24]
 8000a62:	4a3f      	ldr	r2, [pc, #252]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000a64:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000a68:	6193      	str	r3, [r2, #24]
 8000a6a:	4b3d      	ldr	r3, [pc, #244]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000a6c:	699b      	ldr	r3, [r3, #24]
 8000a6e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000a72:	617b      	str	r3, [r7, #20]
 8000a74:	697b      	ldr	r3, [r7, #20]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2018      	movs	r0, #24
 8000a7c:	f000 fab9 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8000a80:	2018      	movs	r0, #24
 8000a82:	f000 fad2 	bl	800102a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2019      	movs	r0, #25
 8000a8c:	f000 fab1 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000a90:	2019      	movs	r0, #25
 8000a92:	f000 faca 	bl	800102a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	201a      	movs	r0, #26
 8000a9c:	f000 faa9 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8000aa0:	201a      	movs	r0, #26
 8000aa2:	f000 fac2 	bl	800102a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	201b      	movs	r0, #27
 8000aac:	f000 faa1 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000ab0:	201b      	movs	r0, #27
 8000ab2:	f000 faba 	bl	800102a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000ab6:	e04c      	b.n	8000b52 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM2)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ac0:	d114      	bne.n	8000aec <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ac2:	4b27      	ldr	r3, [pc, #156]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000ac4:	69db      	ldr	r3, [r3, #28]
 8000ac6:	4a26      	ldr	r2, [pc, #152]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	61d3      	str	r3, [r2, #28]
 8000ace:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000ad0:	69db      	ldr	r3, [r3, #28]
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	613b      	str	r3, [r7, #16]
 8000ad8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8000ada:	2200      	movs	r2, #0
 8000adc:	2101      	movs	r1, #1
 8000ade:	201c      	movs	r0, #28
 8000ae0:	f000 fa87 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000ae4:	201c      	movs	r0, #28
 8000ae6:	f000 faa0 	bl	800102a <HAL_NVIC_EnableIRQ>
}
 8000aea:	e032      	b.n	8000b52 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM3)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	4a1c      	ldr	r2, [pc, #112]	; (8000b64 <HAL_TIM_Base_MspInit+0x118>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d114      	bne.n	8000b20 <HAL_TIM_Base_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000af6:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000af8:	69db      	ldr	r3, [r3, #28]
 8000afa:	4a19      	ldr	r2, [pc, #100]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	61d3      	str	r3, [r2, #28]
 8000b02:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000b04:	69db      	ldr	r3, [r3, #28]
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 1, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2101      	movs	r1, #1
 8000b12:	201d      	movs	r0, #29
 8000b14:	f000 fa6d 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b18:	201d      	movs	r0, #29
 8000b1a:	f000 fa86 	bl	800102a <HAL_NVIC_EnableIRQ>
}
 8000b1e:	e018      	b.n	8000b52 <HAL_TIM_Base_MspInit+0x106>
  else if(htim_base->Instance==TIM4)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a10      	ldr	r2, [pc, #64]	; (8000b68 <HAL_TIM_Base_MspInit+0x11c>)
 8000b26:	4293      	cmp	r3, r2
 8000b28:	d113      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x106>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000b2a:	4b0d      	ldr	r3, [pc, #52]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000b2c:	69db      	ldr	r3, [r3, #28]
 8000b2e:	4a0c      	ldr	r2, [pc, #48]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000b30:	f043 0304 	orr.w	r3, r3, #4
 8000b34:	61d3      	str	r3, [r2, #28]
 8000b36:	4b0a      	ldr	r3, [pc, #40]	; (8000b60 <HAL_TIM_Base_MspInit+0x114>)
 8000b38:	69db      	ldr	r3, [r3, #28]
 8000b3a:	f003 0304 	and.w	r3, r3, #4
 8000b3e:	60bb      	str	r3, [r7, #8]
 8000b40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2100      	movs	r1, #0
 8000b46:	201e      	movs	r0, #30
 8000b48:	f000 fa53 	bl	8000ff2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000b4c:	201e      	movs	r0, #30
 8000b4e:	f000 fa6c 	bl	800102a <HAL_NVIC_EnableIRQ>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40012c00 	.word	0x40012c00
 8000b60:	40021000 	.word	0x40021000
 8000b64:	40000400 	.word	0x40000400
 8000b68:	40000800 	.word	0x40000800

08000b6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	; 0x28
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b74:	f107 0318 	add.w	r3, r7, #24
 8000b78:	2200      	movs	r2, #0
 8000b7a:	601a      	str	r2, [r3, #0]
 8000b7c:	605a      	str	r2, [r3, #4]
 8000b7e:	609a      	str	r2, [r3, #8]
 8000b80:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b8a:	d118      	bne.n	8000bbe <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b8c:	4b28      	ldr	r3, [pc, #160]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a27      	ldr	r2, [pc, #156]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000b92:	f043 0304 	orr.w	r3, r3, #4
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b25      	ldr	r3, [pc, #148]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0304 	and.w	r3, r3, #4
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = B_Pin|G_Pin|R_Pin;
 8000ba4:	230e      	movs	r3, #14
 8000ba6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2302      	movs	r3, #2
 8000bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 0318 	add.w	r3, r7, #24
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	481f      	ldr	r0, [pc, #124]	; (8000c34 <HAL_TIM_MspPostInit+0xc8>)
 8000bb8:	f000 fa52 	bl	8001060 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000bbc:	e034      	b.n	8000c28 <HAL_TIM_MspPostInit+0xbc>
  else if(htim->Instance==TIM3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a1d      	ldr	r2, [pc, #116]	; (8000c38 <HAL_TIM_MspPostInit+0xcc>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d12f      	bne.n	8000c28 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc8:	4b19      	ldr	r3, [pc, #100]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000bca:	699b      	ldr	r3, [r3, #24]
 8000bcc:	4a18      	ldr	r2, [pc, #96]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000bce:	f043 0304 	orr.w	r3, r3, #4
 8000bd2:	6193      	str	r3, [r2, #24]
 8000bd4:	4b16      	ldr	r3, [pc, #88]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000bd6:	699b      	ldr	r3, [r3, #24]
 8000bd8:	f003 0304 	and.w	r3, r3, #4
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000be0:	4b13      	ldr	r3, [pc, #76]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000be2:	699b      	ldr	r3, [r3, #24]
 8000be4:	4a12      	ldr	r2, [pc, #72]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000be6:	f043 0308 	orr.w	r3, r3, #8
 8000bea:	6193      	str	r3, [r2, #24]
 8000bec:	4b10      	ldr	r3, [pc, #64]	; (8000c30 <HAL_TIM_MspPostInit+0xc4>)
 8000bee:	699b      	ldr	r3, [r3, #24]
 8000bf0:	f003 0308 	and.w	r3, r3, #8
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LED3_Pin;
 8000bf8:	2380      	movs	r3, #128	; 0x80
 8000bfa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2302      	movs	r3, #2
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000c04:	f107 0318 	add.w	r3, r7, #24
 8000c08:	4619      	mov	r1, r3
 8000c0a:	480a      	ldr	r0, [pc, #40]	; (8000c34 <HAL_TIM_MspPostInit+0xc8>)
 8000c0c:	f000 fa28 	bl	8001060 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8000c10:	2303      	movs	r3, #3
 8000c12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	4806      	ldr	r0, [pc, #24]	; (8000c3c <HAL_TIM_MspPostInit+0xd0>)
 8000c24:	f000 fa1c 	bl	8001060 <HAL_GPIO_Init>
}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	40010c00 	.word	0x40010c00

08000c40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <NMI_Handler+0x4>

08000c46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c46:	b480      	push	{r7}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c4a:	e7fe      	b.n	8000c4a <HardFault_Handler+0x4>

08000c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c50:	e7fe      	b.n	8000c50 <MemManage_Handler+0x4>

08000c52 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c52:	b480      	push	{r7}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c56:	e7fe      	b.n	8000c56 <BusFault_Handler+0x4>

08000c58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c5c:	e7fe      	b.n	8000c5c <UsageFault_Handler+0x4>

08000c5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5e:	b480      	push	{r7}
 8000c60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bc80      	pop	{r7}
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bc80      	pop	{r7}
 8000c74:	4770      	bx	lr

08000c76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c76:	b480      	push	{r7}
 8000c78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bc80      	pop	{r7}
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 f8c1 	bl	8000e0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 8000c92:	2020      	movs	r0, #32
 8000c94:	f000 fb80 	bl	8001398 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000ca0:	4802      	ldr	r0, [pc, #8]	; (8000cac <TIM1_BRK_IRQHandler+0x10>)
 8000ca2:	f001 f915 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	20000090 	.word	0x20000090

08000cb0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cb4:	4802      	ldr	r0, [pc, #8]	; (8000cc0 <TIM1_UP_IRQHandler+0x10>)
 8000cb6:	f001 f90b 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000090 	.word	0x20000090

08000cc4 <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cc8:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <TIM1_TRG_COM_IRQHandler+0x10>)
 8000cca:	f001 f901 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	20000090 	.word	0x20000090

08000cd8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000cdc:	4802      	ldr	r0, [pc, #8]	; (8000ce8 <TIM1_CC_IRQHandler+0x10>)
 8000cde:	f001 f8f7 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000090 	.word	0x20000090

08000cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000cf0:	4802      	ldr	r0, [pc, #8]	; (8000cfc <TIM2_IRQHandler+0x10>)
 8000cf2:	f001 f8ed 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	200000d8 	.word	0x200000d8

08000d00 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d04:	4802      	ldr	r0, [pc, #8]	; (8000d10 <TIM3_IRQHandler+0x10>)
 8000d06:	f001 f8e3 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	bf00      	nop
 8000d10:	20000120 	.word	0x20000120

08000d14 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000d18:	4802      	ldr	r0, [pc, #8]	; (8000d24 <TIM4_IRQHandler+0x10>)
 8000d1a:	f001 f8d9 	bl	8001ed0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	20000168 	.word	0x20000168

08000d28 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bc80      	pop	{r7}
 8000d32:	4770      	bx	lr

08000d34 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d34:	480c      	ldr	r0, [pc, #48]	; (8000d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d36:	490d      	ldr	r1, [pc, #52]	; (8000d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d38:	4a0d      	ldr	r2, [pc, #52]	; (8000d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d3c:	e002      	b.n	8000d44 <LoopCopyDataInit>

08000d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d42:	3304      	adds	r3, #4

08000d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d48:	d3f9      	bcc.n	8000d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d4a:	4a0a      	ldr	r2, [pc, #40]	; (8000d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d4c:	4c0a      	ldr	r4, [pc, #40]	; (8000d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d50:	e001      	b.n	8000d56 <LoopFillZerobss>

08000d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d54:	3204      	adds	r2, #4

08000d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d58:	d3fb      	bcc.n	8000d52 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d5a:	f7ff ffe5 	bl	8000d28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d5e:	f001 fe79 	bl	8002a54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d62:	f7ff fadd 	bl	8000320 <main>
  bx lr
 8000d66:	4770      	bx	lr
  ldr r0, =_sdata
 8000d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d6c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d70:	08002aec 	.word	0x08002aec
  ldr r2, =_sbss
 8000d74:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d78:	200001d0 	.word	0x200001d0

08000d7c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d7c:	e7fe      	b.n	8000d7c <ADC1_2_IRQHandler>
	...

08000d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d84:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_Init+0x28>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a07      	ldr	r2, [pc, #28]	; (8000da8 <HAL_Init+0x28>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d90:	2003      	movs	r0, #3
 8000d92:	f000 f923 	bl	8000fdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d96:	2000      	movs	r0, #0
 8000d98:	f000 f808 	bl	8000dac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d9c:	f7ff fe24 	bl	80009e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	40022000 	.word	0x40022000

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <HAL_InitTick+0x54>)
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	4b12      	ldr	r3, [pc, #72]	; (8000e04 <HAL_InitTick+0x58>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dc2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dc6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dca:	4618      	mov	r0, r3
 8000dcc:	f000 f93b 	bl	8001046 <HAL_SYSTICK_Config>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dd6:	2301      	movs	r3, #1
 8000dd8:	e00e      	b.n	8000df8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2b0f      	cmp	r3, #15
 8000dde:	d80a      	bhi.n	8000df6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de0:	2200      	movs	r2, #0
 8000de2:	6879      	ldr	r1, [r7, #4]
 8000de4:	f04f 30ff 	mov.w	r0, #4294967295
 8000de8:	f000 f903 	bl	8000ff2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dec:	4a06      	ldr	r2, [pc, #24]	; (8000e08 <HAL_InitTick+0x5c>)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000df2:	2300      	movs	r3, #0
 8000df4:	e000      	b.n	8000df8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000df6:	2301      	movs	r3, #1
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3708      	adds	r7, #8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20000064 	.word	0x20000064
 8000e04:	2000006c 	.word	0x2000006c
 8000e08:	20000068 	.word	0x20000068

08000e0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <HAL_IncTick+0x1c>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	461a      	mov	r2, r3
 8000e16:	4b05      	ldr	r3, [pc, #20]	; (8000e2c <HAL_IncTick+0x20>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	4a03      	ldr	r2, [pc, #12]	; (8000e2c <HAL_IncTick+0x20>)
 8000e1e:	6013      	str	r3, [r2, #0]
}
 8000e20:	bf00      	nop
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bc80      	pop	{r7}
 8000e26:	4770      	bx	lr
 8000e28:	2000006c 	.word	0x2000006c
 8000e2c:	200001cc 	.word	0x200001cc

08000e30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  return uwTick;
 8000e34:	4b02      	ldr	r3, [pc, #8]	; (8000e40 <HAL_GetTick+0x10>)
 8000e36:	681b      	ldr	r3, [r3, #0]
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bc80      	pop	{r7}
 8000e3e:	4770      	bx	lr
 8000e40:	200001cc 	.word	0x200001cc

08000e44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e44:	b480      	push	{r7}
 8000e46:	b085      	sub	sp, #20
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	f003 0307 	and.w	r3, r3, #7
 8000e52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e54:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e5a:	68ba      	ldr	r2, [r7, #8]
 8000e5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e60:	4013      	ands	r3, r2
 8000e62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e76:	4a04      	ldr	r2, [pc, #16]	; (8000e88 <__NVIC_SetPriorityGrouping+0x44>)
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	60d3      	str	r3, [r2, #12]
}
 8000e7c:	bf00      	nop
 8000e7e:	3714      	adds	r7, #20
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bc80      	pop	{r7}
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	e000ed00 	.word	0xe000ed00

08000e8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e90:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <__NVIC_GetPriorityGrouping+0x18>)
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	0a1b      	lsrs	r3, r3, #8
 8000e96:	f003 0307 	and.w	r3, r3, #7
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bc80      	pop	{r7}
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop
 8000ea4:	e000ed00 	.word	0xe000ed00

08000ea8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	db0b      	blt.n	8000ed2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	f003 021f 	and.w	r2, r3, #31
 8000ec0:	4906      	ldr	r1, [pc, #24]	; (8000edc <__NVIC_EnableIRQ+0x34>)
 8000ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ec6:	095b      	lsrs	r3, r3, #5
 8000ec8:	2001      	movs	r0, #1
 8000eca:	fa00 f202 	lsl.w	r2, r0, r2
 8000ece:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ed2:	bf00      	nop
 8000ed4:	370c      	adds	r7, #12
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bc80      	pop	{r7}
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100

08000ee0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	6039      	str	r1, [r7, #0]
 8000eea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	db0a      	blt.n	8000f0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	b2da      	uxtb	r2, r3
 8000ef8:	490c      	ldr	r1, [pc, #48]	; (8000f2c <__NVIC_SetPriority+0x4c>)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	0112      	lsls	r2, r2, #4
 8000f00:	b2d2      	uxtb	r2, r2
 8000f02:	440b      	add	r3, r1
 8000f04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f08:	e00a      	b.n	8000f20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	4908      	ldr	r1, [pc, #32]	; (8000f30 <__NVIC_SetPriority+0x50>)
 8000f10:	79fb      	ldrb	r3, [r7, #7]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	3b04      	subs	r3, #4
 8000f18:	0112      	lsls	r2, r2, #4
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	440b      	add	r3, r1
 8000f1e:	761a      	strb	r2, [r3, #24]
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bc80      	pop	{r7}
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	e000e100 	.word	0xe000e100
 8000f30:	e000ed00 	.word	0xe000ed00

08000f34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f34:	b480      	push	{r7}
 8000f36:	b089      	sub	sp, #36	; 0x24
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	60f8      	str	r0, [r7, #12]
 8000f3c:	60b9      	str	r1, [r7, #8]
 8000f3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f48:	69fb      	ldr	r3, [r7, #28]
 8000f4a:	f1c3 0307 	rsb	r3, r3, #7
 8000f4e:	2b04      	cmp	r3, #4
 8000f50:	bf28      	it	cs
 8000f52:	2304      	movcs	r3, #4
 8000f54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	3304      	adds	r3, #4
 8000f5a:	2b06      	cmp	r3, #6
 8000f5c:	d902      	bls.n	8000f64 <NVIC_EncodePriority+0x30>
 8000f5e:	69fb      	ldr	r3, [r7, #28]
 8000f60:	3b03      	subs	r3, #3
 8000f62:	e000      	b.n	8000f66 <NVIC_EncodePriority+0x32>
 8000f64:	2300      	movs	r3, #0
 8000f66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f68:	f04f 32ff 	mov.w	r2, #4294967295
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f72:	43da      	mvns	r2, r3
 8000f74:	68bb      	ldr	r3, [r7, #8]
 8000f76:	401a      	ands	r2, r3
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	fa01 f303 	lsl.w	r3, r1, r3
 8000f86:	43d9      	mvns	r1, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f8c:	4313      	orrs	r3, r2
         );
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	3724      	adds	r7, #36	; 0x24
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	3b01      	subs	r3, #1
 8000fa4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fa8:	d301      	bcc.n	8000fae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000faa:	2301      	movs	r3, #1
 8000fac:	e00f      	b.n	8000fce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fae:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <SysTick_Config+0x40>)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	3b01      	subs	r3, #1
 8000fb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fb6:	210f      	movs	r1, #15
 8000fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fbc:	f7ff ff90 	bl	8000ee0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fc0:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fc6:	4b04      	ldr	r3, [pc, #16]	; (8000fd8 <SysTick_Config+0x40>)
 8000fc8:	2207      	movs	r2, #7
 8000fca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	e000e010 	.word	0xe000e010

08000fdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff2d 	bl	8000e44 <__NVIC_SetPriorityGrouping>
}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	b086      	sub	sp, #24
 8000ff6:	af00      	add	r7, sp, #0
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	60b9      	str	r1, [r7, #8]
 8000ffc:	607a      	str	r2, [r7, #4]
 8000ffe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001000:	2300      	movs	r3, #0
 8001002:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001004:	f7ff ff42 	bl	8000e8c <__NVIC_GetPriorityGrouping>
 8001008:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800100a:	687a      	ldr	r2, [r7, #4]
 800100c:	68b9      	ldr	r1, [r7, #8]
 800100e:	6978      	ldr	r0, [r7, #20]
 8001010:	f7ff ff90 	bl	8000f34 <NVIC_EncodePriority>
 8001014:	4602      	mov	r2, r0
 8001016:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800101a:	4611      	mov	r1, r2
 800101c:	4618      	mov	r0, r3
 800101e:	f7ff ff5f 	bl	8000ee0 <__NVIC_SetPriority>
}
 8001022:	bf00      	nop
 8001024:	3718      	adds	r7, #24
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}

0800102a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800102a:	b580      	push	{r7, lr}
 800102c:	b082      	sub	sp, #8
 800102e:	af00      	add	r7, sp, #0
 8001030:	4603      	mov	r3, r0
 8001032:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001034:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff35 	bl	8000ea8 <__NVIC_EnableIRQ>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ffa2 	bl	8000f98 <SysTick_Config>
 8001054:	4603      	mov	r3, r0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3708      	adds	r7, #8
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001060:	b480      	push	{r7}
 8001062:	b08b      	sub	sp, #44	; 0x2c
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800106a:	2300      	movs	r3, #0
 800106c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800106e:	2300      	movs	r3, #0
 8001070:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001072:	e169      	b.n	8001348 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001074:	2201      	movs	r2, #1
 8001076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001078:	fa02 f303 	lsl.w	r3, r2, r3
 800107c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	69fa      	ldr	r2, [r7, #28]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	429a      	cmp	r2, r3
 800108e:	f040 8158 	bne.w	8001342 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	4a9a      	ldr	r2, [pc, #616]	; (8001300 <HAL_GPIO_Init+0x2a0>)
 8001098:	4293      	cmp	r3, r2
 800109a:	d05e      	beq.n	800115a <HAL_GPIO_Init+0xfa>
 800109c:	4a98      	ldr	r2, [pc, #608]	; (8001300 <HAL_GPIO_Init+0x2a0>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d875      	bhi.n	800118e <HAL_GPIO_Init+0x12e>
 80010a2:	4a98      	ldr	r2, [pc, #608]	; (8001304 <HAL_GPIO_Init+0x2a4>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d058      	beq.n	800115a <HAL_GPIO_Init+0xfa>
 80010a8:	4a96      	ldr	r2, [pc, #600]	; (8001304 <HAL_GPIO_Init+0x2a4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d86f      	bhi.n	800118e <HAL_GPIO_Init+0x12e>
 80010ae:	4a96      	ldr	r2, [pc, #600]	; (8001308 <HAL_GPIO_Init+0x2a8>)
 80010b0:	4293      	cmp	r3, r2
 80010b2:	d052      	beq.n	800115a <HAL_GPIO_Init+0xfa>
 80010b4:	4a94      	ldr	r2, [pc, #592]	; (8001308 <HAL_GPIO_Init+0x2a8>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d869      	bhi.n	800118e <HAL_GPIO_Init+0x12e>
 80010ba:	4a94      	ldr	r2, [pc, #592]	; (800130c <HAL_GPIO_Init+0x2ac>)
 80010bc:	4293      	cmp	r3, r2
 80010be:	d04c      	beq.n	800115a <HAL_GPIO_Init+0xfa>
 80010c0:	4a92      	ldr	r2, [pc, #584]	; (800130c <HAL_GPIO_Init+0x2ac>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d863      	bhi.n	800118e <HAL_GPIO_Init+0x12e>
 80010c6:	4a92      	ldr	r2, [pc, #584]	; (8001310 <HAL_GPIO_Init+0x2b0>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d046      	beq.n	800115a <HAL_GPIO_Init+0xfa>
 80010cc:	4a90      	ldr	r2, [pc, #576]	; (8001310 <HAL_GPIO_Init+0x2b0>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d85d      	bhi.n	800118e <HAL_GPIO_Init+0x12e>
 80010d2:	2b12      	cmp	r3, #18
 80010d4:	d82a      	bhi.n	800112c <HAL_GPIO_Init+0xcc>
 80010d6:	2b12      	cmp	r3, #18
 80010d8:	d859      	bhi.n	800118e <HAL_GPIO_Init+0x12e>
 80010da:	a201      	add	r2, pc, #4	; (adr r2, 80010e0 <HAL_GPIO_Init+0x80>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	0800115b 	.word	0x0800115b
 80010e4:	08001135 	.word	0x08001135
 80010e8:	08001147 	.word	0x08001147
 80010ec:	08001189 	.word	0x08001189
 80010f0:	0800118f 	.word	0x0800118f
 80010f4:	0800118f 	.word	0x0800118f
 80010f8:	0800118f 	.word	0x0800118f
 80010fc:	0800118f 	.word	0x0800118f
 8001100:	0800118f 	.word	0x0800118f
 8001104:	0800118f 	.word	0x0800118f
 8001108:	0800118f 	.word	0x0800118f
 800110c:	0800118f 	.word	0x0800118f
 8001110:	0800118f 	.word	0x0800118f
 8001114:	0800118f 	.word	0x0800118f
 8001118:	0800118f 	.word	0x0800118f
 800111c:	0800118f 	.word	0x0800118f
 8001120:	0800118f 	.word	0x0800118f
 8001124:	0800113d 	.word	0x0800113d
 8001128:	08001151 	.word	0x08001151
 800112c:	4a79      	ldr	r2, [pc, #484]	; (8001314 <HAL_GPIO_Init+0x2b4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d013      	beq.n	800115a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001132:	e02c      	b.n	800118e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e029      	b.n	8001190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	68db      	ldr	r3, [r3, #12]
 8001140:	3304      	adds	r3, #4
 8001142:	623b      	str	r3, [r7, #32]
          break;
 8001144:	e024      	b.n	8001190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	3308      	adds	r3, #8
 800114c:	623b      	str	r3, [r7, #32]
          break;
 800114e:	e01f      	b.n	8001190 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	330c      	adds	r3, #12
 8001156:	623b      	str	r3, [r7, #32]
          break;
 8001158:	e01a      	b.n	8001190 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001162:	2304      	movs	r3, #4
 8001164:	623b      	str	r3, [r7, #32]
          break;
 8001166:	e013      	b.n	8001190 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d105      	bne.n	800117c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001170:	2308      	movs	r3, #8
 8001172:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69fa      	ldr	r2, [r7, #28]
 8001178:	611a      	str	r2, [r3, #16]
          break;
 800117a:	e009      	b.n	8001190 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800117c:	2308      	movs	r3, #8
 800117e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	69fa      	ldr	r2, [r7, #28]
 8001184:	615a      	str	r2, [r3, #20]
          break;
 8001186:	e003      	b.n	8001190 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
          break;
 800118c:	e000      	b.n	8001190 <HAL_GPIO_Init+0x130>
          break;
 800118e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2bff      	cmp	r3, #255	; 0xff
 8001194:	d801      	bhi.n	800119a <HAL_GPIO_Init+0x13a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	e001      	b.n	800119e <HAL_GPIO_Init+0x13e>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	3304      	adds	r3, #4
 800119e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80011a0:	69bb      	ldr	r3, [r7, #24]
 80011a2:	2bff      	cmp	r3, #255	; 0xff
 80011a4:	d802      	bhi.n	80011ac <HAL_GPIO_Init+0x14c>
 80011a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a8:	009b      	lsls	r3, r3, #2
 80011aa:	e002      	b.n	80011b2 <HAL_GPIO_Init+0x152>
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	3b08      	subs	r3, #8
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	210f      	movs	r1, #15
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	fa01 f303 	lsl.w	r3, r1, r3
 80011c0:	43db      	mvns	r3, r3
 80011c2:	401a      	ands	r2, r3
 80011c4:	6a39      	ldr	r1, [r7, #32]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	fa01 f303 	lsl.w	r3, r1, r3
 80011cc:	431a      	orrs	r2, r3
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	f000 80b1 	beq.w	8001342 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011e0:	4b4d      	ldr	r3, [pc, #308]	; (8001318 <HAL_GPIO_Init+0x2b8>)
 80011e2:	699b      	ldr	r3, [r3, #24]
 80011e4:	4a4c      	ldr	r2, [pc, #304]	; (8001318 <HAL_GPIO_Init+0x2b8>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6193      	str	r3, [r2, #24]
 80011ec:	4b4a      	ldr	r3, [pc, #296]	; (8001318 <HAL_GPIO_Init+0x2b8>)
 80011ee:	699b      	ldr	r3, [r3, #24]
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011f8:	4a48      	ldr	r2, [pc, #288]	; (800131c <HAL_GPIO_Init+0x2bc>)
 80011fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fc:	089b      	lsrs	r3, r3, #2
 80011fe:	3302      	adds	r3, #2
 8001200:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001204:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001208:	f003 0303 	and.w	r3, r3, #3
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	220f      	movs	r2, #15
 8001210:	fa02 f303 	lsl.w	r3, r2, r3
 8001214:	43db      	mvns	r3, r3
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4013      	ands	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	4a40      	ldr	r2, [pc, #256]	; (8001320 <HAL_GPIO_Init+0x2c0>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d013      	beq.n	800124c <HAL_GPIO_Init+0x1ec>
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4a3f      	ldr	r2, [pc, #252]	; (8001324 <HAL_GPIO_Init+0x2c4>)
 8001228:	4293      	cmp	r3, r2
 800122a:	d00d      	beq.n	8001248 <HAL_GPIO_Init+0x1e8>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a3e      	ldr	r2, [pc, #248]	; (8001328 <HAL_GPIO_Init+0x2c8>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d007      	beq.n	8001244 <HAL_GPIO_Init+0x1e4>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a3d      	ldr	r2, [pc, #244]	; (800132c <HAL_GPIO_Init+0x2cc>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d101      	bne.n	8001240 <HAL_GPIO_Init+0x1e0>
 800123c:	2303      	movs	r3, #3
 800123e:	e006      	b.n	800124e <HAL_GPIO_Init+0x1ee>
 8001240:	2304      	movs	r3, #4
 8001242:	e004      	b.n	800124e <HAL_GPIO_Init+0x1ee>
 8001244:	2302      	movs	r3, #2
 8001246:	e002      	b.n	800124e <HAL_GPIO_Init+0x1ee>
 8001248:	2301      	movs	r3, #1
 800124a:	e000      	b.n	800124e <HAL_GPIO_Init+0x1ee>
 800124c:	2300      	movs	r3, #0
 800124e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001250:	f002 0203 	and.w	r2, r2, #3
 8001254:	0092      	lsls	r2, r2, #2
 8001256:	4093      	lsls	r3, r2
 8001258:	68fa      	ldr	r2, [r7, #12]
 800125a:	4313      	orrs	r3, r2
 800125c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800125e:	492f      	ldr	r1, [pc, #188]	; (800131c <HAL_GPIO_Init+0x2bc>)
 8001260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	3302      	adds	r3, #2
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001274:	2b00      	cmp	r3, #0
 8001276:	d006      	beq.n	8001286 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001278:	4b2d      	ldr	r3, [pc, #180]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	492c      	ldr	r1, [pc, #176]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	600b      	str	r3, [r1, #0]
 8001284:	e006      	b.n	8001294 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001286:	4b2a      	ldr	r3, [pc, #168]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	43db      	mvns	r3, r3
 800128e:	4928      	ldr	r1, [pc, #160]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 8001290:	4013      	ands	r3, r2
 8001292:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d006      	beq.n	80012ae <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80012a0:	4b23      	ldr	r3, [pc, #140]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012a2:	685a      	ldr	r2, [r3, #4]
 80012a4:	4922      	ldr	r1, [pc, #136]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012a6:	69bb      	ldr	r3, [r7, #24]
 80012a8:	4313      	orrs	r3, r2
 80012aa:	604b      	str	r3, [r1, #4]
 80012ac:	e006      	b.n	80012bc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80012ae:	4b20      	ldr	r3, [pc, #128]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012b0:	685a      	ldr	r2, [r3, #4]
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	43db      	mvns	r3, r3
 80012b6:	491e      	ldr	r1, [pc, #120]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012b8:	4013      	ands	r3, r2
 80012ba:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d006      	beq.n	80012d6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012c8:	4b19      	ldr	r3, [pc, #100]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	4918      	ldr	r1, [pc, #96]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	608b      	str	r3, [r1, #8]
 80012d4:	e006      	b.n	80012e4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012d8:	689a      	ldr	r2, [r3, #8]
 80012da:	69bb      	ldr	r3, [r7, #24]
 80012dc:	43db      	mvns	r3, r3
 80012de:	4914      	ldr	r1, [pc, #80]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012e0:	4013      	ands	r3, r2
 80012e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d021      	beq.n	8001334 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012f2:	68da      	ldr	r2, [r3, #12]
 80012f4:	490e      	ldr	r1, [pc, #56]	; (8001330 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	60cb      	str	r3, [r1, #12]
 80012fc:	e021      	b.n	8001342 <HAL_GPIO_Init+0x2e2>
 80012fe:	bf00      	nop
 8001300:	10320000 	.word	0x10320000
 8001304:	10310000 	.word	0x10310000
 8001308:	10220000 	.word	0x10220000
 800130c:	10210000 	.word	0x10210000
 8001310:	10120000 	.word	0x10120000
 8001314:	10110000 	.word	0x10110000
 8001318:	40021000 	.word	0x40021000
 800131c:	40010000 	.word	0x40010000
 8001320:	40010800 	.word	0x40010800
 8001324:	40010c00 	.word	0x40010c00
 8001328:	40011000 	.word	0x40011000
 800132c:	40011400 	.word	0x40011400
 8001330:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_GPIO_Init+0x304>)
 8001336:	68da      	ldr	r2, [r3, #12]
 8001338:	69bb      	ldr	r3, [r7, #24]
 800133a:	43db      	mvns	r3, r3
 800133c:	4909      	ldr	r1, [pc, #36]	; (8001364 <HAL_GPIO_Init+0x304>)
 800133e:	4013      	ands	r3, r2
 8001340:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001344:	3301      	adds	r3, #1
 8001346:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134e:	fa22 f303 	lsr.w	r3, r2, r3
 8001352:	2b00      	cmp	r3, #0
 8001354:	f47f ae8e 	bne.w	8001074 <HAL_GPIO_Init+0x14>
  }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	372c      	adds	r7, #44	; 0x2c
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr
 8001364:	40010400 	.word	0x40010400

08001368 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	4013      	ands	r3, r2
 800137c:	2b00      	cmp	r3, #0
 800137e:	d002      	beq.n	8001386 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001380:	2301      	movs	r3, #1
 8001382:	73fb      	strb	r3, [r7, #15]
 8001384:	e001      	b.n	800138a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001386:	2300      	movs	r3, #0
 8001388:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
}
 800138c:	4618      	mov	r0, r3
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
	...

08001398 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013a2:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013a4:	695a      	ldr	r2, [r3, #20]
 80013a6:	88fb      	ldrh	r3, [r7, #6]
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d006      	beq.n	80013bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ae:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	4618      	mov	r0, r3
 80013b8:	f7ff fb00 	bl	80009bc <HAL_GPIO_EXTI_Callback>
  }
}
 80013bc:	bf00      	nop
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40010400 	.word	0x40010400

080013c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b086      	sub	sp, #24
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d101      	bne.n	80013da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
 80013d8:	e272      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	f000 8087 	beq.w	80014f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	f003 030c 	and.w	r3, r3, #12
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d00c      	beq.n	800140e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80013f4:	4b8f      	ldr	r3, [pc, #572]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d112      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
 8001400:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001408:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140c:	d10b      	bne.n	8001426 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d06c      	beq.n	80014f4 <HAL_RCC_OscConfig+0x12c>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d168      	bne.n	80014f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e24c      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142e:	d106      	bne.n	800143e <HAL_RCC_OscConfig+0x76>
 8001430:	4b80      	ldr	r3, [pc, #512]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a7f      	ldr	r2, [pc, #508]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001436:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	e02e      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	685b      	ldr	r3, [r3, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10c      	bne.n	8001460 <HAL_RCC_OscConfig+0x98>
 8001446:	4b7b      	ldr	r3, [pc, #492]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4a7a      	ldr	r2, [pc, #488]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800144c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001450:	6013      	str	r3, [r2, #0]
 8001452:	4b78      	ldr	r3, [pc, #480]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a77      	ldr	r2, [pc, #476]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001458:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800145c:	6013      	str	r3, [r2, #0]
 800145e:	e01d      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001468:	d10c      	bne.n	8001484 <HAL_RCC_OscConfig+0xbc>
 800146a:	4b72      	ldr	r3, [pc, #456]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a71      	ldr	r2, [pc, #452]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001470:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001474:	6013      	str	r3, [r2, #0]
 8001476:	4b6f      	ldr	r3, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a6e      	ldr	r2, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800147c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001480:	6013      	str	r3, [r2, #0]
 8001482:	e00b      	b.n	800149c <HAL_RCC_OscConfig+0xd4>
 8001484:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a6a      	ldr	r2, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800148a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a67      	ldr	r2, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001496:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800149a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d013      	beq.n	80014cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fcc4 	bl	8000e30 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014ac:	f7ff fcc0 	bl	8000e30 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b64      	cmp	r3, #100	; 0x64
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e200      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014be:	4b5d      	ldr	r3, [pc, #372]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d0f0      	beq.n	80014ac <HAL_RCC_OscConfig+0xe4>
 80014ca:	e014      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014cc:	f7ff fcb0 	bl	8000e30 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014d2:	e008      	b.n	80014e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014d4:	f7ff fcac 	bl	8000e30 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b64      	cmp	r3, #100	; 0x64
 80014e0:	d901      	bls.n	80014e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80014e2:	2303      	movs	r3, #3
 80014e4:	e1ec      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014e6:	4b53      	ldr	r3, [pc, #332]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1f0      	bne.n	80014d4 <HAL_RCC_OscConfig+0x10c>
 80014f2:	e000      	b.n	80014f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d063      	beq.n	80015ca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001502:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	2b00      	cmp	r3, #0
 800150c:	d00b      	beq.n	8001526 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800150e:	4b49      	ldr	r3, [pc, #292]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	f003 030c 	and.w	r3, r3, #12
 8001516:	2b08      	cmp	r3, #8
 8001518:	d11c      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
 800151a:	4b46      	ldr	r3, [pc, #280]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001522:	2b00      	cmp	r3, #0
 8001524:	d116      	bne.n	8001554 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001526:	4b43      	ldr	r3, [pc, #268]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d005      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	2b01      	cmp	r3, #1
 8001538:	d001      	beq.n	800153e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e1c0      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	695b      	ldr	r3, [r3, #20]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	4939      	ldr	r1, [pc, #228]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800154e:	4313      	orrs	r3, r2
 8001550:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001552:	e03a      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d020      	beq.n	800159e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800155c:	4b36      	ldr	r3, [pc, #216]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 800155e:	2201      	movs	r2, #1
 8001560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001562:	f7ff fc65 	bl	8000e30 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800156a:	f7ff fc61 	bl	8000e30 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e1a1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800157c:	4b2d      	ldr	r3, [pc, #180]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f003 0302 	and.w	r3, r3, #2
 8001584:	2b00      	cmp	r3, #0
 8001586:	d0f0      	beq.n	800156a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001588:	4b2a      	ldr	r3, [pc, #168]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	695b      	ldr	r3, [r3, #20]
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4927      	ldr	r1, [pc, #156]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001598:	4313      	orrs	r3, r2
 800159a:	600b      	str	r3, [r1, #0]
 800159c:	e015      	b.n	80015ca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800159e:	4b26      	ldr	r3, [pc, #152]	; (8001638 <HAL_RCC_OscConfig+0x270>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015a4:	f7ff fc44 	bl	8000e30 <HAL_GetTick>
 80015a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015aa:	e008      	b.n	80015be <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ac:	f7ff fc40 	bl	8000e30 <HAL_GetTick>
 80015b0:	4602      	mov	r2, r0
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	1ad3      	subs	r3, r2, r3
 80015b6:	2b02      	cmp	r3, #2
 80015b8:	d901      	bls.n	80015be <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80015ba:	2303      	movs	r3, #3
 80015bc:	e180      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d1f0      	bne.n	80015ac <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f003 0308 	and.w	r3, r3, #8
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d03a      	beq.n	800164c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	699b      	ldr	r3, [r3, #24]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d019      	beq.n	8001612 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015de:	4b17      	ldr	r3, [pc, #92]	; (800163c <HAL_RCC_OscConfig+0x274>)
 80015e0:	2201      	movs	r2, #1
 80015e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015e4:	f7ff fc24 	bl	8000e30 <HAL_GetTick>
 80015e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80015ec:	f7ff fc20 	bl	8000e30 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e160      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015fe:	4b0d      	ldr	r3, [pc, #52]	; (8001634 <HAL_RCC_OscConfig+0x26c>)
 8001600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001602:	f003 0302 	and.w	r3, r3, #2
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0f0      	beq.n	80015ec <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800160a:	2001      	movs	r0, #1
 800160c:	f000 faa6 	bl	8001b5c <RCC_Delay>
 8001610:	e01c      	b.n	800164c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001612:	4b0a      	ldr	r3, [pc, #40]	; (800163c <HAL_RCC_OscConfig+0x274>)
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001618:	f7ff fc0a 	bl	8000e30 <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800161e:	e00f      	b.n	8001640 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fc06 	bl	8000e30 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d908      	bls.n	8001640 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e146      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 8001632:	bf00      	nop
 8001634:	40021000 	.word	0x40021000
 8001638:	42420000 	.word	0x42420000
 800163c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001640:	4b92      	ldr	r3, [pc, #584]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001644:	f003 0302 	and.w	r3, r3, #2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d1e9      	bne.n	8001620 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0304 	and.w	r3, r3, #4
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a6 	beq.w	80017a6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800165a:	2300      	movs	r3, #0
 800165c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800165e:	4b8b      	ldr	r3, [pc, #556]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001660:	69db      	ldr	r3, [r3, #28]
 8001662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d10d      	bne.n	8001686 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b88      	ldr	r3, [pc, #544]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a87      	ldr	r2, [pc, #540]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b85      	ldr	r3, [pc, #532]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001682:	2301      	movs	r3, #1
 8001684:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001686:	4b82      	ldr	r3, [pc, #520]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800168e:	2b00      	cmp	r3, #0
 8001690:	d118      	bne.n	80016c4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001692:	4b7f      	ldr	r3, [pc, #508]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a7e      	ldr	r2, [pc, #504]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 8001698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800169e:	f7ff fbc7 	bl	8000e30 <HAL_GetTick>
 80016a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016a4:	e008      	b.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016a6:	f7ff fbc3 	bl	8000e30 <HAL_GetTick>
 80016aa:	4602      	mov	r2, r0
 80016ac:	693b      	ldr	r3, [r7, #16]
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	2b64      	cmp	r3, #100	; 0x64
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e103      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016b8:	4b75      	ldr	r3, [pc, #468]	; (8001890 <HAL_RCC_OscConfig+0x4c8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0f0      	beq.n	80016a6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	68db      	ldr	r3, [r3, #12]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d106      	bne.n	80016da <HAL_RCC_OscConfig+0x312>
 80016cc:	4b6f      	ldr	r3, [pc, #444]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016ce:	6a1b      	ldr	r3, [r3, #32]
 80016d0:	4a6e      	ldr	r2, [pc, #440]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016d2:	f043 0301 	orr.w	r3, r3, #1
 80016d6:	6213      	str	r3, [r2, #32]
 80016d8:	e02d      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68db      	ldr	r3, [r3, #12]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10c      	bne.n	80016fc <HAL_RCC_OscConfig+0x334>
 80016e2:	4b6a      	ldr	r3, [pc, #424]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e4:	6a1b      	ldr	r3, [r3, #32]
 80016e6:	4a69      	ldr	r2, [pc, #420]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6213      	str	r3, [r2, #32]
 80016ee:	4b67      	ldr	r3, [pc, #412]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f0:	6a1b      	ldr	r3, [r3, #32]
 80016f2:	4a66      	ldr	r2, [pc, #408]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6213      	str	r3, [r2, #32]
 80016fa:	e01c      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d10c      	bne.n	800171e <HAL_RCC_OscConfig+0x356>
 8001704:	4b61      	ldr	r3, [pc, #388]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001706:	6a1b      	ldr	r3, [r3, #32]
 8001708:	4a60      	ldr	r2, [pc, #384]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800170a:	f043 0304 	orr.w	r3, r3, #4
 800170e:	6213      	str	r3, [r2, #32]
 8001710:	4b5e      	ldr	r3, [pc, #376]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001712:	6a1b      	ldr	r3, [r3, #32]
 8001714:	4a5d      	ldr	r2, [pc, #372]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	6213      	str	r3, [r2, #32]
 800171c:	e00b      	b.n	8001736 <HAL_RCC_OscConfig+0x36e>
 800171e:	4b5b      	ldr	r3, [pc, #364]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001720:	6a1b      	ldr	r3, [r3, #32]
 8001722:	4a5a      	ldr	r2, [pc, #360]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001724:	f023 0301 	bic.w	r3, r3, #1
 8001728:	6213      	str	r3, [r2, #32]
 800172a:	4b58      	ldr	r3, [pc, #352]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a57      	ldr	r2, [pc, #348]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0304 	bic.w	r3, r3, #4
 8001734:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d015      	beq.n	800176a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800173e:	f7ff fb77 	bl	8000e30 <HAL_GetTick>
 8001742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001744:	e00a      	b.n	800175c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001746:	f7ff fb73 	bl	8000e30 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	1ad3      	subs	r3, r2, r3
 8001750:	f241 3288 	movw	r2, #5000	; 0x1388
 8001754:	4293      	cmp	r3, r2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e0b1      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800175c:	4b4b      	ldr	r3, [pc, #300]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800175e:	6a1b      	ldr	r3, [r3, #32]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d0ee      	beq.n	8001746 <HAL_RCC_OscConfig+0x37e>
 8001768:	e014      	b.n	8001794 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800176a:	f7ff fb61 	bl	8000e30 <HAL_GetTick>
 800176e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001770:	e00a      	b.n	8001788 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001772:	f7ff fb5d 	bl	8000e30 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	1ad3      	subs	r3, r2, r3
 800177c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001780:	4293      	cmp	r3, r2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e09b      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001788:	4b40      	ldr	r3, [pc, #256]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800178a:	6a1b      	ldr	r3, [r3, #32]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d1ee      	bne.n	8001772 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001794:	7dfb      	ldrb	r3, [r7, #23]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d105      	bne.n	80017a6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800179a:	4b3c      	ldr	r3, [pc, #240]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a3b      	ldr	r2, [pc, #236]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017a4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 8087 	beq.w	80018be <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017b0:	4b36      	ldr	r3, [pc, #216]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 030c 	and.w	r3, r3, #12
 80017b8:	2b08      	cmp	r3, #8
 80017ba:	d061      	beq.n	8001880 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	69db      	ldr	r3, [r3, #28]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d146      	bne.n	8001852 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b33      	ldr	r3, [pc, #204]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff fb31 	bl	8000e30 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff fb2d 	bl	8000e30 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e06d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	4b29      	ldr	r3, [pc, #164]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d108      	bne.n	800180c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80017fa:	4b24      	ldr	r3, [pc, #144]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	4921      	ldr	r1, [pc, #132]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800180c:	4b1f      	ldr	r3, [pc, #124]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a19      	ldr	r1, [r3, #32]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800181c:	430b      	orrs	r3, r1
 800181e:	491b      	ldr	r1, [pc, #108]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001824:	4b1b      	ldr	r3, [pc, #108]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001826:	2201      	movs	r2, #1
 8001828:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800182a:	f7ff fb01 	bl	8000e30 <HAL_GetTick>
 800182e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001832:	f7ff fafd 	bl	8000e30 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e03d      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001844:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d0f0      	beq.n	8001832 <HAL_RCC_OscConfig+0x46a>
 8001850:	e035      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001852:	4b10      	ldr	r3, [pc, #64]	; (8001894 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	2200      	movs	r2, #0
 8001856:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001858:	f7ff faea 	bl	8000e30 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001860:	f7ff fae6 	bl	8000e30 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e026      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001872:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_RCC_OscConfig+0x4c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x498>
 800187e:	e01e      	b.n	80018be <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	69db      	ldr	r3, [r3, #28]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d107      	bne.n	8001898 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001888:	2301      	movs	r3, #1
 800188a:	e019      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
 800188c:	40021000 	.word	0x40021000
 8001890:	40007000 	.word	0x40007000
 8001894:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001898:	4b0b      	ldr	r3, [pc, #44]	; (80018c8 <HAL_RCC_OscConfig+0x500>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a1b      	ldr	r3, [r3, #32]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d106      	bne.n	80018ba <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018b6:	429a      	cmp	r2, r3
 80018b8:	d001      	beq.n	80018be <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e000      	b.n	80018c0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80018be:	2300      	movs	r3, #0
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3718      	adds	r7, #24
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}
 80018c8:	40021000 	.word	0x40021000

080018cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b084      	sub	sp, #16
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
 80018d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e0d0      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80018e0:	4b6a      	ldr	r3, [pc, #424]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0307 	and.w	r3, r3, #7
 80018e8:	683a      	ldr	r2, [r7, #0]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d910      	bls.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018ee:	4b67      	ldr	r3, [pc, #412]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f023 0207 	bic.w	r2, r3, #7
 80018f6:	4965      	ldr	r1, [pc, #404]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018fe:	4b63      	ldr	r3, [pc, #396]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	683a      	ldr	r2, [r7, #0]
 8001908:	429a      	cmp	r2, r3
 800190a:	d001      	beq.n	8001910 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800190c:	2301      	movs	r3, #1
 800190e:	e0b8      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0304 	and.w	r3, r3, #4
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001928:	4b59      	ldr	r3, [pc, #356]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	4a58      	ldr	r2, [pc, #352]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001932:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f003 0308 	and.w	r3, r3, #8
 800193c:	2b00      	cmp	r3, #0
 800193e:	d005      	beq.n	800194c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001940:	4b53      	ldr	r3, [pc, #332]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	4a52      	ldr	r2, [pc, #328]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001946:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800194a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800194c:	4b50      	ldr	r3, [pc, #320]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	494d      	ldr	r1, [pc, #308]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800195a:	4313      	orrs	r3, r2
 800195c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f003 0301 	and.w	r3, r3, #1
 8001966:	2b00      	cmp	r3, #0
 8001968:	d040      	beq.n	80019ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685b      	ldr	r3, [r3, #4]
 800196e:	2b01      	cmp	r3, #1
 8001970:	d107      	bne.n	8001982 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d115      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e07f      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	2b02      	cmp	r3, #2
 8001988:	d107      	bne.n	800199a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800198a:	4b41      	ldr	r3, [pc, #260]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d109      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
 8001998:	e073      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800199a:	4b3d      	ldr	r3, [pc, #244]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d101      	bne.n	80019aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e06b      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019aa:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f023 0203 	bic.w	r2, r3, #3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	4936      	ldr	r1, [pc, #216]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019b8:	4313      	orrs	r3, r2
 80019ba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019bc:	f7ff fa38 	bl	8000e30 <HAL_GetTick>
 80019c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019c2:	e00a      	b.n	80019da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019c4:	f7ff fa34 	bl	8000e30 <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d901      	bls.n	80019da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019d6:	2303      	movs	r3, #3
 80019d8:	e053      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	f003 020c 	and.w	r2, r3, #12
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	009b      	lsls	r3, r3, #2
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d1eb      	bne.n	80019c4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f003 0307 	and.w	r3, r3, #7
 80019f4:	683a      	ldr	r2, [r7, #0]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d210      	bcs.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019fa:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f023 0207 	bic.w	r2, r3, #7
 8001a02:	4922      	ldr	r1, [pc, #136]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a04:	683b      	ldr	r3, [r7, #0]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a0a:	4b20      	ldr	r3, [pc, #128]	; (8001a8c <HAL_RCC_ClockConfig+0x1c0>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0307 	and.w	r3, r3, #7
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d001      	beq.n	8001a1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e032      	b.n	8001a82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 0304 	and.w	r3, r3, #4
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d008      	beq.n	8001a3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a28:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	4916      	ldr	r1, [pc, #88]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a36:	4313      	orrs	r3, r2
 8001a38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d009      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a46:	4b12      	ldr	r3, [pc, #72]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	00db      	lsls	r3, r3, #3
 8001a54:	490e      	ldr	r1, [pc, #56]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a5a:	f000 f821 	bl	8001aa0 <HAL_RCC_GetSysClockFreq>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_ClockConfig+0x1c4>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	091b      	lsrs	r3, r3, #4
 8001a66:	f003 030f 	and.w	r3, r3, #15
 8001a6a:	490a      	ldr	r1, [pc, #40]	; (8001a94 <HAL_RCC_ClockConfig+0x1c8>)
 8001a6c:	5ccb      	ldrb	r3, [r1, r3]
 8001a6e:	fa22 f303 	lsr.w	r3, r2, r3
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_RCC_ClockConfig+0x1cc>)
 8001a74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001a76:	4b09      	ldr	r3, [pc, #36]	; (8001a9c <HAL_RCC_ClockConfig+0x1d0>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f7ff f996 	bl	8000dac <HAL_InitTick>

  return HAL_OK;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40022000 	.word	0x40022000
 8001a90:	40021000 	.word	0x40021000
 8001a94:	08002ad4 	.word	0x08002ad4
 8001a98:	20000064 	.word	0x20000064
 8001a9c:	20000068 	.word	0x20000068

08001aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001aa0:	b490      	push	{r4, r7}
 8001aa2:	b08a      	sub	sp, #40	; 0x28
 8001aa4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001aa6:	4b29      	ldr	r3, [pc, #164]	; (8001b4c <HAL_RCC_GetSysClockFreq+0xac>)
 8001aa8:	1d3c      	adds	r4, r7, #4
 8001aaa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001aac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001ab0:	f240 2301 	movw	r3, #513	; 0x201
 8001ab4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61fb      	str	r3, [r7, #28]
 8001aba:	2300      	movs	r3, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001aca:	4b21      	ldr	r3, [pc, #132]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ad0:	69fb      	ldr	r3, [r7, #28]
 8001ad2:	f003 030c 	and.w	r3, r3, #12
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d002      	beq.n	8001ae0 <HAL_RCC_GetSysClockFreq+0x40>
 8001ada:	2b08      	cmp	r3, #8
 8001adc:	d003      	beq.n	8001ae6 <HAL_RCC_GetSysClockFreq+0x46>
 8001ade:	e02b      	b.n	8001b38 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001ae0:	4b1c      	ldr	r3, [pc, #112]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001ae2:	623b      	str	r3, [r7, #32]
      break;
 8001ae4:	e02b      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ae6:	69fb      	ldr	r3, [r7, #28]
 8001ae8:	0c9b      	lsrs	r3, r3, #18
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3328      	adds	r3, #40	; 0x28
 8001af0:	443b      	add	r3, r7
 8001af2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001af6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001af8:	69fb      	ldr	r3, [r7, #28]
 8001afa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d012      	beq.n	8001b28 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b02:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0c5b      	lsrs	r3, r3, #17
 8001b08:	f003 0301 	and.w	r3, r3, #1
 8001b0c:	3328      	adds	r3, #40	; 0x28
 8001b0e:	443b      	add	r3, r7
 8001b10:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001b14:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	4a0e      	ldr	r2, [pc, #56]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b1a:	fb03 f202 	mul.w	r2, r3, r2
 8001b1e:	69bb      	ldr	r3, [r7, #24]
 8001b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b24:	627b      	str	r3, [r7, #36]	; 0x24
 8001b26:	e004      	b.n	8001b32 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b2c:	fb02 f303 	mul.w	r3, r2, r3
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	623b      	str	r3, [r7, #32]
      break;
 8001b36:	e002      	b.n	8001b3e <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b38:	4b06      	ldr	r3, [pc, #24]	; (8001b54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b3a:	623b      	str	r3, [r7, #32]
      break;
 8001b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b3e:	6a3b      	ldr	r3, [r7, #32]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3728      	adds	r7, #40	; 0x28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc90      	pop	{r4, r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	08002ac4 	.word	0x08002ac4
 8001b50:	40021000 	.word	0x40021000
 8001b54:	007a1200 	.word	0x007a1200
 8001b58:	003d0900 	.word	0x003d0900

08001b5c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b085      	sub	sp, #20
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b64:	4b0a      	ldr	r3, [pc, #40]	; (8001b90 <RCC_Delay+0x34>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	; (8001b94 <RCC_Delay+0x38>)
 8001b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b6e:	0a5b      	lsrs	r3, r3, #9
 8001b70:	687a      	ldr	r2, [r7, #4]
 8001b72:	fb02 f303 	mul.w	r3, r2, r3
 8001b76:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b78:	bf00      	nop
  }
  while (Delay --);
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	1e5a      	subs	r2, r3, #1
 8001b7e:	60fa      	str	r2, [r7, #12]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d1f9      	bne.n	8001b78 <RCC_Delay+0x1c>
}
 8001b84:	bf00      	nop
 8001b86:	bf00      	nop
 8001b88:	3714      	adds	r7, #20
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	20000064 	.word	0x20000064
 8001b94:	10624dd3 	.word	0x10624dd3

08001b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d101      	bne.n	8001baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e041      	b.n	8001c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bb0:	b2db      	uxtb	r3, r3
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d106      	bne.n	8001bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	f7fe ff44 	bl	8000a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	3304      	adds	r3, #4
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f000 fc28 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2201      	movs	r2, #1
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3708      	adds	r7, #8
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
	...

08001c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c46:	b2db      	uxtb	r3, r3
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d001      	beq.n	8001c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c4c:	2301      	movs	r3, #1
 8001c4e:	e03a      	b.n	8001cc6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2202      	movs	r2, #2
 8001c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	68da      	ldr	r2, [r3, #12]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a18      	ldr	r2, [pc, #96]	; (8001cd0 <HAL_TIM_Base_Start_IT+0x98>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d00e      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x58>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7a:	d009      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x58>
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d004      	beq.n	8001c90 <HAL_TIM_Base_Start_IT+0x58>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a13      	ldr	r2, [pc, #76]	; (8001cd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	2b06      	cmp	r3, #6
 8001ca0:	d010      	beq.n	8001cc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f042 0201 	orr.w	r2, r2, #1
 8001cb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cb2:	e007      	b.n	8001cc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f042 0201 	orr.w	r2, r2, #1
 8001cc2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	3714      	adds	r7, #20
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bc80      	pop	{r7}
 8001cce:	4770      	bx	lr
 8001cd0:	40012c00 	.word	0x40012c00
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40000800 	.word	0x40000800

08001cdc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d101      	bne.n	8001cee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001cea:	2301      	movs	r3, #1
 8001cec:	e041      	b.n	8001d72 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d106      	bne.n	8001d08 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f839 	bl	8001d7a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2202      	movs	r2, #2
 8001d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	3304      	adds	r3, #4
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4610      	mov	r0, r2
 8001d1c:	f000 fb86 	bl	800242c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d70:	2300      	movs	r3, #0
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}

08001d7a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d109      	bne.n	8001db0 <HAL_TIM_PWM_Start+0x24>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	bf14      	ite	ne
 8001da8:	2301      	movne	r3, #1
 8001daa:	2300      	moveq	r3, #0
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e022      	b.n	8001df6 <HAL_TIM_PWM_Start+0x6a>
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d109      	bne.n	8001dca <HAL_TIM_PWM_Start+0x3e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001dbc:	b2db      	uxtb	r3, r3
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	bf14      	ite	ne
 8001dc2:	2301      	movne	r3, #1
 8001dc4:	2300      	moveq	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	e015      	b.n	8001df6 <HAL_TIM_PWM_Start+0x6a>
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	2b08      	cmp	r3, #8
 8001dce:	d109      	bne.n	8001de4 <HAL_TIM_PWM_Start+0x58>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	bf14      	ite	ne
 8001ddc:	2301      	movne	r3, #1
 8001dde:	2300      	moveq	r3, #0
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	e008      	b.n	8001df6 <HAL_TIM_PWM_Start+0x6a>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d001      	beq.n	8001dfe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e05e      	b.n	8001ebc <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d104      	bne.n	8001e0e <HAL_TIM_PWM_Start+0x82>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2202      	movs	r2, #2
 8001e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001e0c:	e013      	b.n	8001e36 <HAL_TIM_PWM_Start+0xaa>
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	2b04      	cmp	r3, #4
 8001e12:	d104      	bne.n	8001e1e <HAL_TIM_PWM_Start+0x92>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	2202      	movs	r2, #2
 8001e18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001e1c:	e00b      	b.n	8001e36 <HAL_TIM_PWM_Start+0xaa>
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b08      	cmp	r3, #8
 8001e22:	d104      	bne.n	8001e2e <HAL_TIM_PWM_Start+0xa2>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001e2c:	e003      	b.n	8001e36 <HAL_TIM_PWM_Start+0xaa>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	6839      	ldr	r1, [r7, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f000 fd74 	bl	800292c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a1e      	ldr	r2, [pc, #120]	; (8001ec4 <HAL_TIM_PWM_Start+0x138>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d107      	bne.n	8001e5e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e5c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a18      	ldr	r2, [pc, #96]	; (8001ec4 <HAL_TIM_PWM_Start+0x138>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d00e      	beq.n	8001e86 <HAL_TIM_PWM_Start+0xfa>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e70:	d009      	beq.n	8001e86 <HAL_TIM_PWM_Start+0xfa>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a14      	ldr	r2, [pc, #80]	; (8001ec8 <HAL_TIM_PWM_Start+0x13c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d004      	beq.n	8001e86 <HAL_TIM_PWM_Start+0xfa>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <HAL_TIM_PWM_Start+0x140>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d111      	bne.n	8001eaa <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f003 0307 	and.w	r3, r3, #7
 8001e90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b06      	cmp	r3, #6
 8001e96:	d010      	beq.n	8001eba <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f042 0201 	orr.w	r2, r2, #1
 8001ea6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea8:	e007      	b.n	8001eba <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f042 0201 	orr.w	r2, r2, #1
 8001eb8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3710      	adds	r7, #16
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40012c00 	.word	0x40012c00
 8001ec8:	40000400 	.word	0x40000400
 8001ecc:	40000800 	.word	0x40000800

08001ed0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	691b      	ldr	r3, [r3, #16]
 8001ede:	f003 0302 	and.w	r3, r3, #2
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d122      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	f003 0302 	and.w	r3, r3, #2
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d11b      	bne.n	8001f2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f06f 0202 	mvn.w	r2, #2
 8001efc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	699b      	ldr	r3, [r3, #24]
 8001f0a:	f003 0303 	and.w	r3, r3, #3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d003      	beq.n	8001f1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f12:	6878      	ldr	r0, [r7, #4]
 8001f14:	f000 fa6f 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8001f18:	e005      	b.n	8001f26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	f000 fa62 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f000 fa71 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2200      	movs	r2, #0
 8001f2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f003 0304 	and.w	r3, r3, #4
 8001f36:	2b04      	cmp	r3, #4
 8001f38:	d122      	bne.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	f003 0304 	and.w	r3, r3, #4
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d11b      	bne.n	8001f80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f06f 0204 	mvn.w	r2, #4
 8001f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2202      	movs	r2, #2
 8001f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f000 fa45 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8001f6c:	e005      	b.n	8001f7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6e:	6878      	ldr	r0, [r7, #4]
 8001f70:	f000 fa38 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f000 fa47 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	691b      	ldr	r3, [r3, #16]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b08      	cmp	r3, #8
 8001f8c:	d122      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	f003 0308 	and.w	r3, r3, #8
 8001f98:	2b08      	cmp	r3, #8
 8001f9a:	d11b      	bne.n	8001fd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f06f 0208 	mvn.w	r2, #8
 8001fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2204      	movs	r2, #4
 8001faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	69db      	ldr	r3, [r3, #28]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fba:	6878      	ldr	r0, [r7, #4]
 8001fbc:	f000 fa1b 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8001fc0:	e005      	b.n	8001fce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 fa0e 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fc8:	6878      	ldr	r0, [r7, #4]
 8001fca:	f000 fa1d 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	691b      	ldr	r3, [r3, #16]
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d122      	bne.n	8002028 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b10      	cmp	r3, #16
 8001fee:	d11b      	bne.n	8002028 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f06f 0210 	mvn.w	r2, #16
 8001ff8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2208      	movs	r2, #8
 8001ffe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	69db      	ldr	r3, [r3, #28]
 8002006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800200a:	2b00      	cmp	r3, #0
 800200c:	d003      	beq.n	8002016 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f000 f9f1 	bl	80023f6 <HAL_TIM_IC_CaptureCallback>
 8002014:	e005      	b.n	8002022 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f000 f9e4 	bl	80023e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f000 f9f3 	bl	8002408 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2200      	movs	r2, #0
 8002026:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	691b      	ldr	r3, [r3, #16]
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b01      	cmp	r3, #1
 8002034:	d10e      	bne.n	8002054 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	f003 0301 	and.w	r3, r3, #1
 8002040:	2b01      	cmp	r3, #1
 8002042:	d107      	bne.n	8002054 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f06f 0201 	mvn.w	r2, #1
 800204c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f7fe f87c 	bl	800014c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800205e:	2b80      	cmp	r3, #128	; 0x80
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800206c:	2b80      	cmp	r3, #128	; 0x80
 800206e:	d107      	bne.n	8002080 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fce1 	bl	8002a42 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800208a:	2b40      	cmp	r3, #64	; 0x40
 800208c:	d10e      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002098:	2b40      	cmp	r3, #64	; 0x40
 800209a:	d107      	bne.n	80020ac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f000 f9b7 	bl	800241a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	2b20      	cmp	r3, #32
 80020b8:	d10e      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0320 	and.w	r3, r3, #32
 80020c4:	2b20      	cmp	r3, #32
 80020c6:	d107      	bne.n	80020d8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f06f 0220 	mvn.w	r2, #32
 80020d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fcac 	bl	8002a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	3708      	adds	r7, #8
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b084      	sub	sp, #16
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d101      	bne.n	80020fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80020f6:	2302      	movs	r3, #2
 80020f8:	e0ac      	b.n	8002254 <HAL_TIM_PWM_ConfigChannel+0x174>
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	2201      	movs	r2, #1
 80020fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2b0c      	cmp	r3, #12
 8002106:	f200 809f 	bhi.w	8002248 <HAL_TIM_PWM_ConfigChannel+0x168>
 800210a:	a201      	add	r2, pc, #4	; (adr r2, 8002110 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800210c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002110:	08002145 	.word	0x08002145
 8002114:	08002249 	.word	0x08002249
 8002118:	08002249 	.word	0x08002249
 800211c:	08002249 	.word	0x08002249
 8002120:	08002185 	.word	0x08002185
 8002124:	08002249 	.word	0x08002249
 8002128:	08002249 	.word	0x08002249
 800212c:	08002249 	.word	0x08002249
 8002130:	080021c7 	.word	0x080021c7
 8002134:	08002249 	.word	0x08002249
 8002138:	08002249 	.word	0x08002249
 800213c:	08002249 	.word	0x08002249
 8002140:	08002207 	.word	0x08002207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	68b9      	ldr	r1, [r7, #8]
 800214a:	4618      	mov	r0, r3
 800214c:	f000 f9d0 	bl	80024f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	699a      	ldr	r2, [r3, #24]
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0208 	orr.w	r2, r2, #8
 800215e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	699a      	ldr	r2, [r3, #24]
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0204 	bic.w	r2, r2, #4
 800216e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6999      	ldr	r1, [r3, #24]
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	691a      	ldr	r2, [r3, #16]
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	619a      	str	r2, [r3, #24]
      break;
 8002182:	e062      	b.n	800224a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	4618      	mov	r0, r3
 800218c:	f000 fa16 	bl	80025bc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800219e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	699a      	ldr	r2, [r3, #24]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6999      	ldr	r1, [r3, #24]
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	021a      	lsls	r2, r3, #8
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	430a      	orrs	r2, r1
 80021c2:	619a      	str	r2, [r3, #24]
      break;
 80021c4:	e041      	b.n	800224a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	68b9      	ldr	r1, [r7, #8]
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fa5f 	bl	8002690 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	69da      	ldr	r2, [r3, #28]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f042 0208 	orr.w	r2, r2, #8
 80021e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69da      	ldr	r2, [r3, #28]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f022 0204 	bic.w	r2, r2, #4
 80021f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	69d9      	ldr	r1, [r3, #28]
 80021f8:	68bb      	ldr	r3, [r7, #8]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	430a      	orrs	r2, r1
 8002202:	61da      	str	r2, [r3, #28]
      break;
 8002204:	e021      	b.n	800224a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	68b9      	ldr	r1, [r7, #8]
 800220c:	4618      	mov	r0, r3
 800220e:	f000 faa9 	bl	8002764 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	69da      	ldr	r2, [r3, #28]
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	69da      	ldr	r2, [r3, #28]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	69d9      	ldr	r1, [r3, #28]
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	021a      	lsls	r2, r3, #8
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	430a      	orrs	r2, r1
 8002244:	61da      	str	r2, [r3, #28]
      break;
 8002246:	e000      	b.n	800224a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002248:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002252:	2300      	movs	r3, #0
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}

0800225c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800226c:	2b01      	cmp	r3, #1
 800226e:	d101      	bne.n	8002274 <HAL_TIM_ConfigClockSource+0x18>
 8002270:	2302      	movs	r3, #2
 8002272:	e0b3      	b.n	80023dc <HAL_TIM_ConfigClockSource+0x180>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2201      	movs	r2, #1
 8002278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2202      	movs	r2, #2
 8002280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	689b      	ldr	r3, [r3, #8]
 800228a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002292:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800229a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022ac:	d03e      	beq.n	800232c <HAL_TIM_ConfigClockSource+0xd0>
 80022ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022b2:	f200 8087 	bhi.w	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022ba:	f000 8085 	beq.w	80023c8 <HAL_TIM_ConfigClockSource+0x16c>
 80022be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c2:	d87f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022c4:	2b70      	cmp	r3, #112	; 0x70
 80022c6:	d01a      	beq.n	80022fe <HAL_TIM_ConfigClockSource+0xa2>
 80022c8:	2b70      	cmp	r3, #112	; 0x70
 80022ca:	d87b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022cc:	2b60      	cmp	r3, #96	; 0x60
 80022ce:	d050      	beq.n	8002372 <HAL_TIM_ConfigClockSource+0x116>
 80022d0:	2b60      	cmp	r3, #96	; 0x60
 80022d2:	d877      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022d4:	2b50      	cmp	r3, #80	; 0x50
 80022d6:	d03c      	beq.n	8002352 <HAL_TIM_ConfigClockSource+0xf6>
 80022d8:	2b50      	cmp	r3, #80	; 0x50
 80022da:	d873      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022dc:	2b40      	cmp	r3, #64	; 0x40
 80022de:	d058      	beq.n	8002392 <HAL_TIM_ConfigClockSource+0x136>
 80022e0:	2b40      	cmp	r3, #64	; 0x40
 80022e2:	d86f      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022e4:	2b30      	cmp	r3, #48	; 0x30
 80022e6:	d064      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
 80022e8:	2b30      	cmp	r3, #48	; 0x30
 80022ea:	d86b      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022ec:	2b20      	cmp	r3, #32
 80022ee:	d060      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
 80022f0:	2b20      	cmp	r3, #32
 80022f2:	d867      	bhi.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d05c      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
 80022f8:	2b10      	cmp	r3, #16
 80022fa:	d05a      	beq.n	80023b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80022fc:	e062      	b.n	80023c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	6899      	ldr	r1, [r3, #8]
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f000 faee 	bl	80028ee <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002320:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	68fa      	ldr	r2, [r7, #12]
 8002328:	609a      	str	r2, [r3, #8]
      break;
 800232a:	e04e      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6818      	ldr	r0, [r3, #0]
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	6899      	ldr	r1, [r3, #8]
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685a      	ldr	r2, [r3, #4]
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	f000 fad7 	bl	80028ee <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800234e:	609a      	str	r2, [r3, #8]
      break;
 8002350:	e03b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6818      	ldr	r0, [r3, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	6859      	ldr	r1, [r3, #4]
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	461a      	mov	r2, r3
 8002360:	f000 fa4e 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2150      	movs	r1, #80	; 0x50
 800236a:	4618      	mov	r0, r3
 800236c:	f000 faa5 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002370:	e02b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	6859      	ldr	r1, [r3, #4]
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	461a      	mov	r2, r3
 8002380:	f000 fa6c 	bl	800285c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2160      	movs	r1, #96	; 0x60
 800238a:	4618      	mov	r0, r3
 800238c:	f000 fa95 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 8002390:	e01b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6818      	ldr	r0, [r3, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	6859      	ldr	r1, [r3, #4]
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	461a      	mov	r2, r3
 80023a0:	f000 fa2e 	bl	8002800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2140      	movs	r1, #64	; 0x40
 80023aa:	4618      	mov	r0, r3
 80023ac:	f000 fa85 	bl	80028ba <TIM_ITRx_SetConfig>
      break;
 80023b0:	e00b      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4619      	mov	r1, r3
 80023bc:	4610      	mov	r0, r2
 80023be:	f000 fa7c 	bl	80028ba <TIM_ITRx_SetConfig>
        break;
 80023c2:	e002      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023c4:	bf00      	nop
 80023c6:	e000      	b.n	80023ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80023c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2200      	movs	r2, #0
 80023d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	3710      	adds	r7, #16
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}

080023e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b083      	sub	sp, #12
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80023ec:	bf00      	nop
 80023ee:	370c      	adds	r7, #12
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bc80      	pop	{r7}
 80023f4:	4770      	bx	lr

080023f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	bc80      	pop	{r7}
 8002406:	4770      	bx	lr

08002408 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002410:	bf00      	nop
 8002412:	370c      	adds	r7, #12
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr

0800241a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800241a:	b480      	push	{r7}
 800241c:	b083      	sub	sp, #12
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002422:	bf00      	nop
 8002424:	370c      	adds	r7, #12
 8002426:	46bd      	mov	sp, r7
 8002428:	bc80      	pop	{r7}
 800242a:	4770      	bx	lr

0800242c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800242c:	b480      	push	{r7}
 800242e:	b085      	sub	sp, #20
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	4a29      	ldr	r2, [pc, #164]	; (80024e4 <TIM_Base_SetConfig+0xb8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d00b      	beq.n	800245c <TIM_Base_SetConfig+0x30>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800244a:	d007      	beq.n	800245c <TIM_Base_SetConfig+0x30>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a26      	ldr	r2, [pc, #152]	; (80024e8 <TIM_Base_SetConfig+0xbc>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d003      	beq.n	800245c <TIM_Base_SetConfig+0x30>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a25      	ldr	r2, [pc, #148]	; (80024ec <TIM_Base_SetConfig+0xc0>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d108      	bne.n	800246e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002462:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	4313      	orrs	r3, r2
 800246c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <TIM_Base_SetConfig+0xb8>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00b      	beq.n	800248e <TIM_Base_SetConfig+0x62>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800247c:	d007      	beq.n	800248e <TIM_Base_SetConfig+0x62>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a19      	ldr	r2, [pc, #100]	; (80024e8 <TIM_Base_SetConfig+0xbc>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d003      	beq.n	800248e <TIM_Base_SetConfig+0x62>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a18      	ldr	r2, [pc, #96]	; (80024ec <TIM_Base_SetConfig+0xc0>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d108      	bne.n	80024a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002494:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	68fa      	ldr	r2, [r7, #12]
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	68fa      	ldr	r2, [r7, #12]
 80024b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	689a      	ldr	r2, [r3, #8]
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <TIM_Base_SetConfig+0xb8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d103      	bne.n	80024d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2201      	movs	r2, #1
 80024d8:	615a      	str	r2, [r3, #20]
}
 80024da:	bf00      	nop
 80024dc:	3714      	adds	r7, #20
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40012c00 	.word	0x40012c00
 80024e8:	40000400 	.word	0x40000400
 80024ec:	40000800 	.word	0x40000800

080024f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b087      	sub	sp, #28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f023 0201 	bic.w	r2, r3, #1
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800251e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f023 0303 	bic.w	r3, r3, #3
 8002526:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4313      	orrs	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002532:	697b      	ldr	r3, [r7, #20]
 8002534:	f023 0302 	bic.w	r3, r3, #2
 8002538:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	4313      	orrs	r3, r2
 8002542:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a1c      	ldr	r2, [pc, #112]	; (80025b8 <TIM_OC1_SetConfig+0xc8>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d10c      	bne.n	8002566 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f023 0308 	bic.w	r3, r3, #8
 8002552:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	4313      	orrs	r3, r2
 800255c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f023 0304 	bic.w	r3, r3, #4
 8002564:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a13      	ldr	r2, [pc, #76]	; (80025b8 <TIM_OC1_SetConfig+0xc8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d111      	bne.n	8002592 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002574:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800257c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	693a      	ldr	r2, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	621a      	str	r2, [r3, #32]
}
 80025ac:	bf00      	nop
 80025ae:	371c      	adds	r7, #28
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bc80      	pop	{r7}
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40012c00 	.word	0x40012c00

080025bc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80025bc:	b480      	push	{r7}
 80025be:	b087      	sub	sp, #28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6a1b      	ldr	r3, [r3, #32]
 80025ca:	f023 0210 	bic.w	r2, r3, #16
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a1b      	ldr	r3, [r3, #32]
 80025d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80025f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	021b      	lsls	r3, r3, #8
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f023 0320 	bic.w	r3, r3, #32
 8002606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	011b      	lsls	r3, r3, #4
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	4313      	orrs	r3, r2
 8002612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a1d      	ldr	r2, [pc, #116]	; (800268c <TIM_OC2_SetConfig+0xd0>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d10d      	bne.n	8002638 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002636:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a14      	ldr	r2, [pc, #80]	; (800268c <TIM_OC2_SetConfig+0xd0>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d113      	bne.n	8002668 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002646:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800264e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	4313      	orrs	r3, r2
 800265a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	699b      	ldr	r3, [r3, #24]
 8002660:	009b      	lsls	r3, r3, #2
 8002662:	693a      	ldr	r2, [r7, #16]
 8002664:	4313      	orrs	r3, r2
 8002666:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	693a      	ldr	r2, [r7, #16]
 800266c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685a      	ldr	r2, [r3, #4]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	621a      	str	r2, [r3, #32]
}
 8002682:	bf00      	nop
 8002684:	371c      	adds	r7, #28
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr
 800268c:	40012c00 	.word	0x40012c00

08002690 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002690:	b480      	push	{r7}
 8002692:	b087      	sub	sp, #28
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	f023 0303 	bic.w	r3, r3, #3
 80026c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	68fa      	ldr	r2, [r7, #12]
 80026ce:	4313      	orrs	r3, r2
 80026d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80026d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	021b      	lsls	r3, r3, #8
 80026e0:	697a      	ldr	r2, [r7, #20]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a1d      	ldr	r2, [pc, #116]	; (8002760 <TIM_OC3_SetConfig+0xd0>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d10d      	bne.n	800270a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80026f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	021b      	lsls	r3, r3, #8
 80026fc:	697a      	ldr	r2, [r7, #20]
 80026fe:	4313      	orrs	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002708:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	4a14      	ldr	r2, [pc, #80]	; (8002760 <TIM_OC3_SetConfig+0xd0>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d113      	bne.n	800273a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	693a      	ldr	r2, [r7, #16]
 800272a:	4313      	orrs	r3, r2
 800272c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	693a      	ldr	r2, [r7, #16]
 8002736:	4313      	orrs	r3, r2
 8002738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	693a      	ldr	r2, [r7, #16]
 800273e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68fa      	ldr	r2, [r7, #12]
 8002744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	697a      	ldr	r2, [r7, #20]
 8002752:	621a      	str	r2, [r3, #32]
}
 8002754:	bf00      	nop
 8002756:	371c      	adds	r7, #28
 8002758:	46bd      	mov	sp, r7
 800275a:	bc80      	pop	{r7}
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40012c00 	.word	0x40012c00

08002764 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002764:	b480      	push	{r7}
 8002766:	b087      	sub	sp, #28
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
 800276c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6a1b      	ldr	r3, [r3, #32]
 800277e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800279a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	021b      	lsls	r3, r3, #8
 80027a2:	68fa      	ldr	r2, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80027ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	031b      	lsls	r3, r3, #12
 80027b6:	693a      	ldr	r2, [r7, #16]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a0f      	ldr	r2, [pc, #60]	; (80027fc <TIM_OC4_SetConfig+0x98>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d109      	bne.n	80027d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80027ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	695b      	ldr	r3, [r3, #20]
 80027d0:	019b      	lsls	r3, r3, #6
 80027d2:	697a      	ldr	r2, [r7, #20]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	685a      	ldr	r2, [r3, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	693a      	ldr	r2, [r7, #16]
 80027f0:	621a      	str	r2, [r3, #32]
}
 80027f2:	bf00      	nop
 80027f4:	371c      	adds	r7, #28
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bc80      	pop	{r7}
 80027fa:	4770      	bx	lr
 80027fc:	40012c00 	.word	0x40012c00

08002800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002800:	b480      	push	{r7}
 8002802:	b087      	sub	sp, #28
 8002804:	af00      	add	r7, sp, #0
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	60b9      	str	r1, [r7, #8]
 800280a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	6a1b      	ldr	r3, [r3, #32]
 8002816:	f023 0201 	bic.w	r2, r3, #1
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800282a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	011b      	lsls	r3, r3, #4
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	4313      	orrs	r3, r2
 8002834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f023 030a 	bic.w	r3, r3, #10
 800283c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800283e:	697a      	ldr	r2, [r7, #20]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	4313      	orrs	r3, r2
 8002844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	697a      	ldr	r2, [r7, #20]
 8002850:	621a      	str	r2, [r3, #32]
}
 8002852:	bf00      	nop
 8002854:	371c      	adds	r7, #28
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr

0800285c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800285c:	b480      	push	{r7}
 800285e:	b087      	sub	sp, #28
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f023 0210 	bic.w	r2, r3, #16
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002886:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	031b      	lsls	r3, r3, #12
 800288c:	697a      	ldr	r2, [r7, #20]
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002898:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	011b      	lsls	r3, r3, #4
 800289e:	693a      	ldr	r2, [r7, #16]
 80028a0:	4313      	orrs	r3, r2
 80028a2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	693a      	ldr	r2, [r7, #16]
 80028ae:	621a      	str	r2, [r3, #32]
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b085      	sub	sp, #20
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
 80028c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	f043 0307 	orr.w	r3, r3, #7
 80028dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	68fa      	ldr	r2, [r7, #12]
 80028e2:	609a      	str	r2, [r3, #8]
}
 80028e4:	bf00      	nop
 80028e6:	3714      	adds	r7, #20
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr

080028ee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b087      	sub	sp, #28
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
 80028fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002908:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	021a      	lsls	r2, r3, #8
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	431a      	orrs	r2, r3
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	4313      	orrs	r3, r2
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	4313      	orrs	r3, r2
 800291a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	609a      	str	r2, [r3, #8]
}
 8002922:	bf00      	nop
 8002924:	371c      	adds	r7, #28
 8002926:	46bd      	mov	sp, r7
 8002928:	bc80      	pop	{r7}
 800292a:	4770      	bx	lr

0800292c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800292c:	b480      	push	{r7}
 800292e:	b087      	sub	sp, #28
 8002930:	af00      	add	r7, sp, #0
 8002932:	60f8      	str	r0, [r7, #12]
 8002934:	60b9      	str	r1, [r7, #8]
 8002936:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 031f 	and.w	r3, r3, #31
 800293e:	2201      	movs	r2, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	6a1a      	ldr	r2, [r3, #32]
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	43db      	mvns	r3, r3
 800294e:	401a      	ands	r2, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6a1a      	ldr	r2, [r3, #32]
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 031f 	and.w	r3, r3, #31
 800295e:	6879      	ldr	r1, [r7, #4]
 8002960:	fa01 f303 	lsl.w	r3, r1, r3
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	621a      	str	r2, [r3, #32]
}
 800296a:	bf00      	nop
 800296c:	371c      	adds	r7, #28
 800296e:	46bd      	mov	sp, r7
 8002970:	bc80      	pop	{r7}
 8002972:	4770      	bx	lr

08002974 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002974:	b480      	push	{r7}
 8002976:	b085      	sub	sp, #20
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002984:	2b01      	cmp	r3, #1
 8002986:	d101      	bne.n	800298c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002988:	2302      	movs	r3, #2
 800298a:	e046      	b.n	8002a1a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	68fa      	ldr	r2, [r7, #12]
 80029c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a16      	ldr	r2, [pc, #88]	; (8002a24 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00e      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029d8:	d009      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a12      	ldr	r2, [pc, #72]	; (8002a28 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d004      	beq.n	80029ee <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a10      	ldr	r2, [pc, #64]	; (8002a2c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d10c      	bne.n	8002a08 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	68ba      	ldr	r2, [r7, #8]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68ba      	ldr	r2, [r7, #8]
 8002a06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3714      	adds	r7, #20
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr
 8002a24:	40012c00 	.word	0x40012c00
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40000800 	.word	0x40000800

08002a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr

08002a42 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a4a:	bf00      	nop
 8002a4c:	370c      	adds	r7, #12
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr

08002a54 <__libc_init_array>:
 8002a54:	b570      	push	{r4, r5, r6, lr}
 8002a56:	2600      	movs	r6, #0
 8002a58:	4d0c      	ldr	r5, [pc, #48]	; (8002a8c <__libc_init_array+0x38>)
 8002a5a:	4c0d      	ldr	r4, [pc, #52]	; (8002a90 <__libc_init_array+0x3c>)
 8002a5c:	1b64      	subs	r4, r4, r5
 8002a5e:	10a4      	asrs	r4, r4, #2
 8002a60:	42a6      	cmp	r6, r4
 8002a62:	d109      	bne.n	8002a78 <__libc_init_array+0x24>
 8002a64:	f000 f822 	bl	8002aac <_init>
 8002a68:	2600      	movs	r6, #0
 8002a6a:	4d0a      	ldr	r5, [pc, #40]	; (8002a94 <__libc_init_array+0x40>)
 8002a6c:	4c0a      	ldr	r4, [pc, #40]	; (8002a98 <__libc_init_array+0x44>)
 8002a6e:	1b64      	subs	r4, r4, r5
 8002a70:	10a4      	asrs	r4, r4, #2
 8002a72:	42a6      	cmp	r6, r4
 8002a74:	d105      	bne.n	8002a82 <__libc_init_array+0x2e>
 8002a76:	bd70      	pop	{r4, r5, r6, pc}
 8002a78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a7c:	4798      	blx	r3
 8002a7e:	3601      	adds	r6, #1
 8002a80:	e7ee      	b.n	8002a60 <__libc_init_array+0xc>
 8002a82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a86:	4798      	blx	r3
 8002a88:	3601      	adds	r6, #1
 8002a8a:	e7f2      	b.n	8002a72 <__libc_init_array+0x1e>
 8002a8c:	08002ae4 	.word	0x08002ae4
 8002a90:	08002ae4 	.word	0x08002ae4
 8002a94:	08002ae4 	.word	0x08002ae4
 8002a98:	08002ae8 	.word	0x08002ae8

08002a9c <memset>:
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4402      	add	r2, r0
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d100      	bne.n	8002aa6 <memset+0xa>
 8002aa4:	4770      	bx	lr
 8002aa6:	f803 1b01 	strb.w	r1, [r3], #1
 8002aaa:	e7f9      	b.n	8002aa0 <memset+0x4>

08002aac <_init>:
 8002aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aae:	bf00      	nop
 8002ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ab2:	bc08      	pop	{r3}
 8002ab4:	469e      	mov	lr, r3
 8002ab6:	4770      	bx	lr

08002ab8 <_fini>:
 8002ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aba:	bf00      	nop
 8002abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002abe:	bc08      	pop	{r3}
 8002ac0:	469e      	mov	lr, r3
 8002ac2:	4770      	bx	lr
